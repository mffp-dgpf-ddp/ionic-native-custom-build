var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var NotificationVisibility;
(function (NotificationVisibility) {
    NotificationVisibility[NotificationVisibility["Visible"] = 0] = "Visible";
    NotificationVisibility[NotificationVisibility["VisibleNotifyCompleted"] = 1] = "VisibleNotifyCompleted";
    NotificationVisibility[NotificationVisibility["VisibilityHidden"] = 2] = "VisibilityHidden";
    NotificationVisibility[NotificationVisibility["VisibleNotifyOnlyCompletion"] = 3] = "VisibleNotifyOnlyCompletion";
})(NotificationVisibility || (NotificationVisibility = {}));
var DownloaderOriginal = /** @class */ (function (_super) {
    __extends(DownloaderOriginal, _super);
    function DownloaderOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownloaderOriginal.prototype.download = function (request) { return cordova(this, "download", {}, arguments); };
    DownloaderOriginal.pluginName = "Downloader";
    DownloaderOriginal.plugin = "integrator-cordova-plugin-downloader";
    DownloaderOriginal.pluginRef = "cordova.plugins.Downloader";
    DownloaderOriginal.repo = "https://github.com/Luka313/integrator-cordova-plugin-downloader.git";
    DownloaderOriginal.platforms = ["Android"];
    return DownloaderOriginal;
}(IonicNativePlugin));
var Downloader = new DownloaderOriginal();
export { Downloader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Rvd25sb2FkZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEUsTUFBTSxDQUFOLElBQVksc0JBS1g7QUFMRCxXQUFZLHNCQUFzQjtJQUNoQyx5RUFBVyxDQUFBO0lBQ1gsdUdBQTBCLENBQUE7SUFDMUIsMkZBQW9CLENBQUE7SUFDcEIsaUhBQStCLENBQUE7QUFDakMsQ0FBQyxFQUxXLHNCQUFzQixLQUF0QixzQkFBc0IsUUFLakM7O0lBMEcrQiw4QkFBaUI7Ozs7SUFNL0MsNkJBQVEsYUFBQyxPQUF3Qjs7Ozs7O3FCQXhIbkM7RUFrSGdDLGlCQUFpQjtTQUFwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblZpc2liaWxpdHkge1xyXG4gIFZpc2libGUgPSAwLFxyXG4gIFZpc2libGVOb3RpZnlDb21wbGV0ZWQgPSAxLFxyXG4gIFZpc2liaWxpdHlIaWRkZW4gPSAyLFxyXG4gIFZpc2libGVOb3RpZnlPbmx5Q29tcGxldGlvbiA9IDMsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG93bmxvYWRIdHRwSGVhZGVyIHtcclxuICBoZWFkZXI6IHN0cmluZztcclxuICB2YWx1ZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uRGlyZWN0b3J5IHtcclxuICBkaXJUeXBlOiBzdHJpbmc7XHJcbiAgc3ViUGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvd25sb2FkUmVxdWVzdCB7XHJcbiAgLyoqXHJcbiAgICogTG9jYXRpb24gb2YgdGhlIHJlc291cmNlIHRvIGRvd25sb2FkXHJcbiAgICovXHJcbiAgdXJpOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgdGl0bGUgb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpLlxyXG4gICAqIElmIG5vIHRpdGxlIGlzIGdpdmVuLCBhIGRlZmF1bHQgb25lIHdpbGwgYmUgYXNzaWduZWQgYmFzZWQgb24gdGhlIGRvd25sb2FkIGZpbGVuYW1lLCBvbmNlIHRoZSBkb3dubG9hZCBzdGFydHMuXHJcbiAgICovXHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2V0IGEgZGVzY3JpcHRpb24gb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBNSU1FIGNvbnRlbnQgdHlwZSBvZiB0aGlzIGRvd25sb2FkLiBUaGlzIHdpbGwgb3ZlcnJpZGUgdGhlIGNvbnRlbnQgdHlwZSBkZWNsYXJlZCBpbiB0aGUgc2VydmVyJ3MgcmVzcG9uc2UuXHJcbiAgICovXHJcbiAgbWltZVR5cGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogU2V0IHdoZXRoZXIgdGhpcyBkb3dubG9hZCBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBzeXN0ZW0ncyBEb3dubG9hZHMgVUkuIFRydWUgYnkgZGVmYXVsdC5cclxuICAgKi9cclxuICB2aXNpYmxlSW5Eb3dubG9hZHNVaT86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogQ29udHJvbCB3aGV0aGVyIGEgc3lzdGVtIG5vdGlmaWNhdGlvbiBpcyBwb3N0ZWQgYnkgdGhlIGRvd25sb2FkIG1hbmFnZXIgd2hpbGUgdGhpcyBkb3dubG9hZCBpcyBydW5uaW5nIG9yIHdoZW4gaXQgaXMgY29tcGxldGVkLlxyXG4gICAqL1xyXG4gIG5vdGlmaWNhdGlvblZpc2liaWxpdHk/OiBOb3RpZmljYXRpb25WaXNpYmlsaXR5O1xyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUgdG8gYSBwYXRoIHdpdGhpbiB0aGUgYXBwbGljYXRpb24ncyBleHRlcm5hbCBmaWxlcyBkaXJlY3RvcnlcclxuICAgKi9cclxuICBkZXN0aW5hdGlvbkluRXh0ZXJuYWxGaWxlc0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUgdG8gYSBwYXRoIHdpdGhpbiB0aGUgcHVibGljIGV4dGVybmFsIHN0b3JhZ2UgZGlyZWN0b3J5XHJcbiAgICovXHJcbiAgZGVzdGluYXRpb25JbkV4dGVybmFsUHVibGljRGlyPzogRGVzdGluYXRpb25EaXJlY3Rvcnk7XHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSBsb2NhbCBkZXN0aW5hdGlvbiBmb3IgdGhlIGRvd25sb2FkZWQgZmlsZS5cclxuICAgKiBNdXN0IGJlIGEgZmlsZSBVUkkgdG8gYSBwYXRoIG9uIGV4dGVybmFsIHN0b3JhZ2UsIGFuZCB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBtdXN0IGhhdmUgdGhlIFdSSVRFX0VYVEVSTkFMX1NUT1JBR0UgcGVybWlzc2lvbi5cclxuICAgKi9cclxuICBkZXN0aW5hdGlvblVyaT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBBZGQgYW4gSFRUUCBoZWFkZXIgdG8gYmUgaW5jbHVkZWQgd2l0aCB0aGUgZG93bmxvYWQgcmVxdWVzdC4gVGhlIGhlYWRlciB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QuXHJcbiAgICovXHJcbiAgaGVhZGVycz86IERvd25sb2FkSHR0cEhlYWRlcltdO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgRG93bmxvYWRlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gaXMgZGVzaWduZWQgdG8gc3VwcG9ydCBkb3dubG9hZGluZyBmaWxlcyB1c2luZyBBbmRyb2lkIERvd25sb2FkTWFuYWdlci5cclxuICpcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRG93bmxvYWRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZG93bmxvYWRlci9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvd25sb2FkZXI6IERvd25sb2FkZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogICAgdmFyIHJlcXVlc3Q6IERvd25sb2FkUmVxdWVzdCA9IHtcclxuICogICAgICAgICAgIHVyaTogWU9VUl9VUkksXHJcbiAqICAgICAgICAgICB0aXRsZTogJ015RG93bmxvYWQnLFxyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG4gKiAgICAgICAgICAgbWltZVR5cGU6ICcnLFxyXG4gKiAgICAgICAgICAgdmlzaWJsZUluRG93bmxvYWRzVWk6IHRydWUsXHJcbiAqICAgICAgICAgICBub3RpZmljYXRpb25WaXNpYmlsaXR5OiBOb3RpZmljYXRpb25WaXNpYmlsaXR5LlZpc2libGVOb3RpZnlDb21wbGV0ZWQsXHJcbiAqICAgICAgICAgICBkZXN0aW5hdGlvbkluRXh0ZXJuYWxGaWxlc0Rpcjoge1xyXG4gKiAgICAgICAgICAgICAgIGRpclR5cGU6ICdEb3dubG9hZHMnLFxyXG4gKiAgICAgICAgICAgICAgIHN1YlBhdGg6ICdNeUZpbGUuYXBrJ1xyXG4gKiAgICAgICAgICAgfVxyXG4gKiAgICAgICB9O1xyXG4gKlxyXG4gKlxyXG4gKiAgIHRoaXMuZG93bmxvYWRlci5kb3dubG9hZChyZXF1ZXN0KVxyXG4gKiAgIFx0XHRcdC50aGVuKChsb2NhdGlvbjogc3RyaW5nKSA9PiBjb25zb2xlLmxvZygnRmlsZSBkb3dubG9hZGVkIGF0OicrbG9jYXRpb24pKVxyXG4gKiAgIFx0XHRcdC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogTm90aWZpY2F0aW9uVmlzaWJpbGl0eVxyXG4gKiBIZWFkZXJcclxuICogRGVzdGluYXRpb25EaXJlY3RvcnlcclxuICogRG93bmxvYWRIdHRwSGVhZGVyXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRG93bmxvYWRlcicsXHJcbiAgcGx1Z2luOiAnaW50ZWdyYXRvci1jb3Jkb3ZhLXBsdWdpbi1kb3dubG9hZGVyJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuRG93bmxvYWRlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9MdWthMzEzL2ludGVncmF0b3ItY29yZG92YS1wbHVnaW4tZG93bmxvYWRlci5naXQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERvd25sb2FkZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogIFN0YXJ0cyBhIG5ldyBkb3dubG9hZCBhbmQgcmV0dXJucyBsb2NhdGlvbiBvZiB0aGUgZG93bmxvYWRlZCBmaWxlIG9uIGNvbXBsZXRpb25cclxuICAgKiAgQHBhcmFtIHJlcXVlc3Qge0Rvd25sb2FkUmVxdWVzdH1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZG93bmxvYWQocmVxdWVzdDogRG93bmxvYWRSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19