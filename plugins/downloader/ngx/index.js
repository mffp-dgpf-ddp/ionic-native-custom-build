import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var NotificationVisibility;
(function (NotificationVisibility) {
    NotificationVisibility[NotificationVisibility["Visible"] = 0] = "Visible";
    NotificationVisibility[NotificationVisibility["VisibleNotifyCompleted"] = 1] = "VisibleNotifyCompleted";
    NotificationVisibility[NotificationVisibility["VisibilityHidden"] = 2] = "VisibilityHidden";
    NotificationVisibility[NotificationVisibility["VisibleNotifyOnlyCompletion"] = 3] = "VisibleNotifyOnlyCompletion";
})(NotificationVisibility || (NotificationVisibility = {}));
var Downloader = /** @class */ (function (_super) {
    __extends(Downloader, _super);
    function Downloader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Downloader.prototype.download = function (request) { return cordova(this, "download", {}, arguments); };
    Downloader.pluginName = "Downloader";
    Downloader.plugin = "integrator-cordova-plugin-downloader";
    Downloader.pluginRef = "cordova.plugins.Downloader";
    Downloader.repo = "https://github.com/Luka313/integrator-cordova-plugin-downloader.git";
    Downloader.platforms = ["Android"];
    Downloader = __decorate([
        Injectable()
    ], Downloader);
    return Downloader;
}(IonicNativePlugin));
export { Downloader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Rvd25sb2FkZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEUsTUFBTSxDQUFOLElBQVksc0JBS1g7QUFMRCxXQUFZLHNCQUFzQjtJQUNoQyx5RUFBVyxDQUFBO0lBQ1gsdUdBQTBCLENBQUE7SUFDMUIsMkZBQW9CLENBQUE7SUFDcEIsaUhBQStCLENBQUE7QUFDakMsQ0FBQyxFQUxXLHNCQUFzQixLQUF0QixzQkFBc0IsUUFLakM7O0lBMEcrQiw4QkFBaUI7Ozs7SUFNL0MsNkJBQVEsYUFBQyxPQUF3Qjs7Ozs7O0lBTnRCLFVBQVU7UUFEdEIsVUFBVSxFQUFFO09BQ0EsVUFBVTtxQkFsSHZCO0VBa0hnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25WaXNpYmlsaXR5IHtcclxuICBWaXNpYmxlID0gMCxcclxuICBWaXNpYmxlTm90aWZ5Q29tcGxldGVkID0gMSxcclxuICBWaXNpYmlsaXR5SGlkZGVuID0gMixcclxuICBWaXNpYmxlTm90aWZ5T25seUNvbXBsZXRpb24gPSAzLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvd25sb2FkSHR0cEhlYWRlciB7XHJcbiAgaGVhZGVyOiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZXN0aW5hdGlvbkRpcmVjdG9yeSB7XHJcbiAgZGlyVHlwZTogc3RyaW5nO1xyXG4gIHN1YlBhdGg6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZFJlcXVlc3Qge1xyXG4gIC8qKlxyXG4gICAqIExvY2F0aW9uIG9mIHRoZSByZXNvdXJjZSB0byBkb3dubG9hZFxyXG4gICAqL1xyXG4gIHVyaTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHRpdGxlIG9mIHRoaXMgZG93bmxvYWQsIHRvIGJlIGRpc3BsYXllZCBpbiBub3RpZmljYXRpb25zIChpZiBlbmFibGVkKS5cclxuICAgKiBJZiBubyB0aXRsZSBpcyBnaXZlbiwgYSBkZWZhdWx0IG9uZSB3aWxsIGJlIGFzc2lnbmVkIGJhc2VkIG9uIHRoZSBkb3dubG9hZCBmaWxlbmFtZSwgb25jZSB0aGUgZG93bmxvYWQgc3RhcnRzLlxyXG4gICAqL1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNldCBhIGRlc2NyaXB0aW9uIG9mIHRoaXMgZG93bmxvYWQsIHRvIGJlIGRpc3BsYXllZCBpbiBub3RpZmljYXRpb25zIChpZiBlbmFibGVkKVxyXG4gICAqL1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgTUlNRSBjb250ZW50IHR5cGUgb2YgdGhpcyBkb3dubG9hZC4gVGhpcyB3aWxsIG92ZXJyaWRlIHRoZSBjb250ZW50IHR5cGUgZGVjbGFyZWQgaW4gdGhlIHNlcnZlcidzIHJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIG1pbWVUeXBlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNldCB3aGV0aGVyIHRoaXMgZG93bmxvYWQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgc3lzdGVtJ3MgRG93bmxvYWRzIFVJLiBUcnVlIGJ5IGRlZmF1bHQuXHJcbiAgICovXHJcbiAgdmlzaWJsZUluRG93bmxvYWRzVWk/OiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIENvbnRyb2wgd2hldGhlciBhIHN5c3RlbSBub3RpZmljYXRpb24gaXMgcG9zdGVkIGJ5IHRoZSBkb3dubG9hZCBtYW5hZ2VyIHdoaWxlIHRoaXMgZG93bmxvYWQgaXMgcnVubmluZyBvciB3aGVuIGl0IGlzIGNvbXBsZXRlZC5cclxuICAgKi9cclxuICBub3RpZmljYXRpb25WaXNpYmlsaXR5PzogTm90aWZpY2F0aW9uVmlzaWJpbGl0eTtcclxuICAvKipcclxuICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uJ3MgZXh0ZXJuYWwgZmlsZXMgZGlyZWN0b3J5XHJcbiAgICovXHJcbiAgZGVzdGluYXRpb25JbkV4dGVybmFsRmlsZXNEaXI/OiBEZXN0aW5hdGlvbkRpcmVjdG9yeTtcclxuICAvKipcclxuICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIHB1YmxpYyBleHRlcm5hbCBzdG9yYWdlIGRpcmVjdG9yeVxyXG4gICAqL1xyXG4gIGRlc3RpbmF0aW9uSW5FeHRlcm5hbFB1YmxpY0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUuXHJcbiAgICogTXVzdCBiZSBhIGZpbGUgVVJJIHRvIGEgcGF0aCBvbiBleHRlcm5hbCBzdG9yYWdlLCBhbmQgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gbXVzdCBoYXZlIHRoZSBXUklURV9FWFRFUk5BTF9TVE9SQUdFIHBlcm1pc3Npb24uXHJcbiAgICovXHJcbiAgZGVzdGluYXRpb25Vcmk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWRkIGFuIEhUVFAgaGVhZGVyIHRvIGJlIGluY2x1ZGVkIHdpdGggdGhlIGRvd25sb2FkIHJlcXVlc3QuIFRoZSBoZWFkZXIgd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxyXG4gICAqL1xyXG4gIGhlYWRlcnM/OiBEb3dubG9hZEh0dHBIZWFkZXJbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERvd25sb2FkZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGlzIGRlc2lnbmVkIHRvIHN1cHBvcnQgZG93bmxvYWRpbmcgZmlsZXMgdXNpbmcgQW5kcm9pZCBEb3dubG9hZE1hbmFnZXIuXHJcbiAqXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERvd25sb2FkZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Rvd25sb2FkZXIvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkb3dubG9hZGVyOiBEb3dubG9hZGVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqICAgIHZhciByZXF1ZXN0OiBEb3dubG9hZFJlcXVlc3QgPSB7XHJcbiAqICAgICAgICAgICB1cmk6IFlPVVJfVVJJLFxyXG4gKiAgICAgICAgICAgdGl0bGU6ICdNeURvd25sb2FkJyxcclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICogICAgICAgICAgIG1pbWVUeXBlOiAnJyxcclxuICogICAgICAgICAgIHZpc2libGVJbkRvd25sb2Fkc1VpOiB0cnVlLFxyXG4gKiAgICAgICAgICAgbm90aWZpY2F0aW9uVmlzaWJpbGl0eTogTm90aWZpY2F0aW9uVmlzaWJpbGl0eS5WaXNpYmxlTm90aWZ5Q29tcGxldGVkLFxyXG4gKiAgICAgICAgICAgZGVzdGluYXRpb25JbkV4dGVybmFsRmlsZXNEaXI6IHtcclxuICogICAgICAgICAgICAgICBkaXJUeXBlOiAnRG93bmxvYWRzJyxcclxuICogICAgICAgICAgICAgICBzdWJQYXRoOiAnTXlGaWxlLmFwaydcclxuICogICAgICAgICAgIH1cclxuICogICAgICAgfTtcclxuICpcclxuICpcclxuICogICB0aGlzLmRvd25sb2FkZXIuZG93bmxvYWQocmVxdWVzdClcclxuICogICBcdFx0XHQudGhlbigobG9jYXRpb246IHN0cmluZykgPT4gY29uc29sZS5sb2coJ0ZpbGUgZG93bmxvYWRlZCBhdDonK2xvY2F0aW9uKSlcclxuICogICBcdFx0XHQuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIE5vdGlmaWNhdGlvblZpc2liaWxpdHlcclxuICogSGVhZGVyXHJcbiAqIERlc3RpbmF0aW9uRGlyZWN0b3J5XHJcbiAqIERvd25sb2FkSHR0cEhlYWRlclxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0Rvd25sb2FkZXInLFxyXG4gIHBsdWdpbjogJ2ludGVncmF0b3ItY29yZG92YS1wbHVnaW4tZG93bmxvYWRlcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkRvd25sb2FkZXInLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTHVrYTMxMy9pbnRlZ3JhdG9yLWNvcmRvdmEtcGx1Z2luLWRvd25sb2FkZXIuZ2l0JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEb3dubG9hZGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqICBTdGFydHMgYSBuZXcgZG93bmxvYWQgYW5kIHJldHVybnMgbG9jYXRpb24gb2YgdGhlIGRvd25sb2FkZWQgZmlsZSBvbiBjb21wbGV0aW9uXHJcbiAgICogIEBwYXJhbSByZXF1ZXN0IHtEb3dubG9hZFJlcXVlc3R9XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRvd25sb2FkKHJlcXVlc3Q6IERvd25sb2FkUmVxdWVzdCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==