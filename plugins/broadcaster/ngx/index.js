import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Broadcaster = /** @class */ (function (_super) {
    __extends(Broadcaster, _super);
    function Broadcaster() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Broadcaster.prototype.addEventListener = function (eventName, isGlobal) {
        if (isGlobal === void 0) { isGlobal = false; }
        return cordova(this, "addEventListener", { "observable": true, "clearFunction": "removeEventListener", "clearWithArgs": true }, arguments);
    };
    Broadcaster.prototype.fireNativeEvent = function (eventName, isGlobalOrEventData, data) { return cordova(this, "fireNativeEvent", {}, arguments); };
    Broadcaster.pluginName = "Broadcaster";
    Broadcaster.plugin = "cordova-plugin-broadcaster";
    Broadcaster.pluginRef = "broadcaster";
    Broadcaster.repo = "https://github.com/bsorrentino/cordova-broadcaster";
    Broadcaster.platforms = ["Android", "iOS", "Browser"];
    Broadcaster = __decorate([
        Injectable()
    ], Broadcaster);
    return Broadcaster;
}(IonicNativePlugin));
export { Broadcaster };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Jyb2FkY2FzdGVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBNkNELCtCQUFpQjs7OztJQVloRCxzQ0FBZ0IsYUFBQyxTQUFpQixFQUFFLFFBQWdCO1FBQWhCLHlCQUFBLEVBQUEsZ0JBQWdCOzs7SUFlcEQscUNBQWUsYUFBQyxTQUFpQixFQUFFLG1CQUF3QyxFQUFFLElBQWdCOzs7Ozs7SUEzQmxGLFdBQVc7UUFEdkIsVUFBVSxFQUFFO09BQ0EsV0FBVztzQkEvQ3hCO0VBK0NpQyxpQkFBaUI7U0FBckMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBTcGVjaWZpYyBkYXRhIGZvciBBbmRyb2lkIGltcGxlbWVudGF0aW9uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFuZHJvaWREYXRhIHtcclxuICBleHRyYXM6IG9iamVjdDtcclxuICBmbGFnczogbnVtYmVyO1xyXG4gIGNhdGVnb3J5OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQb3NzaWJseSBFdmVudCBEYXRhIHR5cGVzXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBFdmVudERhdGEgPSBvYmplY3QgfCBBbmRyb2lkRGF0YSB8IG51bGw7XHJcblxyXG4vKipcclxuICogQG5hbWUgQnJvYWRjYXN0ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFkZHMgZXhjaGFuZ2luZyBldmVudHMgYmV0d2VlbiBuYXRpdmUgY29kZSBhbmQgeW91ciBhcHAuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEJyb2FkY2FzdGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9icm9hZGNhc3Rlci9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyb2FkY2FzdGVyOiBCcm9hZGNhc3RlcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyBMaXN0ZW4gdG8gZXZlbnRzIGZyb20gTmF0aXZlXHJcbiAqIHRoaXMuYnJvYWRjYXN0ZXIuYWRkRXZlbnRMaXN0ZW5lcignZXZlbnROYW1lJykuc3Vic2NyaWJlKChldmVudCkgPT4gY29uc29sZS5sb2coZXZlbnQpKTtcclxuICpcclxuICogLy8gU2VuZCBldmVudCB0byBOYXRpdmVcclxuICogdGhpcy5icm9hZGNhc3Rlci5maXJlTmF0aXZlRXZlbnQoJ2V2ZW50TmFtZScsIHt9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdzdWNjZXNzJykpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdCcm9hZGNhc3RlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYnJvYWRjYXN0ZXInLFxyXG4gIHBsdWdpblJlZjogJ2Jyb2FkY2FzdGVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Jzb3JyZW50aW5vL2NvcmRvdmEtYnJvYWRjYXN0ZXInLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdCcm93c2VyJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJyb2FkY2FzdGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gbGlzdGVuIHRvIGFuIGV2ZW50IHNlbnQgZnJvbSB0aGUgbmF0aXZlIGNvZGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0dsb2JhbCBWYWxpZCBvbmx5IGZvciBBbmRyb2lkLiBJdCBhbGxvd3MgdG8gbGlzdGVuIGZvciBnbG9iYWwgbWVzc2FnZXMoaS5lLiBpbnRlbnRzKVxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHdhdGNoIHdoZW4gYW4gZXZlbnQgaXMgcmVjZWl2ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3JlbW92ZUV2ZW50TGlzdGVuZXInLFxyXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcclxuICB9KVxyXG4gIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGlzR2xvYmFsID0gZmFsc2UpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBzZW5kcyBkYXRhIHRvIHRoZSBuYXRpdmUgY29kZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR2xvYmFsT3JFdmVudERhdGEgbWVhbnMgdGhhdCBtZXNzYWdlIGlzIGdsb2JhbCAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxyXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IGlzR2xvYmFsT3JFdmVudERhdGEgYWxsb3dzIHRvIHNwZWNpZnkgJ2ZsYWdzYCBhbmQgJ2NhdGVnb3J5JyAodmFsaWQgb25seSBvbiBBbmRyb2lkKVxyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpc0dsb2JhbE9yRXZlbnREYXRhIGFsbG93cyB0byBzcGVjaWZ5IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBjdXN0b20gZXZlbnQgZGF0YSAoYWxsIHBsYXRmb3JtKVxyXG4gICAqIEBwYXJhbSB7QW5kcm9pZERhdGF9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5ICdmbGFnc2AgYW5kICdjYXRlZ29yeScgaWYgaXNHbG9iYWwgaXMgc2V0ICh2YWxpZCBvbmx5IG9uIEFuZHJvaWQpXHJcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSBpZiBpc0dsb2JhbCBpcyBzZXQsIGFsbG93cyB0byBzcGVjaWZ5IGEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBjdXN0b20gZXZlbnQgZGF0YSAoYWxsIHBsYXRmb3JtKVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGFuIGV2ZW50IGlzIHN1Y2Nlc3NmdWxseSBmaXJlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBmaXJlTmF0aXZlRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIGlzR2xvYmFsT3JFdmVudERhdGE6IGJvb2xlYW4gfCBFdmVudERhdGEsIGRhdGE/OiBFdmVudERhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=