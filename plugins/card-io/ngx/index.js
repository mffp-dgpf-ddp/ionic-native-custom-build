import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CardIO = /** @class */ (function (_super) {
    __extends(CardIO, _super);
    function CardIO() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardIO.prototype.canScan = function () { return cordova(this, "canScan", {}, arguments); };
    CardIO.prototype.scan = function (options) { return cordova(this, "scan", {}, arguments); };
    CardIO.prototype.version = function () { return cordova(this, "version", {}, arguments); };
    CardIO.pluginName = "CardIO";
    CardIO.plugin = "card.io.cordova.mobilesdk";
    CardIO.pluginRef = "CardIO";
    CardIO.repo = "https://github.com/card-io/card.io-Cordova-Plugin";
    CardIO.platforms = ["Android", "iOS"];
    CardIO = __decorate([
        Injectable()
    ], CardIO);
    return CardIO;
}(IonicNativePlugin));
export { CardIO };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhcmQtaW8vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0s1QywwQkFBaUI7Ozs7SUFRM0Msd0JBQU87SUFVUCxxQkFBSSxhQUFDLE9BQXVCO0lBUzVCLHdCQUFPOzs7Ozs7SUEzQkksTUFBTTtRQURsQixVQUFVLEVBQUU7T0FDQSxNQUFNO2lCQWhMbkI7RUFnTDRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZElPT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogU2V0IHRvIHRydWUgdG8gcmVxdWlyZSBleHBpcnkgZGF0ZVxyXG4gICAqL1xyXG4gIHJlcXVpcmVFeHBpcnk/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiAgVGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCBmb3IgdGhlIGNhcmQgQ1ZWXHJcbiAgICovXHJcbiAgcmVxdWlyZUNWVj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgZm9yIHRoZSBjYXJkIGJpbGxpbmcgcG9zdGFsIGNvZGUuXHJcbiAgICovXHJcbiAgcmVxdWlyZVBvc3RhbENvZGU/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiAgUmVtb3ZlcyB0aGUga2V5Ym9hcmQgYnV0dG9uIGZyb20gdGhlIHNjYW4gc2NyZWVuLlxyXG4gICAqL1xyXG4gIHN1cHByZXNzTWFudWFsPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBvc3RhbCBjb2RlIHdpbGwgb25seSBjb2xsZWN0IG51bWVyaWMgaW5wdXQuIFNldCB0aGlzIGlmIHlvdSBrbm93IHRoZSBleHBlY3RlZCBjb3VudHJ5J3MgcG9zdGFsIGNvZGUgaGFzIG9ubHkgbnVtZXJpYyBwb3N0YWwgY29kZXMuXHJcbiAgICovXHJcbiAgcmVzdHJpY3RQb3N0YWxDb2RlVG9OdW1lcmljT25seT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB0aGVtZSBmb3IgdGhlIGNhcmQuaW8gQWN0aXZpdHkncyB3aWxsIGJlIHNldCB0byB0aGUgdGhlbWUgb2YgdGhlIGFwcGxpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGtlZXBBcHBsaWNhdGlvblRoZW1lPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCBmb3IgdGhlIGNhcmRob2xkZXIgbmFtZVxyXG4gICAqL1xyXG4gIHJlcXVpcmVDYXJkaG9sZGVyTmFtZT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gZGlzcGxheSBpbnN0cnVjdGlvbnMgdG8gdGhlIHVzZXIgd2hpbGUgdGhleSBhcmUgc2Nhbm5pbmcgdGhlaXIgY2FyZC5cclxuICAgKi9cclxuICBzY2FuSW5zdHJ1Y3Rpb25zPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiAgSWYgc2V0LCB0aGUgY2FyZCB3aWxsIG5vdCBiZSBzY2FubmVkIHdpdGggdGhlIGNhbWVyYS5cclxuICAgKi9cclxuICBub0NhbWVyYT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHNjYW5FeHBpcnkgaXMgdHJ1ZSwgYW4gYXR0ZW1wdCB0byBleHRyYWN0IHRoZSBleHBpcnkgZnJvbSB0aGUgY2FyZCBpbWFnZSB3aWxsIGJlIG1hZGUuXHJcbiAgICovXHJcbiAgc2NhbkV4cGlyeT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2UgZm9yIGFsbCBzdHJpbmdzIGFwcGVhcmluZyBpbiB0aGUgdXNlciBpbnRlcmZhY2UuIElmIG5vdCBzZXQsIG9yIGlmIHNldCB0byBudWxsLCBkZWZhdWx0cyB0byB0aGUgZGV2aWNlJ3MgY3VycmVudCBsYW5ndWFnZSBzZXR0aW5nLlxyXG4gICAqL1xyXG4gIGxhbmd1YWdlT3JMb2NhbGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIENoYW5nZXMgdGhlIGNvbG9yIG9mIHRoZSBndWlkZSBvdmVybGF5IG9uIHRoZSBjYW1lcmEuIFRoZSBjb2xvciBpcyBwcm92aWRlZCBpbiBoZXhhZGVjaW1hbCBmb3JtYXQgKGUuZy4gYCNGRkZGRkZgKVxyXG4gICAqL1xyXG4gIGd1aWRlQ29sb3I/OiBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2VyIHdpbGwgbm90IGJlIHByb21wdGVkIHRvIGNvbmZpcm0gdGhlaXIgY2FyZCBudW1iZXIgYWZ0ZXIgcHJvY2Vzc2luZy5cclxuICAgKi9cclxuICBzdXByZXNzQ29uZmlybWF0aW9uPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQuaW8gbG9nbyB3aWxsIG5vdCBiZSBzaG93biBvdmVybGFpZCBvbiB0aGUgY2FtZXJhLlxyXG4gICAqL1xyXG4gIGhpZGVDYXJkSU9Mb2dvPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNhcmQuaW8gbG9nbyB3aWxsIGJlIHNob3duIGluc3RlYWQgb2YgdGhlIFBheVBhbCBsb2dvLlxyXG4gICAqL1xyXG4gIHVzZUNhcmRJT0xvZ28/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBPbmNlIGEgY2FyZCBpbWFnZSBoYXMgYmVlbiBjYXB0dXJlZCBidXQgYmVmb3JlIGl0IGhhcyBiZWVuIHByb2Nlc3NlZCwgdGhpcyB2YWx1ZSB3aWxsIGRldGVybWluZSB3aGV0aGVyIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmcgYXMgdXN1YWwuXHJcbiAgICovXHJcbiAgc3VwcmVzc1NjYW4/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcmRJT1Jlc3BvbnNlIHtcclxuICAvKipcclxuICAgKiBDYXJkIHR5cGVcclxuICAgKi9cclxuICBjYXJkVHlwZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBNYXNrZWQgY2FyZCBudW1iZXIsIHNob3dpbmcgb25seSBsYXN0IDQgZGlnaXRzXHJcbiAgICovXHJcbiAgcmVkYWN0ZWRDYXJkTnVtYmVyOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bGwgY2FyZCBudW1iZXJcclxuICAgKi9cclxuICBjYXJkTnVtYmVyOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cGlyeSBtb250aFxyXG4gICAqL1xyXG4gIGV4cGlyeU1vbnRoOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4cGlyeSB5ZWFyXHJcbiAgICovXHJcbiAgZXhwaXJ5WWVhcjogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBDVlZcclxuICAgKi9cclxuICBjdnY6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogUG9zdGFsIGNvZGVcclxuICAgKi9cclxuICBwb3N0YWxDb2RlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIENhcmRob2xkZXIgbmFtZVxyXG4gICAqL1xyXG4gIGNhcmRob2xkZXJOYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBDYXJkIElPXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBAdXNhZ2VcclxuICogVGhpcyBwbHVnLWluIGV4cG9zZXMgY2FyZC5pbyBjcmVkaXQgY2FyZCBzY2FubmluZy5cclxuICpcclxuICogKipOT1RFKio6IElmIHlvdSB3b3VsZCBsaWtlIHRvIGFjdHVhbGx5IHByb2Nlc3MgYSBjcmVkaXQgY2FyZCBjaGFyZ2UsIHlvdSBtaWdodCBiZSBpbnRlcmVzdGVkIGluIHRoZSBbUGF5UGFsIENvcmRvdmEgUGx1Zy1pbl0oaHR0cHM6Ly9naXRodWIuY29tL3BheXBhbC9QYXlQYWwtQ29yZG92YS1QbHVnaW4pLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNhcmQuaW8uY29yZG92YS5tb2JpbGVzZGtgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQ2FyZCBJTyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2NhcmQtaW8vY2FyZC5pby1Db3Jkb3ZhLVBsdWdpbikuXHJcbiAqXHJcbiAqIE5vdGU6IEZvciB1c2Ugd2l0aCBpT1MgMTAgKyBXaGVuIGJ1aWxkaW5nIHlvdXIgYXBwIHdpdGggdGhlIGlPUyAxMCBTREsgKywgeW91IGhhdmUgdG8gYWRkIHNvbWUgaW5mbyB0byB0aGUgaW5mby5wbGlzdCBmaWxlLiBUaGlzIGlzIGR1ZSB0byBpbmNyZWFzZWQgc2VjdXJpdHkgaW4gaU9TIDEwLiBHbyB0byB5b3VyIGFwcCBkaXJlY3RvcnkgYW5kIHNlYXJjaCBmb3IgdGhlIDx5b3VyIGFwcCBuYW1lPkluZm8ucGxpc3QgZmlsZS4gQWRkIHRoZSBmb2xsb3dpbmcgbGluZXMgaW4gdGhlIG1haW4gPGRpY3Q+IGVsZW1lbnQuXHJcbiAqIGBgYHhtbFxyXG4gKiA8a2V5Pk5TQ2FtZXJhVXNhZ2VEZXNjcmlwdGlvbjwva2V5PlxyXG4gKiA8c3RyaW5nPlRvIHNjYW4gY3JlZGl0IGNhcmRzLjwvc3RyaW5nPlxyXG4gKiBgYGBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDYXJkSU8gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NhcmQtaW8vbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYXJkSU86IENhcmRJTykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmNhcmRJTy5jYW5TY2FuKClcclxuICogICAudGhlbihcclxuICogICAgIChyZXM6IGJvb2xlYW4pID0+IHtcclxuICogICAgICAgaWYocmVzKXtcclxuICogICAgICAgICBsZXQgb3B0aW9ucyA9IHtcclxuICogICAgICAgICAgIHJlcXVpcmVFeHBpcnk6IHRydWUsXHJcbiAqICAgICAgICAgICByZXF1aXJlQ1ZWOiBmYWxzZSxcclxuICogICAgICAgICAgIHJlcXVpcmVQb3N0YWxDb2RlOiBmYWxzZVxyXG4gKiAgICAgICAgIH07XHJcbiAqICAgICAgICAgdGhpcy5jYXJkSU8uc2NhbihvcHRpb25zKTtcclxuICogICAgICAgfVxyXG4gKiAgICAgfVxyXG4gKiAgICk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBDYXJkSU9PcHRpb25zXHJcbiAqIENhcmRJT1Jlc3BvbnNlXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQ2FyZElPJyxcclxuICBwbHVnaW46ICdjYXJkLmlvLmNvcmRvdmEubW9iaWxlc2RrJyxcclxuICBwbHVnaW5SZWY6ICdDYXJkSU8nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2FyZC1pby9jYXJkLmlvLUNvcmRvdmEtUGx1Z2luJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2FyZElPIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENoZWNrIHdoZXRoZXIgY2FyZCBzY2FubmluZyBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLiAoTWF5IHZhcnkgYnlcclxuICAgKiBkZXZpY2UsIE9TIHZlcnNpb24sIG5ldHdvcmsgY29ubmVjdGl2aXR5LCBldGMuKVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNhblNjYW4oKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTY2FuIGEgY3JlZGl0IGNhcmQgd2l0aCBjYXJkLmlvLlxyXG4gICAqIEBwYXJhbSB7Q2FyZElPT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBwbHVnaW5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzY2FuKG9wdGlvbnM/OiBDYXJkSU9PcHRpb25zKTogUHJvbWlzZTxDYXJkSU9SZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmUgdGhlIHZlcnNpb24gb2YgdGhlIGNhcmQuaW8gbGlicmFyeS4gVXNlZnVsIHdoZW4gY29udGFjdGluZyBzdXBwb3J0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHZlcnNpb24oKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19