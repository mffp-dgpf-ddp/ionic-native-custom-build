var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CardIOOriginal = /** @class */ (function (_super) {
    __extends(CardIOOriginal, _super);
    function CardIOOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardIOOriginal.prototype.canScan = function () { return cordova(this, "canScan", {}, arguments); };
    CardIOOriginal.prototype.scan = function (options) { return cordova(this, "scan", {}, arguments); };
    CardIOOriginal.prototype.version = function () { return cordova(this, "version", {}, arguments); };
    CardIOOriginal.pluginName = "CardIO";
    CardIOOriginal.plugin = "card.io.cordova.mobilesdk";
    CardIOOriginal.pluginRef = "CardIO";
    CardIOOriginal.repo = "https://github.com/card-io/card.io-Cordova-Plugin";
    CardIOOriginal.platforms = ["Android", "iOS"];
    return CardIOOriginal;
}(IonicNativePlugin));
var CardIO = new CardIOOriginal();
export { CardIO };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhcmQtaW8vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0s1QywwQkFBaUI7Ozs7SUFRM0Msd0JBQU87SUFVUCxxQkFBSSxhQUFDLE9BQXVCO0lBUzVCLHdCQUFPOzs7Ozs7aUJBM01UO0VBZ0w0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcmRJT09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFNldCB0byB0cnVlIHRvIHJlcXVpcmUgZXhwaXJ5IGRhdGVcclxuICAgKi9cclxuICByZXF1aXJlRXhwaXJ5PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogIFRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgZm9yIHRoZSBjYXJkIENWVlxyXG4gICAqL1xyXG4gIHJlcXVpcmVDVlY/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdXNlciB3aWxsIGJlIHByb21wdGVkIGZvciB0aGUgY2FyZCBiaWxsaW5nIHBvc3RhbCBjb2RlLlxyXG4gICAqL1xyXG4gIHJlcXVpcmVQb3N0YWxDb2RlPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogIFJlbW92ZXMgdGhlIGtleWJvYXJkIGJ1dHRvbiBmcm9tIHRoZSBzY2FuIHNjcmVlbi5cclxuICAgKi9cclxuICBzdXBwcmVzc01hbnVhbD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBwb3N0YWwgY29kZSB3aWxsIG9ubHkgY29sbGVjdCBudW1lcmljIGlucHV0LiBTZXQgdGhpcyBpZiB5b3Uga25vdyB0aGUgZXhwZWN0ZWQgY291bnRyeSdzIHBvc3RhbCBjb2RlIGhhcyBvbmx5IG51bWVyaWMgcG9zdGFsIGNvZGVzLlxyXG4gICAqL1xyXG4gIHJlc3RyaWN0UG9zdGFsQ29kZVRvTnVtZXJpY09ubHk/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGhlbWUgZm9yIHRoZSBjYXJkLmlvIEFjdGl2aXR5J3Mgd2lsbCBiZSBzZXQgdG8gdGhlIHRoZW1lIG9mIHRoZSBhcHBsaWNhdGlvbi5cclxuICAgKi9cclxuICBrZWVwQXBwbGljYXRpb25UaGVtZT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgZm9yIHRoZSBjYXJkaG9sZGVyIG5hbWVcclxuICAgKi9cclxuICByZXF1aXJlQ2FyZGhvbGRlck5hbWU/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBVc2VkIHRvIGRpc3BsYXkgaW5zdHJ1Y3Rpb25zIHRvIHRoZSB1c2VyIHdoaWxlIHRoZXkgYXJlIHNjYW5uaW5nIHRoZWlyIGNhcmQuXHJcbiAgICovXHJcbiAgc2Nhbkluc3RydWN0aW9ucz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogIElmIHNldCwgdGhlIGNhcmQgd2lsbCBub3QgYmUgc2Nhbm5lZCB3aXRoIHRoZSBjYW1lcmEuXHJcbiAgICovXHJcbiAgbm9DYW1lcmE/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBJZiBzY2FuRXhwaXJ5IGlzIHRydWUsIGFuIGF0dGVtcHQgdG8gZXh0cmFjdCB0aGUgZXhwaXJ5IGZyb20gdGhlIGNhcmQgaW1hZ2Ugd2lsbCBiZSBtYWRlLlxyXG4gICAqL1xyXG4gIHNjYW5FeHBpcnk/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcHJlZmVycmVkIGxhbmd1YWdlIGZvciBhbGwgc3RyaW5ncyBhcHBlYXJpbmcgaW4gdGhlIHVzZXIgaW50ZXJmYWNlLiBJZiBub3Qgc2V0LCBvciBpZiBzZXQgdG8gbnVsbCwgZGVmYXVsdHMgdG8gdGhlIGRldmljZSdzIGN1cnJlbnQgbGFuZ3VhZ2Ugc2V0dGluZy5cclxuICAgKi9cclxuICBsYW5ndWFnZU9yTG9jYWxlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2VzIHRoZSBjb2xvciBvZiB0aGUgZ3VpZGUgb3ZlcmxheSBvbiB0aGUgY2FtZXJhLiBUaGUgY29sb3IgaXMgcHJvdmlkZWQgaW4gaGV4YWRlY2ltYWwgZm9ybWF0IChlLmcuIGAjRkZGRkZGYClcclxuICAgKi9cclxuICBndWlkZUNvbG9yPzogc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdXNlciB3aWxsIG5vdCBiZSBwcm9tcHRlZCB0byBjb25maXJtIHRoZWlyIGNhcmQgbnVtYmVyIGFmdGVyIHByb2Nlc3NpbmcuXHJcbiAgICovXHJcbiAgc3VwcmVzc0NvbmZpcm1hdGlvbj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkLmlvIGxvZ28gd2lsbCBub3QgYmUgc2hvd24gb3ZlcmxhaWQgb24gdGhlIGNhbWVyYS5cclxuICAgKi9cclxuICBoaWRlQ2FyZElPTG9nbz86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjYXJkLmlvIGxvZ28gd2lsbCBiZSBzaG93biBpbnN0ZWFkIG9mIHRoZSBQYXlQYWwgbG9nby5cclxuICAgKi9cclxuICB1c2VDYXJkSU9Mb2dvPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogT25jZSBhIGNhcmQgaW1hZ2UgaGFzIGJlZW4gY2FwdHVyZWQgYnV0IGJlZm9yZSBpdCBoYXMgYmVlbiBwcm9jZXNzZWQsIHRoaXMgdmFsdWUgd2lsbCBkZXRlcm1pbmUgd2hldGhlciB0byBjb250aW51ZSBwcm9jZXNzaW5nIGFzIHVzdWFsLlxyXG4gICAqL1xyXG4gIHN1cHJlc3NTY2FuPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYXJkSU9SZXNwb25zZSB7XHJcbiAgLyoqXHJcbiAgICogQ2FyZCB0eXBlXHJcbiAgICovXHJcbiAgY2FyZFR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTWFza2VkIGNhcmQgbnVtYmVyLCBzaG93aW5nIG9ubHkgbGFzdCA0IGRpZ2l0c1xyXG4gICAqL1xyXG4gIHJlZGFjdGVkQ2FyZE51bWJlcjogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBGdWxsIGNhcmQgbnVtYmVyXHJcbiAgICovXHJcbiAgY2FyZE51bWJlcjogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBFeHBpcnkgbW9udGhcclxuICAgKi9cclxuICBleHBpcnlNb250aDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBFeHBpcnkgeWVhclxyXG4gICAqL1xyXG4gIGV4cGlyeVllYXI6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ1ZWXHJcbiAgICovXHJcbiAgY3Z2OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvc3RhbCBjb2RlXHJcbiAgICovXHJcbiAgcG9zdGFsQ29kZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBDYXJkaG9sZGVyIG5hbWVcclxuICAgKi9cclxuICBjYXJkaG9sZGVyTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgQ2FyZCBJT1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQHVzYWdlXHJcbiAqIFRoaXMgcGx1Zy1pbiBleHBvc2VzIGNhcmQuaW8gY3JlZGl0IGNhcmQgc2Nhbm5pbmcuXHJcbiAqXHJcbiAqICoqTk9URSoqOiBJZiB5b3Ugd291bGQgbGlrZSB0byBhY3R1YWxseSBwcm9jZXNzIGEgY3JlZGl0IGNhcmQgY2hhcmdlLCB5b3UgbWlnaHQgYmUgaW50ZXJlc3RlZCBpbiB0aGUgW1BheVBhbCBDb3Jkb3ZhIFBsdWctaW5dKGh0dHBzOi8vZ2l0aHViLmNvbS9wYXlwYWwvUGF5UGFsLUNvcmRvdmEtUGx1Z2luKS5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjYXJkLmlvLmNvcmRvdmEubW9iaWxlc2RrYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NhcmQgSU8gcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJkLWlvL2NhcmQuaW8tQ29yZG92YS1QbHVnaW4pLlxyXG4gKlxyXG4gKiBOb3RlOiBGb3IgdXNlIHdpdGggaU9TIDEwICsgV2hlbiBidWlsZGluZyB5b3VyIGFwcCB3aXRoIHRoZSBpT1MgMTAgU0RLICssIHlvdSBoYXZlIHRvIGFkZCBzb21lIGluZm8gdG8gdGhlIGluZm8ucGxpc3QgZmlsZS4gVGhpcyBpcyBkdWUgdG8gaW5jcmVhc2VkIHNlY3VyaXR5IGluIGlPUyAxMC4gR28gdG8geW91ciBhcHAgZGlyZWN0b3J5IGFuZCBzZWFyY2ggZm9yIHRoZSA8eW91ciBhcHAgbmFtZT5JbmZvLnBsaXN0IGZpbGUuIEFkZCB0aGUgZm9sbG93aW5nIGxpbmVzIGluIHRoZSBtYWluIDxkaWN0PiBlbGVtZW50LlxyXG4gKiBgYGB4bWxcclxuICogPGtleT5OU0NhbWVyYVVzYWdlRGVzY3JpcHRpb248L2tleT5cclxuICogPHN0cmluZz5UbyBzY2FuIGNyZWRpdCBjYXJkcy48L3N0cmluZz5cclxuICogYGBgXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2FyZElPIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jYXJkLWlvL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FyZElPOiBDYXJkSU8pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5jYXJkSU8uY2FuU2NhbigpXHJcbiAqICAgLnRoZW4oXHJcbiAqICAgICAocmVzOiBib29sZWFuKSA9PiB7XHJcbiAqICAgICAgIGlmKHJlcyl7XHJcbiAqICAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAqICAgICAgICAgICByZXF1aXJlRXhwaXJ5OiB0cnVlLFxyXG4gKiAgICAgICAgICAgcmVxdWlyZUNWVjogZmFsc2UsXHJcbiAqICAgICAgICAgICByZXF1aXJlUG9zdGFsQ29kZTogZmFsc2VcclxuICogICAgICAgICB9O1xyXG4gKiAgICAgICAgIHRoaXMuY2FyZElPLnNjYW4ob3B0aW9ucyk7XHJcbiAqICAgICAgIH1cclxuICogICAgIH1cclxuICogICApO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogQ2FyZElPT3B0aW9uc1xyXG4gKiBDYXJkSU9SZXNwb25zZVxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NhcmRJTycsXHJcbiAgcGx1Z2luOiAnY2FyZC5pby5jb3Jkb3ZhLm1vYmlsZXNkaycsXHJcbiAgcGx1Z2luUmVmOiAnQ2FyZElPJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NhcmQtaW8vY2FyZC5pby1Db3Jkb3ZhLVBsdWdpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhcmRJTyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayB3aGV0aGVyIGNhcmQgc2Nhbm5pbmcgaXMgY3VycmVudGx5IGF2YWlsYWJsZS4gKE1heSB2YXJ5IGJ5XHJcbiAgICogZGV2aWNlLCBPUyB2ZXJzaW9uLCBuZXR3b3JrIGNvbm5lY3Rpdml0eSwgZXRjLilcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjYW5TY2FuKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2NhbiBhIGNyZWRpdCBjYXJkIHdpdGggY2FyZC5pby5cclxuICAgKiBAcGFyYW0ge0NhcmRJT09wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgcGx1Z2luXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2NhbihvcHRpb25zPzogQ2FyZElPT3B0aW9ucyk6IFByb21pc2U8Q2FyZElPUmVzcG9uc2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIHRoZSB2ZXJzaW9uIG9mIHRoZSBjYXJkLmlvIGxpYnJhcnkuIFVzZWZ1bCB3aGVuIGNvbnRhY3Rpbmcgc3VwcG9ydC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2ZXJzaW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==