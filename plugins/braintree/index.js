var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BraintreeOriginal = /** @class */ (function (_super) {
    __extends(BraintreeOriginal, _super);
    function BraintreeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BraintreeOriginal.prototype.initialize = function (token) { return cordova(this, "initialize", { "platforms": ["Android", "iOS"] }, arguments); };
    BraintreeOriginal.prototype.setupApplePay = function (options) { return cordova(this, "setupApplePay", { "platforms": ["iOS"] }, arguments); };
    BraintreeOriginal.prototype.presentDropInPaymentUI = function (options) { return cordova(this, "presentDropInPaymentUI", { "platforms": ["Android", "iOS"] }, arguments); };
    BraintreeOriginal.pluginName = "Braintree";
    BraintreeOriginal.plugin = "cordova-plugin-braintree";
    BraintreeOriginal.pluginRef = "BraintreePlugin";
    BraintreeOriginal.repo = "https://github.com/taracque/cordova-plugin-braintree";
    BraintreeOriginal.platforms = ["Android", "iOS"];
    BraintreeOriginal.install = "ionic cordova plugin add https://github.com/taracque/cordova-plugin-braintree";
    BraintreeOriginal.installVariables = [];
    return BraintreeOriginal;
}(IonicNativePlugin));
var Braintree = new BraintreeOriginal();
export { Braintree };
//# sourceMappingURL=data:application/json;base64,