var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var DialogsOriginal = /** @class */ (function (_super) {
    __extends(DialogsOriginal, _super);
    function DialogsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogsOriginal.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    DialogsOriginal.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    DialogsOriginal.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    DialogsOriginal.pluginName = "Dialogs";
    DialogsOriginal.plugin = "cordova-plugin-dialogs";
    DialogsOriginal.pluginRef = "navigator.notification";
    DialogsOriginal.repo = "https://github.com/apache/cordova-plugin-dialogs";
    DialogsOriginal.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    return DialogsOriginal;
}(IonicNativePlugin));
var Dialogs = new DialogsOriginal();
export { Dialogs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RpYWxvZ3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0MzQywyQkFBaUI7Ozs7SUFZNUMsdUJBQUssYUFBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFVBQW1CO0lBZTFELHlCQUFPLGFBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxZQUF1QjtJQWdCaEUsd0JBQU0sYUFDSixPQUFnQixFQUNoQixLQUFjLEVBQ2QsWUFBdUIsRUFDdkIsV0FBb0I7SUFZdEIsc0JBQUksYUFBQyxLQUFhOzs7Ozs7a0JBM0dwQjtFQWdENkIsaUJBQWlCO1NBQWpDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dzUHJvbXB0Q2FsbGJhY2sge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgcHJlc3NlZCBidXR0b24uIChOdW1iZXIpIE5vdGUgdGhhdCB0aGUgaW5kZXggdXNlcyBvbmUtYmFzZWQgaW5kZXhpbmcsIHNvIHRoZSB2YWx1ZSBpcyAxLCAyLCAzLCBldGMuXHJcbiAgICovXHJcbiAgYnV0dG9uSW5kZXg6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHRleHQgZW50ZXJlZCBpbiB0aGUgcHJvbXB0IGRpYWxvZyBib3guIChTdHJpbmcpXHJcbiAgICovXHJcbiAgaW5wdXQxOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBEaWFsb2dzXHJcbiAqIEBwcmVtaWVyIGRpYWxvZ3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGdpdmVzIHlvdSBhYmlsaXR5IHRvIGFjY2VzcyBhbmQgY3VzdG9taXplIHRoZSBkZXZpY2UgbmF0aXZlIGRpYWxvZ3MuXHJcbiAqXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGlhbG9nc2AuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEaWFsb2dzIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MpLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBEaWFsb2dzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kaWFsb2dzL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nczogRGlhbG9ncykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmRpYWxvZ3MuYWxlcnQoJ0hlbGxvIHdvcmxkJylcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnRGlhbG9nIGRpc21pc3NlZCcpKVxyXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKCdFcnJvciBkaXNwbGF5aW5nIGRpYWxvZycsIGUpKTtcclxuICpcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIERpYWxvZ3NQcm9tcHRDYWxsYmFja1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0RpYWxvZ3MnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnLFxyXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5ub3RpZmljYXRpb24nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnLFxyXG4gIHBsYXRmb3JtczogWydBbWF6b24gRmlyZSBPUycsICdBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGlhbG9ncyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTaG93cyBhIGN1c3RvbSBhbGVydCBvciBkaWFsb2cgYm94LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBBbGVydClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2J1dHRvbk5hbWVdIEJ1dHRvbiBuYW1lLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIE9LKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBibGFuayBwcm9taXNlIG9uY2UgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgYWxlcnQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogNCxcclxuICB9KVxyXG4gIGFsZXJ0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbk5hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgYSBjdXN0b21pemFibGUgY29uZmlybWF0aW9uIGRpYWxvZyBib3guXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRGlhbG9nIG1lc3NhZ2UuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIENvbmZpcm0pXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2J1dHRvbkxhYmVsc10gQXJyYXkgb2Ygc3RyaW5ncyBzcGVjaWZ5aW5nIGJ1dHRvbiBsYWJlbHMuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gW09LLENhbmNlbF0pXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUgYnV0dG9uIGluZGV4IHRoYXQgd2FzIGNsaWNrZWQsIG9yIDAgaWYgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgZGlhbG9nIGJ5IGNsaWNraW5nIG91dHNpZGUgdGhlIGRpYWxvZyBib3guIE5vdGUgdGhhdCB0aGUgaW5kZXggdXNlIG9uZS1iYXNlZCBpbmRleGluZy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDEsXHJcbiAgICBlcnJvckluZGV4OiA0LFxyXG4gIH0pXHJcbiAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyBhIG5hdGl2ZSBkaWFsb2cgYm94IHRoYXQgaXMgbW9yZSBjdXN0b21pemFibGUgdGhhbiB0aGUgYnJvd3NlcidzIHByb21wdCBmdW5jdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIERpYWxvZyBtZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBQcm9tcHQpXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gW2J1dHRvbkxhYmVsc10gIEFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBidXR0b24gbGFiZWxzLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFtcIk9LXCIsXCJDYW5jZWxcIl0pXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VGV4dF0gRGVmYXVsdCB0ZXh0IGJveCBpbnB1dCB2YWx1ZS4gIChPcHRpb25hbCwgRGVmYXVsdDogZW1wdHkgc3RyaW5nKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYW4gb2JqZWN0IHdpdGggdGhlIGJ1dHRvbiBpbmRleCBjbGlja2VkIGFuZCB0aGUgdGV4dCBlbnRlcmVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogNSxcclxuICB9KVxyXG4gIHByb21wdChcclxuICAgIG1lc3NhZ2U/OiBzdHJpbmcsXHJcbiAgICB0aXRsZT86IHN0cmluZyxcclxuICAgIGJ1dHRvbkxhYmVscz86IHN0cmluZ1tdLFxyXG4gICAgZGVmYXVsdFRleHQ/OiBzdHJpbmdcclxuICApOiBQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGRldmljZSBwbGF5cyBhIGJlZXAgc291bmQuXHJcbiAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgYmVlcCh0aW1lczogbnVtYmVyKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==