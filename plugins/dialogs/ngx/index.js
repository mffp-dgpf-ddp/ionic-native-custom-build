import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Dialogs = /** @class */ (function (_super) {
    __extends(Dialogs, _super);
    function Dialogs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dialogs.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    Dialogs.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    Dialogs.pluginName = "Dialogs";
    Dialogs.plugin = "cordova-plugin-dialogs";
    Dialogs.pluginRef = "navigator.notification";
    Dialogs.repo = "https://github.com/apache/cordova-plugin-dialogs";
    Dialogs.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    Dialogs = __decorate([
        Injectable()
    ], Dialogs);
    return Dialogs;
}(IonicNativePlugin));
export { Dialogs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RpYWxvZ3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0MzQywyQkFBaUI7Ozs7SUFZNUMsdUJBQUssYUFBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFVBQW1CO0lBZTFELHlCQUFPLGFBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxZQUF1QjtJQWdCaEUsd0JBQU0sYUFDSixPQUFnQixFQUNoQixLQUFjLEVBQ2QsWUFBdUIsRUFDdkIsV0FBb0I7SUFZdEIsc0JBQUksYUFBQyxLQUFhOzs7Ozs7SUEzRFAsT0FBTztRQURuQixVQUFVLEVBQUU7T0FDQSxPQUFPO2tCQWhEcEI7RUFnRDZCLGlCQUFpQjtTQUFqQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGlhbG9nc1Byb21wdENhbGxiYWNrIHtcclxuICAvKipcclxuICAgKiBUaGUgaW5kZXggb2YgdGhlIHByZXNzZWQgYnV0dG9uLiAoTnVtYmVyKSBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZXMgb25lLWJhc2VkIGluZGV4aW5nLCBzbyB0aGUgdmFsdWUgaXMgMSwgMiwgMywgZXRjLlxyXG4gICAqL1xyXG4gIGJ1dHRvbkluZGV4OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZXh0IGVudGVyZWQgaW4gdGhlIHByb21wdCBkaWFsb2cgYm94LiAoU3RyaW5nKVxyXG4gICAqL1xyXG4gIGlucHV0MTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgRGlhbG9nc1xyXG4gKiBAcHJlbWllciBkaWFsb2dzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBnaXZlcyB5b3UgYWJpbGl0eSB0byBhY2Nlc3MgYW5kIGN1c3RvbWl6ZSB0aGUgZGV2aWNlIG5hdGl2ZSBkaWFsb2dzLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRpYWxvZ3NgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGlhbG9ncyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGlhbG9ncy9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZ3M6IERpYWxvZ3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5kaWFsb2dzLmFsZXJ0KCdIZWxsbyB3b3JsZCcpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0RpYWxvZyBkaXNtaXNzZWQnKSlcclxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnRXJyb3IgZGlzcGxheWluZyBkaWFsb2cnLCBlKSk7XHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEaWFsb2dzUHJvbXB0Q2FsbGJhY2tcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEaWFsb2dzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJyxcclxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3Iubm90aWZpY2F0aW9uJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERpYWxvZ3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2hvd3MgYSBjdXN0b20gYWxlcnQgb3IgZGlhbG9nIGJveC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gQWxlcnQpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtidXR0b25OYW1lXSBCdXR0b24gbmFtZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBPSylcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgYmxhbmsgcHJvbWlzZSBvbmNlIHRoZSB1c2VyIGhhcyBkaXNtaXNzZWQgdGhlIGFsZXJ0LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDQsXHJcbiAgfSlcclxuICBhbGVydChtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25OYW1lPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIGEgY3VzdG9taXphYmxlIGNvbmZpcm1hdGlvbiBkaWFsb2cgYm94LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBDb25maXJtKVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdIEFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBidXR0b24gbGFiZWxzLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFtPSyxDYW5jZWxdKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bWJlcj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIGJ1dHRvbiBpbmRleCB0aGF0IHdhcyBjbGlja2VkLCBvciAwIGlmIHRoZSB1c2VyIGhhcyBkaXNtaXNzZWQgdGhlIGRpYWxvZyBieSBjbGlja2luZyBvdXRzaWRlIHRoZSBkaWFsb2cgYm94LiBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZSBvbmUtYmFzZWQgaW5kZXhpbmcuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogNCxcclxuICB9KVxyXG4gIGNvbmZpcm0obWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgYnV0dG9uTGFiZWxzPzogc3RyaW5nW10pOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgYSBuYXRpdmUgZGlhbG9nIGJveCB0aGF0IGlzIG1vcmUgY3VzdG9taXphYmxlIHRoYW4gdGhlIGJyb3dzZXIncyBwcm9tcHQgZnVuY3Rpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IFttZXNzYWdlXSBEaWFsb2cgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gUHJvbXB0KVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdICBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbXCJPS1wiLFwiQ2FuY2VsXCJdKVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGVmYXVsdFRleHRdIERlZmF1bHQgdGV4dCBib3ggaW5wdXQgdmFsdWUuICAoT3B0aW9uYWwsIERlZmF1bHQ6IGVtcHR5IHN0cmluZylcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFuIG9iamVjdCB3aXRoIHRoZSBidXR0b24gaW5kZXggY2xpY2tlZCBhbmQgdGhlIHRleHQgZW50ZXJlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMSxcclxuICAgIGVycm9ySW5kZXg6IDUsXHJcbiAgfSlcclxuICBwcm9tcHQoXHJcbiAgICBtZXNzYWdlPzogc3RyaW5nLFxyXG4gICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSxcclxuICAgIGRlZmF1bHRUZXh0Pzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXZpY2UgcGxheXMgYSBiZWVwIHNvdW5kLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyc30gdGltZXMgVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIGJlZXAuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIGJlZXAodGltZXM6IG51bWJlcik6IHZvaWQge31cclxufVxyXG4iXX0=