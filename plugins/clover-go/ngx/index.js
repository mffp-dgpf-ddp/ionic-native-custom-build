import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CloverGo = /** @class */ (function (_super) {
    __extends(CloverGo, _super);
    function CloverGo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloverGo.prototype.init = function (configuration) { return cordova(this, "init", {}, arguments); };
    CloverGo.prototype.connect = function () { return cordova(this, "connect", {}, arguments); };
    CloverGo.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    CloverGo.prototype.sale = function (saleInfo) { return cordova(this, "sale", {}, arguments); };
    CloverGo.prototype.sign = function (signInfo) { return cordova(this, "sign", {}, arguments); };
    CloverGo.prototype.voidPayment = function (paymentInfo) { return cordova(this, "voidPayment", {}, arguments); };
    CloverGo.pluginName = "CloverGo";
    CloverGo.plugin = "cordova-plugin-clovergo";
    CloverGo.pluginRef = "clovergo";
    CloverGo.repo = "https://github.com/hotwax/cordova-plugin-clovergo";
    CloverGo.install = "ionic plugin add cordova-plugin-clovergo";
    CloverGo.platforms = ["Android"];
    CloverGo = __decorate([
        Injectable()
    ], CloverGo);
    return CloverGo;
}(IonicNativePlugin));
export { CloverGo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Nsb3Zlci1nby9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFPTixNQUFNLG9CQUFvQixDQUFDOztJQXdFRSw0QkFBaUI7Ozs7SUFPN0MsdUJBQUksYUFBQyxhQUFxQjtJQVUxQiwwQkFBTztJQVVQLDZCQUFVO0lBVVYsdUJBQUksYUFBQyxRQUFnQjtJQWFyQix1QkFBSSxhQUFDLFFBQWdCO0lBVXJCLDhCQUFXLGFBQUMsV0FBbUI7Ozs7Ozs7SUE1RHBCLFFBQVE7UUFEcEIsVUFBVSxFQUFFO09BQ0EsUUFBUTttQkFoRnJCO0VBZ0Y4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBQbHVnaW4sXHJcbiAgQ29yZG92YSxcclxuICBDb3Jkb3ZhUHJvcGVydHksXHJcbiAgQ29yZG92YUluc3RhbmNlLFxyXG4gIEluc3RhbmNlUHJvcGVydHksXHJcbiAgSW9uaWNOYXRpdmVQbHVnaW4sXHJcbn0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZSB7XHJcbiAgdHlwZT86IHN0cmluZztcclxuICBtZXNzYWdlPzogc3RyaW5nO1xyXG4gIHJlYXNvbj86IHN0cmluZztcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEluaXRSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcclxuICBtZXJjaGFudE5hbWU/OiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTYWxlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XHJcbiAgcGF5bWVudElkPzogc3RyaW5nO1xyXG4gIHRyYW5zYWN0aW9uVHlwZT86IHN0cmluZztcclxuICBlbnRyeVR5cGU/OiBzdHJpbmc7XHJcbiAgY2FyZEZpcnN0Nj86IHN0cmluZztcclxuICBjYXJkTGFzdDQ/OiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBWb2lkUGF5bWVudFJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xyXG4gIHBheW1lbnRJZD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENsb3ZlciBHb1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gY29ubmVjdCB0byBDbG92ZXIgR28gcGF5bWVudCBkZXZpY2UgYW5kIHByb2Nlc3MgcGF5bWVudHMuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IENsb3ZlckdvIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jbG92ZXItZ28vbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjbG92ZXJHbzogQ2xvdmVyR28pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5jbG92ZXJHby5pbml0KGNvbmZpZ3VyYXRpb24pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmNsb3ZlckdvLmNvbm5lY3QoKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5jbG92ZXJHby5kaXNjb25uZWN0KClcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2xvdmVyR28uc2FsZShzYWxlSW5mbylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2xvdmVyR28uc2lnbihzaWduSW5mbylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2xvdmVyR28udm9pZFBheW1lbnQocGF5bWVudEluZm8pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdDbG92ZXJHbycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tY2xvdmVyZ28nLFxyXG4gIHBsdWdpblJlZjogJ2Nsb3ZlcmdvJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2hvdHdheC9jb3Jkb3ZhLXBsdWdpbi1jbG92ZXJnbycsXHJcbiAgaW5zdGFsbDogJ2lvbmljIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tY2xvdmVyZ28nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENsb3ZlckdvIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gaW5pdGlhbGlzZXMgQ2xvdmVyIEdvIFNES1xyXG4gICAqIEBwYXJhbSBjb25maWd1cmF0aW9uIHtvYmplY3R9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxJbml0UmVzcG9uc2U+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0KGNvbmZpZ3VyYXRpb246IG9iamVjdCk6IFByb21pc2U8SW5pdFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGNvbm5lY3RzIHRvIGF2YWlsYWJsZSBjbG92ZXIgZ28gZGV2aWNlXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFJlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY29ubmVjdCgpOiBQcm9taXNlPFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGRpc2Nvbm5lY3RzIHRvIGF2YWlsYWJsZSBjbG92ZXIgZ28gZGV2aWNlXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFJlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGlzY29ubmVjdCgpOiBQcm9taXNlPFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXRpYXRlIHNhbGUgZm9yIENsb3ZlciBHbyBkZXZpY2VcclxuICAgKiBAcGFyYW0gc2FsZUluZm8ge29iamVjdH1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFNhbGVSZXNwb25zZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNhbGUoc2FsZUluZm86IG9iamVjdCk6IFByb21pc2U8U2FsZVJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHBhc3Mgc2lnbmF0dXJlIGFzIHR3b1xyXG4gICAqIGRpbWVuc2lvbmFsIG51bWJlciBhcnJheSB0aGF0IHJlcHJlc2VudHMgcG9pbnRzXHJcbiAgICogb2Ygc2lnbmF0dXJlIG9uIHNjcmVlbi5cclxuICAgKiBUaGUgbGlzdCBpcyBwYXNzZWQgYXMgc2lnbmF0dXJlIGluIFNpZ25JbmZvIG9iamVjdC5cclxuICAgKiBAcGFyYW0gc2lnbkluZm8ge29iamVjdH1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFNhbGVSZXNwb25zZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNpZ24oc2lnbkluZm86IG9iamVjdCk6IFByb21pc2U8U2FsZVJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHZvaWQgYW55IHBheW1lbnQgZG9uZSB0aHJvdWdoIHRoZSBkZXZpY2VcclxuICAgKiBAcGFyYW0gc2FsZUluZm8ge29iamVjdH1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFZvaWRQYXltZW50UmVzcG9uc2U+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2b2lkUGF5bWVudChwYXltZW50SW5mbzogb2JqZWN0KTogUHJvbWlzZTxWb2lkUGF5bWVudFJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==