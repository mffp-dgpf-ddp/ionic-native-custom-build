var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CloverGoOriginal = /** @class */ (function (_super) {
    __extends(CloverGoOriginal, _super);
    function CloverGoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CloverGoOriginal.prototype.init = function (configuration) { return cordova(this, "init", {}, arguments); };
    CloverGoOriginal.prototype.connect = function () { return cordova(this, "connect", {}, arguments); };
    CloverGoOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    CloverGoOriginal.prototype.sale = function (saleInfo) { return cordova(this, "sale", {}, arguments); };
    CloverGoOriginal.prototype.sign = function (signInfo) { return cordova(this, "sign", {}, arguments); };
    CloverGoOriginal.prototype.voidPayment = function (paymentInfo) { return cordova(this, "voidPayment", {}, arguments); };
    CloverGoOriginal.pluginName = "CloverGo";
    CloverGoOriginal.plugin = "cordova-plugin-clovergo";
    CloverGoOriginal.pluginRef = "clovergo";
    CloverGoOriginal.repo = "https://github.com/hotwax/cordova-plugin-clovergo";
    CloverGoOriginal.install = "ionic plugin add cordova-plugin-clovergo";
    CloverGoOriginal.platforms = ["Android"];
    return CloverGoOriginal;
}(IonicNativePlugin));
var CloverGo = new CloverGoOriginal();
export { CloverGo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Nsb3Zlci1nby9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFPTixNQUFNLG9CQUFvQixDQUFDOztJQXdFRSw0QkFBaUI7Ozs7SUFPN0MsdUJBQUksYUFBQyxhQUFxQjtJQVUxQiwwQkFBTztJQVVQLDZCQUFVO0lBVVYsdUJBQUksYUFBQyxRQUFnQjtJQWFyQix1QkFBSSxhQUFDLFFBQWdCO0lBVXJCLDhCQUFXLGFBQUMsV0FBbUI7Ozs7Ozs7bUJBNUlqQztFQWdGOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgUGx1Z2luLFxyXG4gIENvcmRvdmEsXHJcbiAgQ29yZG92YVByb3BlcnR5LFxyXG4gIENvcmRvdmFJbnN0YW5jZSxcclxuICBJbnN0YW5jZVByb3BlcnR5LFxyXG4gIElvbmljTmF0aXZlUGx1Z2luLFxyXG59IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2Uge1xyXG4gIHR5cGU/OiBzdHJpbmc7XHJcbiAgbWVzc2FnZT86IHN0cmluZztcclxuICByZWFzb24/OiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBJbml0UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XHJcbiAgbWVyY2hhbnROYW1lPzogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU2FsZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xyXG4gIHBheW1lbnRJZD86IHN0cmluZztcclxuICB0cmFuc2FjdGlvblR5cGU/OiBzdHJpbmc7XHJcbiAgZW50cnlUeXBlPzogc3RyaW5nO1xyXG4gIGNhcmRGaXJzdDY/OiBzdHJpbmc7XHJcbiAgY2FyZExhc3Q0Pzogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVm9pZFBheW1lbnRSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlIHtcclxuICBwYXltZW50SWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBDbG92ZXIgR29cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGNvbm5lY3QgdG8gQ2xvdmVyIEdvIHBheW1lbnQgZGV2aWNlIGFuZCBwcm9jZXNzIHBheW1lbnRzLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDbG92ZXJHbyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2xvdmVyLWdvL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY2xvdmVyR286IENsb3ZlckdvKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuY2xvdmVyR28uaW5pdChjb25maWd1cmF0aW9uKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5jbG92ZXJHby5jb25uZWN0KClcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuY2xvdmVyR28uZGlzY29ubmVjdCgpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmNsb3ZlckdvLnNhbGUoc2FsZUluZm8pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmNsb3ZlckdvLnNpZ24oc2lnbkluZm8pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLmNsb3ZlckdvLnZvaWRQYXltZW50KHBheW1lbnRJbmZvKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQ2xvdmVyR28nLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNsb3ZlcmdvJyxcclxuICBwbHVnaW5SZWY6ICdjbG92ZXJnbycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ob3R3YXgvY29yZG92YS1wbHVnaW4tY2xvdmVyZ28nLFxyXG4gIGluc3RhbGw6ICdpb25pYyBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWNsb3ZlcmdvJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDbG92ZXJHbyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpc2VzIENsb3ZlciBHbyBTREtcclxuICAgKiBAcGFyYW0gY29uZmlndXJhdGlvbiB7b2JqZWN0fVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SW5pdFJlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdChjb25maWd1cmF0aW9uOiBvYmplY3QpOiBQcm9taXNlPEluaXRSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBjb25uZWN0cyB0byBhdmFpbGFibGUgY2xvdmVyIGdvIGRldmljZVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxSZXNwb25zZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNvbm5lY3QoKTogUHJvbWlzZTxSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBkaXNjb25uZWN0cyB0byBhdmFpbGFibGUgY2xvdmVyIGdvIGRldmljZVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxSZXNwb25zZT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0aWF0ZSBzYWxlIGZvciBDbG92ZXIgR28gZGV2aWNlXHJcbiAgICogQHBhcmFtIHNhbGVJbmZvIHtvYmplY3R9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxTYWxlUmVzcG9uc2U+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzYWxlKHNhbGVJbmZvOiBvYmplY3QpOiBQcm9taXNlPFNhbGVSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBwYXNzIHNpZ25hdHVyZSBhcyB0d29cclxuICAgKiBkaW1lbnNpb25hbCBudW1iZXIgYXJyYXkgdGhhdCByZXByZXNlbnRzIHBvaW50c1xyXG4gICAqIG9mIHNpZ25hdHVyZSBvbiBzY3JlZW4uXHJcbiAgICogVGhlIGxpc3QgaXMgcGFzc2VkIGFzIHNpZ25hdHVyZSBpbiBTaWduSW5mbyBvYmplY3QuXHJcbiAgICogQHBhcmFtIHNpZ25JbmZvIHtvYmplY3R9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxTYWxlUmVzcG9uc2U+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaWduKHNpZ25JbmZvOiBvYmplY3QpOiBQcm9taXNlPFNhbGVSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiB2b2lkIGFueSBwYXltZW50IGRvbmUgdGhyb3VnaCB0aGUgZGV2aWNlXHJcbiAgICogQHBhcmFtIHNhbGVJbmZvIHtvYmplY3R9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxWb2lkUGF5bWVudFJlc3BvbnNlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdm9pZFBheW1lbnQocGF5bWVudEluZm86IG9iamVjdCk6IFByb21pc2U8Vm9pZFBheW1lbnRSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=