var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BluetoothSerialOriginal = /** @class */ (function (_super) {
    __extends(BluetoothSerialOriginal, _super);
    function BluetoothSerialOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BluetoothSerialOriginal.prototype.connect = function (macAddress_or_uuid) { return cordova(this, "connect", { "platforms": ["Android", "iOS", "Windows Phone"], "observable": true, "clearFunction": "disconnect" }, arguments); };
    BluetoothSerialOriginal.prototype.connectInsecure = function (macAddress) { return cordova(this, "connectInsecure", { "platforms": ["Android"], "observable": true, "clearFunction": "disconnect" }, arguments); };
    BluetoothSerialOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    BluetoothSerialOriginal.prototype.write = function (data) { return cordova(this, "write", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.available = function () { return cordova(this, "available", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.read = function () { return cordova(this, "read", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.readUntil = function (delimiter) { return cordova(this, "readUntil", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.subscribe = function (delimiter) { return cordova(this, "subscribe", { "platforms": ["Android", "iOS", "Windows Phone"], "observable": true, "clearFunction": "unsubscribe" }, arguments); };
    BluetoothSerialOriginal.prototype.subscribeRawData = function () { return cordova(this, "subscribeRawData", { "platforms": ["Android", "iOS", "Windows Phone"], "observable": true, "clearFunction": "unsubscribeRawData" }, arguments); };
    BluetoothSerialOriginal.prototype.clear = function () { return cordova(this, "clear", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.list = function () { return cordova(this, "list", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.readRSSI = function () { return cordova(this, "readRSSI", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.showBluetoothSettings = function () { return cordova(this, "showBluetoothSettings", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.enable = function () { return cordova(this, "enable", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.discoverUnpaired = function () { return cordova(this, "discoverUnpaired", { "platforms": ["Android", "iOS", "Windows Phone"] }, arguments); };
    BluetoothSerialOriginal.prototype.setDeviceDiscoveredListener = function () { return cordova(this, "setDeviceDiscoveredListener", { "platforms": ["Android", "iOS", "Windows Phone"], "observable": true, "clearFunction": "clearDeviceDiscoveredListener" }, arguments); };
    BluetoothSerialOriginal.prototype.setName = function (newName) { return cordova(this, "setName", { "platforms": ["Android"], "sync": true }, arguments); };
    BluetoothSerialOriginal.prototype.setDiscoverable = function (discoverableDuration) { return cordova(this, "setDiscoverable", { "platforms": ["Android"], "sync": true }, arguments); };
    BluetoothSerialOriginal.pluginName = "BluetoothSerial";
    BluetoothSerialOriginal.repo = "https://github.com/don/BluetoothSerial";
    BluetoothSerialOriginal.plugin = "cordova-plugin-bluetooth-serial";
    BluetoothSerialOriginal.pluginRef = "bluetoothSerial";
    BluetoothSerialOriginal.platforms = ["Android", "iOS", "Windows Phone 8"];
    return BluetoothSerialOriginal;
}(IonicNativePlugin));
var BluetoothSerial = new BluetoothSerialOriginal();
export { BluetoothSerial };
//# sourceMappingURL=data:application/json;base64,