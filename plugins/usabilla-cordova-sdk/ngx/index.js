import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Usabilla = /** @class */ (function (_super) {
    __extends(Usabilla, _super);
    function Usabilla() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Usabilla.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    Usabilla.pluginName = "usabilla-cordova";
    Usabilla.plugin = "usabilla-cordova";
    Usabilla.pluginRef = "Usabilla";
    Usabilla.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    Usabilla.platforms = ["Android", "iOS"];
    Usabilla = __decorate([
        Injectable()
    ], Usabilla);
    return Usabilla;
}(IonicNativePlugin));
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3VzYWJpbGxhLWNvcmRvdmEtc2RrL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEMUMsNEJBQWlCOzs7O0lBWTdDLDZCQUFVLGFBQUMsS0FBYSxFQUFFLFVBQWU7SUFjekMsbUNBQWdCLGFBQUMsTUFBYztJQWMvQiw0REFBeUMsYUFBQyxNQUFjO0lBY3hELDRCQUFTLGFBQUMsT0FBZTtJQWN6QixvQ0FBaUI7SUFjakIsMEJBQU87SUFhUCxzQ0FBbUI7SUFlbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7OztJQTlHckMsUUFBUTtRQURwQixVQUFVLEVBQUU7T0FDQSxRQUFRO21CQTNEckI7RUEyRDhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNhYmlsbGFSZXN1bHQge1xyXG4gIGNvbXBsZXRlZDogYm9vbGVhbiB8IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVYkNhbXBhaWduUmVzdWx0IHtcclxuICBjb21wbGV0ZWQ6IHtcclxuICAgIHJlc3VsdDogVWJSZXN1bHQ7XHJcbiAgICBpc1JlZGlyZWN0VG9BcHBTdG9yZUVuYWJsZWQ/OiBib29sZWFuO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVWJSZXN1bHQge1xyXG4gIHJhdGluZzogbnVtYmVyO1xyXG4gIGFiYW5kb25lZFBhZ2VJbmRleDogbnVtYmVyO1xyXG4gIHNlbnQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBVc2FiaWxsYVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVXNhYmlsbGEgU0RLIGlzIGRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgdG8gY29sbGVjdCBmZWVkYmFjayBmcm9tIHlvdXIgdXNlcnMgd2l0aCBncmVhdCBlYXNlIGFuZCBmbGV4aWJpbGl0eSB0aHJvdWdoIHlvdXIgbW9iaWxlIGFwcGxpY2F0aW9uLlxyXG4gKiBUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBsaWJyYXJ5IGludGVncmF0aW9uIHN0ZXBzIGZvciB5b3VyIENvcmRvdmEgcHJvamVjdC5cclxuICpcclxuICogRm9yIG1vcmUgaW5mbyBzZWUgW0NvcmRvdmEgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YSlcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgVXNhYmlsbGEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3VzYWJpbGxhLWNvcmRvdmEtc2RrL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNhYmlsbGE6IFVzYWJpbGxhKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqICB0aGlzLnVzYWJpbGxhLmluaXRpYWxpemUoXHJcbiAqICAgIGFwcElEOiAnPHlvdXJfYXBwbGljYXRpb25faWQ+JyxcclxuICogICAgY3VzdG9tX3ZhcnM6IHtcclxuICogICAgICBcImtleVwiOiBcInZhbHVlXCJcclxuICogICAgfSk7XHJcbiAqXHJcbiAqICB0aGlzLnVzYWJpbGxhLmxvYWRGZWVkYmFja0Zvcm0oXHJcbiAqICAgIGZvcm1JRCA6ICc8eW91cl9mb3JtX2lkPidcclxuICogICAgKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ3VzYWJpbGxhLWNvcmRvdmEnLFxyXG4gIHBsdWdpbjogJ3VzYWJpbGxhLWNvcmRvdmEnLFxyXG4gIHBsdWdpblJlZjogJ1VzYWJpbGxhJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3VzYWJpbGxhL3VzYWJpbGxhLXU0YS1jb3Jkb3ZhJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXNhYmlsbGEgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZXMgVXNhYmlsbGEgc2RrIGZvciBjYXB0dXJpbmcgZmVlZGJhY2tzLlxyXG4gICAqXHJcbiAgICogQG5hbWUgaW5pdGlhbGl6ZVxyXG4gICAqIEBwYXJhbSB7YXBwSWR9IEFQUF9JRCB1bmlxdWUgYXBwIGlkIHRvIGluaXRpYWxpemVcclxuICAgKiBAcGFyYW0ge2N1c3RvbVZhcnN9IENVU1RPTV9WQVJJQUJMRVMgZm9yIHRhcmdldCBiYXNlZCBldmVudCB0cmlnZ2VyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGluaXRpYWxpemUoYXBwSWQ6IHN0cmluZywgY3VzdG9tVmFyczogYW55KTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgRmVlZGJhY2sgZm9ybSBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCBhZnRlciBzZGsgaW5pdGlhbGl6YXRpb24uXHJcbiAgICpcclxuICAgKiBAbmFtZSBsb2FkRmVlZGJhY2tGb3JtXHJcbiAgICogQHBhcmFtIHtmb3JtSWR9IEZPUk1fSUQgdG8gZGlzcGxheSBGZWVkYmFjayBmb3JtIGZvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBsb2FkRmVlZGJhY2tGb3JtKGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gd2l0aCBjdXJyZW50IHNjcmVlbidzIHNuYXBzaG90IGFuZCBiYXNlZCBvbiB1bmlxdWUgZm9ybSBpZCwgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxyXG4gICAqXHJcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVdpdGhDdXJyZW50Vmlld1NjcmVlbnNob3RcclxuICAgKiBAcGFyYW0ge2Zvcm1JZH0gRk9STV9JRCB0byBkaXNwbGF5IEZlZWRiYWNrIGZvcm0gZm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90KGZvcm1JZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIENhbXBhaWduIGJhbm5lciB0YXJnZXR0ZWQgYmFzZWQgb24gc3BlY2lmaWMgZXZlbnQgYW5kIHZhcmlhYmxlcywgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxyXG4gICAqXHJcbiAgICogQG5hbWUgc2VuZEV2ZW50XHJcbiAgICogQHBhcmFtIHtldmVudElkfSBFVkVOVF9JRCB0byBkaXNwbGF5IENhbXBhaWduIGJhbm5lciBmb3JcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgc2VuZEV2ZW50KGV2ZW50SWQ6IHN0cmluZyk6IFByb21pc2U8VWJDYW1wYWlnblJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgQ2FtcGFpZ24gZm9yIG5leHQgdHJpZ2dlci5cclxuICAgKlxyXG4gICAqIEBuYW1lIHJlc2V0Q2FtcGFpZ25EYXRhXHJcbiAgICpcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgcmVzZXRDYW1wYWlnbkRhdGEoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzbWlzcyBvciByZW1vdmVzIHRoZSBGb3JtL0Jhbm5lciBmcm9tIHRoZSB2aWV3LlxyXG4gICAqXHJcbiAgICogQG5hbWUgZGlzbWlzc1xyXG4gICAqXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGRpc21pc3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGRlZmF1bHQgbWFza2luZyBzdHJhdGVneSB0byBiZSBhcHBsaWVkIGZvciBkYXRhIG1hc2tpbmcuXHJcbiAgICogQG5hbWUgZ2V0RGVmYXVsdERhdGFNYXNrc1xyXG4gICAqXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIGdldERlZmF1bHREYXRhTWFza3MoKTogUHJvbWlzZTxVc2FiaWxsYVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG1hc2tpbmcgc3RyYXRlZ3kgZm9yIGRhdGEgbWFza2luZy5cclxuICAgKlxyXG4gICAqIEBuYW1lIHNldERhdGFNYXNraW5nXHJcbiAgICogQHBhcmFtIHttYXNrc30gRm9ybWF0IHJlZ2V4IHRvIGJlIGFwcGxpZWQgZm9yIG1hc2tpbmcuXHJcbiAgICogQHBhcmFtIHttYXNrQ2hhcmFjdGVyfSBDaGFyYWN0ZXIgdG8gYmUgdXNlZCBhcyBhIG1hc2tpbmcgY2hhcmFjdGVyXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHNldERhdGFNYXNraW5nKG1hc2tzOiBhbnksIG1hc2tDaGFyYWN0ZXI6IHN0cmluZyk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19