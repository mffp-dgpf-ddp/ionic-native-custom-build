var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var UsabillaOriginal = /** @class */ (function (_super) {
    __extends(UsabillaOriginal, _super);
    function UsabillaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UsabillaOriginal.prototype.initialize = function (appId, customVars) { return cordova(this, "initialize", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackForm = function (formId) { return cordova(this, "loadFeedbackForm", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.loadFeedbackFormWithCurrentViewScreenshot = function (formId) { return cordova(this, "loadFeedbackFormWithCurrentViewScreenshot", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.sendEvent = function (eventId) { return cordova(this, "sendEvent", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.resetCampaignData = function () { return cordova(this, "resetCampaignData", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.dismiss = function () { return cordova(this, "dismiss", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.getDefaultDataMasks = function () { return cordova(this, "getDefaultDataMasks", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.prototype.setDataMasking = function (masks, maskCharacter) { return cordova(this, "setDataMasking", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    UsabillaOriginal.pluginName = "usabilla-cordova";
    UsabillaOriginal.plugin = "usabilla-cordova";
    UsabillaOriginal.pluginRef = "Usabilla";
    UsabillaOriginal.repo = "https://github.com/usabilla/usabilla-u4a-cordova";
    UsabillaOriginal.platforms = ["Android", "iOS"];
    return UsabillaOriginal;
}(IonicNativePlugin));
var Usabilla = new UsabillaOriginal();
export { Usabilla };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3VzYWJpbGxhLWNvcmRvdmEtc2RrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEMUMsNEJBQWlCOzs7O0lBWTdDLDZCQUFVLGFBQUMsS0FBYSxFQUFFLFVBQWU7SUFjekMsbUNBQWdCLGFBQUMsTUFBYztJQWMvQiw0REFBeUMsYUFBQyxNQUFjO0lBY3hELDRCQUFTLGFBQUMsT0FBZTtJQWN6QixvQ0FBaUI7SUFjakIsMEJBQU87SUFhUCxzQ0FBbUI7SUFlbkIsaUNBQWMsYUFBQyxLQUFVLEVBQUUsYUFBcUI7Ozs7OzttQkF6S2xEO0VBMkQ4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzYWJpbGxhUmVzdWx0IHtcclxuICBjb21wbGV0ZWQ6IGJvb2xlYW4gfCBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVWJDYW1wYWlnblJlc3VsdCB7XHJcbiAgY29tcGxldGVkOiB7XHJcbiAgICByZXN1bHQ6IFViUmVzdWx0O1xyXG4gICAgaXNSZWRpcmVjdFRvQXBwU3RvcmVFbmFibGVkPzogYm9vbGVhbjtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFViUmVzdWx0IHtcclxuICByYXRpbmc6IG51bWJlcjtcclxuICBhYmFuZG9uZWRQYWdlSW5kZXg6IG51bWJlcjtcclxuICBzZW50OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgVXNhYmlsbGFcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFVzYWJpbGxhIFNESyBpcyBkZXNpZ25lZCBhbmQgZGV2ZWxvcGVkIHRvIGNvbGxlY3QgZmVlZGJhY2sgZnJvbSB5b3VyIHVzZXJzIHdpdGggZ3JlYXQgZWFzZSBhbmQgZmxleGliaWxpdHkgdGhyb3VnaCB5b3VyIG1vYmlsZSBhcHBsaWNhdGlvbi5cclxuICogVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgbGlicmFyeSBpbnRlZ3JhdGlvbiBzdGVwcyBmb3IgeW91ciBDb3Jkb3ZhIHByb2plY3QuXHJcbiAqXHJcbiAqIEZvciBtb3JlIGluZm8gc2VlIFtDb3Jkb3ZhIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vdXNhYmlsbGEvdXNhYmlsbGEtdTRhLWNvcmRvdmEpXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFVzYWJpbGxhIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS91c2FiaWxsYS1jb3Jkb3ZhLXNkay9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzYWJpbGxhOiBVc2FiaWxsYSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiAgdGhpcy51c2FiaWxsYS5pbml0aWFsaXplKFxyXG4gKiAgICBhcHBJRDogJzx5b3VyX2FwcGxpY2F0aW9uX2lkPicsXHJcbiAqICAgIGN1c3RvbV92YXJzOiB7XHJcbiAqICAgICAgXCJrZXlcIjogXCJ2YWx1ZVwiXHJcbiAqICAgIH0pO1xyXG4gKlxyXG4gKiAgdGhpcy51c2FiaWxsYS5sb2FkRmVlZGJhY2tGb3JtKFxyXG4gKiAgICBmb3JtSUQgOiAnPHlvdXJfZm9ybV9pZD4nXHJcbiAqICAgICk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcclxuICBwbHVnaW46ICd1c2FiaWxsYS1jb3Jkb3ZhJyxcclxuICBwbHVnaW5SZWY6ICdVc2FiaWxsYScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS91c2FiaWxsYS91c2FiaWxsYS11NGEtY29yZG92YScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFVzYWJpbGxhIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemVzIFVzYWJpbGxhIHNkayBmb3IgY2FwdHVyaW5nIGZlZWRiYWNrcy5cclxuICAgKlxyXG4gICAqIEBuYW1lIGluaXRpYWxpemVcclxuICAgKiBAcGFyYW0ge2FwcElkfSBBUFBfSUQgdW5pcXVlIGFwcCBpZCB0byBpbml0aWFsaXplXHJcbiAgICogQHBhcmFtIHtjdXN0b21WYXJzfSBDVVNUT01fVkFSSUFCTEVTIGZvciB0YXJnZXQgYmFzZWQgZXZlbnQgdHJpZ2dlclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBpbml0aWFsaXplKGFwcElkOiBzdHJpbmcsIGN1c3RvbVZhcnM6IGFueSk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc3BsYXlzIEZlZWRiYWNrIGZvcm0gYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQgYWZ0ZXIgc2RrIGluaXRpYWxpemF0aW9uLlxyXG4gICAqXHJcbiAgICogQG5hbWUgbG9hZEZlZWRiYWNrRm9ybVxyXG4gICAqIEBwYXJhbSB7Zm9ybUlkfSBGT1JNX0lEIHRvIGRpc3BsYXkgRmVlZGJhY2sgZm9ybSBmb3JcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgbG9hZEZlZWRiYWNrRm9ybShmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyBGZWVkYmFjayBmb3JtIHdpdGggY3VycmVudCBzY3JlZW4ncyBzbmFwc2hvdCBhbmQgYmFzZWQgb24gdW5pcXVlIGZvcm0gaWQsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cclxuICAgKlxyXG4gICAqIEBuYW1lIGxvYWRGZWVkYmFja0Zvcm1XaXRoQ3VycmVudFZpZXdTY3JlZW5zaG90XHJcbiAgICogQHBhcmFtIHtmb3JtSWR9IEZPUk1fSUQgdG8gZGlzcGxheSBGZWVkYmFjayBmb3JtIGZvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBsb2FkRmVlZGJhY2tGb3JtV2l0aEN1cnJlbnRWaWV3U2NyZWVuc2hvdChmb3JtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyBDYW1wYWlnbiBiYW5uZXIgdGFyZ2V0dGVkIGJhc2VkIG9uIHNwZWNpZmljIGV2ZW50IGFuZCB2YXJpYWJsZXMsIGFmdGVyIHNkayBpbml0aWFsaXphdGlvbi5cclxuICAgKlxyXG4gICAqIEBuYW1lIHNlbmRFdmVudFxyXG4gICAqIEBwYXJhbSB7ZXZlbnRJZH0gRVZFTlRfSUQgdG8gZGlzcGxheSBDYW1wYWlnbiBiYW5uZXIgZm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHNlbmRFdmVudChldmVudElkOiBzdHJpbmcpOiBQcm9taXNlPFViQ2FtcGFpZ25SZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IENhbXBhaWduIGZvciBuZXh0IHRyaWdnZXIuXHJcbiAgICpcclxuICAgKiBAbmFtZSByZXNldENhbXBhaWduRGF0YVxyXG4gICAqXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHJlc2V0Q2FtcGFpZ25EYXRhKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc21pc3Mgb3IgcmVtb3ZlcyB0aGUgRm9ybS9CYW5uZXIgZnJvbSB0aGUgdmlldy5cclxuICAgKlxyXG4gICAqIEBuYW1lIGRpc21pc3NcclxuICAgKlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBkaXNtaXNzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBkZWZhdWx0IG1hc2tpbmcgc3RyYXRlZ3kgdG8gYmUgYXBwbGllZCBmb3IgZGF0YSBtYXNraW5nLlxyXG4gICAqIEBuYW1lIGdldERlZmF1bHREYXRhTWFza3NcclxuICAgKlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBnZXREZWZhdWx0RGF0YU1hc2tzKCk6IFByb21pc2U8VXNhYmlsbGFSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBtYXNraW5nIHN0cmF0ZWd5IGZvciBkYXRhIG1hc2tpbmcuXHJcbiAgICpcclxuICAgKiBAbmFtZSBzZXREYXRhTWFza2luZ1xyXG4gICAqIEBwYXJhbSB7bWFza3N9IEZvcm1hdCByZWdleCB0byBiZSBhcHBsaWVkIGZvciBtYXNraW5nLlxyXG4gICAqIEBwYXJhbSB7bWFza0NoYXJhY3Rlcn0gQ2hhcmFjdGVyIHRvIGJlIHVzZWQgYXMgYSBtYXNraW5nIGNoYXJhY3RlclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMCxcclxuICAgIGVycm9ySW5kZXg6IDEsXHJcbiAgfSlcclxuICBzZXREYXRhTWFza2luZyhtYXNrczogYW55LCBtYXNrQ2hhcmFjdGVyOiBzdHJpbmcpOiBQcm9taXNlPFVzYWJpbGxhUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==