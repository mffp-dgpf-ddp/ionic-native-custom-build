import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WheelSelector = /** @class */ (function (_super) {
    __extends(WheelSelector, _super);
    function WheelSelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WheelSelector.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    WheelSelector.prototype.hideSelector = function () { return cordova(this, "hideSelector", { "platforms": ["iOS"] }, arguments); };
    WheelSelector.pluginName = "WheelSelector";
    WheelSelector.plugin = "cordova-wheel-selector-plugin";
    WheelSelector.pluginRef = "SelectorCordovaPlugin";
    WheelSelector.repo = "https://github.com/jasonmamy/cordova-wheel-selector-plugin";
    WheelSelector.platforms = ["Android", "iOS"];
    WheelSelector = __decorate([
        Injectable()
    ], WheelSelector);
    return WheelSelector;
}(IonicNativePlugin));
export { WheelSelector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3doZWVsLXNlbGVjdG9yL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXFMckMsaUNBQWlCOzs7O0lBT2xELDRCQUFJLGFBQUMsT0FBNkI7SUFXbEMsb0NBQVk7Ozs7OztJQWxCRCxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWE7d0JBdEwxQjtFQXNMbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGVlbFNlbGVjdG9ySXRlbSB7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVmYXVsdEl0ZW0ge1xyXG4gIGluZGV4OiBudW1iZXI7XHJcbiAgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGVlbFNlbGVjdG9yT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpdGxlIG9mIHRoZSBzZWxlY3RvcidzIGlucHV0IGJveFxyXG4gICAqL1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBpdGVtcyB0byBkaXNwbGF5IChhcnJheSBvZiBpdGVtcykuXHJcbiAgICovXHJcbiAgaXRlbXM6IFdoZWVsU2VsZWN0b3JJdGVtW11bXTtcclxuXHJcbiAgLyoqXHJcbiAgICogV2hpY2ggaXRlbXMgdG8gZGlzcGxheSBieSBkZWZhdWx0LlxyXG4gICAqL1xyXG4gIGRlZmF1bHRJdGVtcz86IERlZmF1bHRJdGVtW107XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSAnb2snIGJ1dHRvbiB0ZXh0XHJcbiAgICogRGVmYXVsdDogRG9uZVxyXG4gICAqL1xyXG4gIHBvc2l0aXZlQnV0dG9uVGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlICdjYW5jZWwnIGJ1dHRvbiB0ZXh0XHJcbiAgICogRGVmYXVsdDogQ2FuY2VsXHJcbiAgICovXHJcbiAgbmVnYXRpdmVCdXR0b25UZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBbmRyb2lkIG9ubHkgLSB0aGVtZSBjb2xvciwgJ2xpZ2h0JyBvciAnZGFyaycuXHJcbiAgICogRGVmYXVsdDogbGlnaHRcclxuICAgKi9cclxuICB0aGVtZT86ICdsaWdodCcgfCAnZGFyayc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdG8gaGF2ZSB0aGUgd2hlZWxzICd3cmFwJyAoQW5kcm9pZCBvbmx5KVxyXG4gICAqIERlZmF1bHQ6IGZhbHNlXHJcbiAgICovXHJcbiAgd3JhcFdoZWVsVGV4dD86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBqc29uIGtleSB0byBkaXNwbGF5LCBieSBkZWZhdWx0IGl0IGlzIGRlc2NyaXB0aW9uLCB0aGlzIGFsbG93cyBmb3Igc2V0dGluZyBhbnlcclxuICAgKiBrZXkvdmFsdWUgdG8gYmUgZGlzcGxheWVkXHJcbiAgICogRGVmYXVsdDogZGVzY3JpcHRpb25cclxuICAgKi9cclxuICBkaXNwbGF5S2V5Pzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdoZWVsU2VsZWN0b3JEYXRhIHtcclxuICBkYXRhOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYmV0YVxyXG4gKiBAbmFtZSBXaGVlbFNlbGVjdG9yIFBsdWdpblxyXG4gKiBAZGVzY3JpcHRpb24gTmF0aXZlIHdoZWVsIHNlbGVjdG9yIGZvciBDb3Jkb3ZhIChBbmRyb2lkL2lPUykuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGBcclxuICogaW1wb3J0IHsgV2hlZWxTZWxlY3RvciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvd2hlZWwtc2VsZWN0b3Ivbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzZWxlY3RvcjogV2hlZWxTZWxlY3RvcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBjb25zdCBqc29uRGF0YSA9IHtcclxuICogICBudW1iZXJzOiBbXHJcbiAqICAgIHsgZGVzY3JpcHRpb246IFwiMVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIjJcIiB9LFxyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCIzXCIgfVxyXG4gKiAgIF0sXHJcbiAqICAgZnJ1aXRzOiBbXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIkFwcGxlXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiQmFuYW5hXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiVGFuZ2VyaW5lXCIgfVxyXG4gKiAgIF0sXHJcbiAqICAgZmlyc3ROYW1lczogW1xyXG4gKiAgICAgeyBuYW1lOiBcIkZyZWRcIiwgaWQ6ICcxJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkphbmVcIiwgaWQ6ICcyJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkJvYlwiLCBpZDogJzMnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRWFybFwiLCBpZDogJzQnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRXVuaWNlXCIsIGlkOiAnNScgfVxyXG4gKiAgIF0sXHJcbiAqICAgbGFzdE5hbWVzOiBbXHJcbiAqICAgICB7IG5hbWU6IFwiSm9obnNvblwiLCBpZDogJzEwMCcgfSxcclxuICogICAgIHsgbmFtZTogXCJEb2VcIiwgaWQ6ICcxMDEnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiS2luaXNoaXdhXCIsIGlkOiAnMTAyJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkdvcmRvblwiLCBpZDogJzEwMycgfSxcclxuICogICAgIHsgbmFtZTogXCJTbWl0aFwiLCBpZDogJzEwNCcgfVxyXG4gKiAgIF1cclxuICogfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gYmFzaWMgbnVtYmVyIHNlbGVjdGlvbiwgaW5kZXggaXMgYWx3YXlzIHJldHVybmVkIGluIHRoZSByZXN1bHRcclxuICogIHNlbGVjdEFOdW1iZXIoKSB7XHJcbiAqICAgIHRoaXMuc2VsZWN0b3Iuc2hvdyh7XHJcbiAqICAgICAgdGl0bGU6IFwiSG93IE1hbnk/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEubnVtYmVyc1xyXG4gKiAgICAgIF0sXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5kZXNjcmlwdGlvbiArICcgYXQgaW5kZXg6ICcgKyByZXN1bHRbMF0uaW5kZXgpO1xyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyKVxyXG4gKiAgICAgICk7XHJcbiAqICB9XHJcbiAqXHJcbiAqICAuLi5cclxuICpcclxuICogIC8vIGJhc2ljIHNlbGVjdGlvbiwgc2V0dGluZyBpbml0aWFsIGRpc3BsYXllZCBkZWZhdWx0IHZhbHVlczogJzMnICdCYW5hbmEnXHJcbiAqICBzZWxlY3RGcnVpdCgpIHtcclxuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcclxuICogICAgICB0aXRsZTogXCJIb3cgTXVjaD9cIixcclxuICogICAgICBpdGVtczogW1xyXG4gKiAgICAgICAgdGhpcy5qc29uRGF0YS5udW1iZXJzLCB0aGlzLmpzb25EYXRhLmZydWl0c1xyXG4gKiAgICAgIF0sXHJcbiAqICAgICAgcG9zaXRpdmVCdXR0b25UZXh0OiBcIk9rXCIsXHJcbiAqICAgICAgbmVnYXRpdmVCdXR0b25UZXh0OiBcIk5vcGVcIixcclxuICogICAgICBkZWZhdWx0SXRlbXM6IFtcclxuICogIFx0ICB7aW5kZXg6MCwgdmFsdWU6IHRoaXMuanNvbkRhdGEubnVtYmVyc1syXS5kZXNjcmlwdGlvbn0sXHJcbiAqICBcdCAge2luZGV4OiAxLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5mcnVpdHNbM10uZGVzY3JpcHRpb259XHJcbiAqICBcdF1cclxuICogICAgfSkudGhlbihcclxuICogICAgICByZXN1bHQgPT4ge1xyXG4gKiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0WzBdLmRlc2NyaXB0aW9uICsgJyAnICsgcmVzdWx0WzFdLmRlc2NyaXB0aW9uKTtcclxuICogICAgICB9LFxyXG4gKiAgICAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBKU09OLnN0cmluZ2lmeShlcnIpKVxyXG4gKiAgICAgICk7XHJcbiAqICB9XHJcbiAqXHJcbiAqICAuLi5cclxuICpcclxuICogIC8vIG1vcmUgY29tcGxleCBhcyBvdmVycmlkZXMgd2hpY2gga2V5IHRvIGRpc3BsYXlcclxuICogIC8vIHRoZW4gcmV0cmlldmUgcHJvcGVydGllcyBmcm9tIG9yaWdpbmFsIGRhdGFcclxuICogIHNlbGVjdE5hbWVzVXNpbmdEaXNwbGF5S2V5KCkge1xyXG4gKiAgICB0aGlzLnNlbGVjdG9yLnNob3coe1xyXG4gKiAgICAgIHRpdGxlOiBcIldobz9cIixcclxuICogICAgICBpdGVtczogW1xyXG4gKiAgICAgICAgdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzLCB0aGlzLmpzb25EYXRhLmxhc3ROYW1lc1xyXG4gKiAgICAgIF0sXHJcbiAqICAgICAgZGlzcGxheUtleTogJ25hbWUnLFxyXG4gKiAgICAgIGRlZmF1bHRJdGVtczogW1xyXG4gKiAgXHQgIHtpbmRleDowLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzWzJdLm5hbWV9LFxyXG4gKiAgICAgICAge2luZGV4OiAwLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNbM10ubmFtZX1cclxuICogICAgICBdXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5uYW1lICsgJyAoaWQ9ICcgKyB0aGlzLmpzb25EYXRhLmZpcnN0TmFtZXNbcmVzdWx0WzBdLmluZGV4XS5pZCArICcpLCAnICtcclxuICogICAgICAgICAgcmVzdWx0WzFdLm5hbWUgKyAnIChpZD0nICsgdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNbcmVzdWx0WzFdLmluZGV4XS5pZCArICcpJyk7XHJcbiAqICAgICAgfSxcclxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiBgYGBcclxuICpcclxuICogQGludGVyZmFjZXNcclxuICogV2hlZWxTZWxlY3Rvck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXaGVlbFNlbGVjdG9yJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXdoZWVsLXNlbGVjdG9yLXBsdWdpbicsXHJcbiAgcGx1Z2luUmVmOiAnU2VsZWN0b3JDb3Jkb3ZhUGx1Z2luJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2phc29ubWFteS9jb3Jkb3ZhLXdoZWVsLXNlbGVjdG9yLXBsdWdpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFdoZWVsU2VsZWN0b3IgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIHdoZWVsIHNlbGVjdG9yXHJcbiAgICogQHBhcmFtIHtXaGVlbFNlbGVjdG9yT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgd2hlZWwgc2VsZWN0b3JcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxXaGVlbFNlbGVjdG9yRGF0YT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2VsZWN0ZWQgaXRlbXMsIG9yIGFuIGVycm9yLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaG93KG9wdGlvbnM6IFdoZWVsU2VsZWN0b3JPcHRpb25zKTogUHJvbWlzZTxXaGVlbFNlbGVjdG9yRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZSB0aGUgc2VsZWN0b3JcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbiAgfSlcclxuICBoaWRlU2VsZWN0b3IoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==