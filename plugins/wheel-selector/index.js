var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WheelSelectorOriginal = /** @class */ (function (_super) {
    __extends(WheelSelectorOriginal, _super);
    function WheelSelectorOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WheelSelectorOriginal.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    WheelSelectorOriginal.prototype.hideSelector = function () { return cordova(this, "hideSelector", { "platforms": ["iOS"] }, arguments); };
    WheelSelectorOriginal.pluginName = "WheelSelector";
    WheelSelectorOriginal.plugin = "cordova-wheel-selector-plugin";
    WheelSelectorOriginal.pluginRef = "SelectorCordovaPlugin";
    WheelSelectorOriginal.repo = "https://github.com/jasonmamy/cordova-wheel-selector-plugin";
    WheelSelectorOriginal.platforms = ["Android", "iOS"];
    return WheelSelectorOriginal;
}(IonicNativePlugin));
var WheelSelector = new WheelSelectorOriginal();
export { WheelSelector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3doZWVsLXNlbGVjdG9yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXFMckMsaUNBQWlCOzs7O0lBT2xELDRCQUFJLGFBQUMsT0FBNkI7SUFXbEMsb0NBQVk7Ozs7Ozt3QkF4TWQ7RUFzTG1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvckl0ZW0ge1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRJdGVtIHtcclxuICBpbmRleDogbnVtYmVyO1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgc2VsZWN0b3IncyBpbnB1dCBib3hcclxuICAgKi9cclxuICB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaXRlbXMgdG8gZGlzcGxheSAoYXJyYXkgb2YgaXRlbXMpLlxyXG4gICAqL1xyXG4gIGl0ZW1zOiBXaGVlbFNlbGVjdG9ySXRlbVtdW107XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoaWNoIGl0ZW1zIHRvIGRpc3BsYXkgYnkgZGVmYXVsdC5cclxuICAgKi9cclxuICBkZWZhdWx0SXRlbXM/OiBEZWZhdWx0SXRlbVtdO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgJ29rJyBidXR0b24gdGV4dFxyXG4gICAqIERlZmF1bHQ6IERvbmVcclxuICAgKi9cclxuICBwb3NpdGl2ZUJ1dHRvblRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSAnY2FuY2VsJyBidXR0b24gdGV4dFxyXG4gICAqIERlZmF1bHQ6IENhbmNlbFxyXG4gICAqL1xyXG4gIG5lZ2F0aXZlQnV0dG9uVGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQW5kcm9pZCBvbmx5IC0gdGhlbWUgY29sb3IsICdsaWdodCcgb3IgJ2RhcmsnLlxyXG4gICAqIERlZmF1bHQ6IGxpZ2h0XHJcbiAgICovXHJcbiAgdGhlbWU/OiAnbGlnaHQnIHwgJ2RhcmsnO1xyXG5cclxuICAvKipcclxuICAgKiBXaGV0aGVyIHRvIGhhdmUgdGhlIHdoZWVscyAnd3JhcCcgKEFuZHJvaWQgb25seSlcclxuICAgKiBEZWZhdWx0OiBmYWxzZVxyXG4gICAqL1xyXG4gIHdyYXBXaGVlbFRleHQ/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUganNvbiBrZXkgdG8gZGlzcGxheSwgYnkgZGVmYXVsdCBpdCBpcyBkZXNjcmlwdGlvbiwgdGhpcyBhbGxvd3MgZm9yIHNldHRpbmcgYW55XHJcbiAgICoga2V5L3ZhbHVlIHRvIGJlIGRpc3BsYXllZFxyXG4gICAqIERlZmF1bHQ6IGRlc2NyaXB0aW9uXHJcbiAgICovXHJcbiAgZGlzcGxheUtleT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGVlbFNlbGVjdG9yRGF0YSB7XHJcbiAgZGF0YTogYW55O1xyXG59XHJcblxyXG4vKipcclxuICogQGJldGFcclxuICogQG5hbWUgV2hlZWxTZWxlY3RvciBQbHVnaW5cclxuICogQGRlc2NyaXB0aW9uIE5hdGl2ZSB3aGVlbCBzZWxlY3RvciBmb3IgQ29yZG92YSAoQW5kcm9pZC9pT1MpLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IFdoZWVsU2VsZWN0b3IgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3doZWVsLXNlbGVjdG9yL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VsZWN0b3I6IFdoZWVsU2VsZWN0b3IpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogY29uc3QganNvbkRhdGEgPSB7XHJcbiAqICAgbnVtYmVyczogW1xyXG4gKiAgICB7IGRlc2NyaXB0aW9uOiBcIjFcIiB9LFxyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCIyXCIgfSxcclxuICogICAgIHsgZGVzY3JpcHRpb246IFwiM1wiIH1cclxuICogICBdLFxyXG4gKiAgIGZydWl0czogW1xyXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCJBcHBsZVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIkJhbmFuYVwiIH0sXHJcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIlRhbmdlcmluZVwiIH1cclxuICogICBdLFxyXG4gKiAgIGZpcnN0TmFtZXM6IFtcclxuICogICAgIHsgbmFtZTogXCJGcmVkXCIsIGlkOiAnMScgfSxcclxuICogICAgIHsgbmFtZTogXCJKYW5lXCIsIGlkOiAnMicgfSxcclxuICogICAgIHsgbmFtZTogXCJCb2JcIiwgaWQ6ICczJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkVhcmxcIiwgaWQ6ICc0JyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIkV1bmljZVwiLCBpZDogJzUnIH1cclxuICogICBdLFxyXG4gKiAgIGxhc3ROYW1lczogW1xyXG4gKiAgICAgeyBuYW1lOiBcIkpvaG5zb25cIiwgaWQ6ICcxMDAnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiRG9lXCIsIGlkOiAnMTAxJyB9LFxyXG4gKiAgICAgeyBuYW1lOiBcIktpbmlzaGl3YVwiLCBpZDogJzEwMicgfSxcclxuICogICAgIHsgbmFtZTogXCJHb3Jkb25cIiwgaWQ6ICcxMDMnIH0sXHJcbiAqICAgICB7IG5hbWU6IFwiU21pdGhcIiwgaWQ6ICcxMDQnIH1cclxuICogICBdXHJcbiAqIH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIGJhc2ljIG51bWJlciBzZWxlY3Rpb24sIGluZGV4IGlzIGFsd2F5cyByZXR1cm5lZCBpbiB0aGUgcmVzdWx0XHJcbiAqICBzZWxlY3RBTnVtYmVyKCkge1xyXG4gKiAgICB0aGlzLnNlbGVjdG9yLnNob3coe1xyXG4gKiAgICAgIHRpdGxlOiBcIkhvdyBNYW55P1wiLFxyXG4gKiAgICAgIGl0ZW1zOiBbXHJcbiAqICAgICAgICB0aGlzLmpzb25EYXRhLm51bWJlcnNcclxuICogICAgICBdLFxyXG4gKiAgICB9KS50aGVuKFxyXG4gKiAgICAgIHJlc3VsdCA9PiB7XHJcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0uZGVzY3JpcHRpb24gKyAnIGF0IGluZGV4OiAnICsgcmVzdWx0WzBdLmluZGV4KTtcclxuICogICAgICB9LFxyXG4gKiAgICAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycilcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgLi4uXHJcbiAqXHJcbiAqICAvLyBiYXNpYyBzZWxlY3Rpb24sIHNldHRpbmcgaW5pdGlhbCBkaXNwbGF5ZWQgZGVmYXVsdCB2YWx1ZXM6ICczJyAnQmFuYW5hJ1xyXG4gKiAgc2VsZWN0RnJ1aXQoKSB7XHJcbiAqICAgIHRoaXMuc2VsZWN0b3Iuc2hvdyh7XHJcbiAqICAgICAgdGl0bGU6IFwiSG93IE11Y2g/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEubnVtYmVycywgdGhpcy5qc29uRGF0YS5mcnVpdHNcclxuICogICAgICBdLFxyXG4gKiAgICAgIHBvc2l0aXZlQnV0dG9uVGV4dDogXCJPa1wiLFxyXG4gKiAgICAgIG5lZ2F0aXZlQnV0dG9uVGV4dDogXCJOb3BlXCIsXHJcbiAqICAgICAgZGVmYXVsdEl0ZW1zOiBbXHJcbiAqICBcdCAge2luZGV4OjAsIHZhbHVlOiB0aGlzLmpzb25EYXRhLm51bWJlcnNbMl0uZGVzY3JpcHRpb259LFxyXG4gKiAgXHQgIHtpbmRleDogMSwgdmFsdWU6IHRoaXMuanNvbkRhdGEuZnJ1aXRzWzNdLmRlc2NyaXB0aW9ufVxyXG4gKiAgXHRdXHJcbiAqICAgIH0pLnRoZW4oXHJcbiAqICAgICAgcmVzdWx0ID0+IHtcclxuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5kZXNjcmlwdGlvbiArICcgJyArIHJlc3VsdFsxXS5kZXNjcmlwdGlvbik7XHJcbiAqICAgICAgfSxcclxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcclxuICogICAgICApO1xyXG4gKiAgfVxyXG4gKlxyXG4gKiAgLi4uXHJcbiAqXHJcbiAqICAvLyBtb3JlIGNvbXBsZXggYXMgb3ZlcnJpZGVzIHdoaWNoIGtleSB0byBkaXNwbGF5XHJcbiAqICAvLyB0aGVuIHJldHJpZXZlIHByb3BlcnRpZXMgZnJvbSBvcmlnaW5hbCBkYXRhXHJcbiAqICBzZWxlY3ROYW1lc1VzaW5nRGlzcGxheUtleSgpIHtcclxuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcclxuICogICAgICB0aXRsZTogXCJXaG8/XCIsXHJcbiAqICAgICAgaXRlbXM6IFtcclxuICogICAgICAgIHRoaXMuanNvbkRhdGEuZmlyc3ROYW1lcywgdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNcclxuICogICAgICBdLFxyXG4gKiAgICAgIGRpc3BsYXlLZXk6ICduYW1lJyxcclxuICogICAgICBkZWZhdWx0SXRlbXM6IFtcclxuICogIFx0ICB7aW5kZXg6MCwgdmFsdWU6IHRoaXMuanNvbkRhdGEuZmlyc3ROYW1lc1syXS5uYW1lfSxcclxuICogICAgICAgIHtpbmRleDogMCwgdmFsdWU6IHRoaXMuanNvbkRhdGEubGFzdE5hbWVzWzNdLm5hbWV9XHJcbiAqICAgICAgXVxyXG4gKiAgICB9KS50aGVuKFxyXG4gKiAgICAgIHJlc3VsdCA9PiB7XHJcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0ubmFtZSArICcgKGlkPSAnICsgdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzW3Jlc3VsdFswXS5pbmRleF0uaWQgKyAnKSwgJyArXHJcbiAqICAgICAgICAgIHJlc3VsdFsxXS5uYW1lICsgJyAoaWQ9JyArIHRoaXMuanNvbkRhdGEubGFzdE5hbWVzW3Jlc3VsdFsxXS5pbmRleF0uaWQgKyAnKScpO1xyXG4gKiAgICAgIH0sXHJcbiAqICAgICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJyArIEpTT04uc3RyaW5naWZ5KGVycikpXHJcbiAqICAgICAgKTtcclxuICogIH1cclxuICpcclxuICogYGBgXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFdoZWVsU2VsZWN0b3JPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnV2hlZWxTZWxlY3RvcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS13aGVlbC1zZWxlY3Rvci1wbHVnaW4nLFxyXG4gIHBsdWdpblJlZjogJ1NlbGVjdG9yQ29yZG92YVBsdWdpbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9qYXNvbm1hbXkvY29yZG92YS13aGVlbC1zZWxlY3Rvci1wbHVnaW4nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXaGVlbFNlbGVjdG9yIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFNob3dzIHRoZSB3aGVlbCBzZWxlY3RvclxyXG4gICAqIEBwYXJhbSB7V2hlZWxTZWxlY3Rvck9wdGlvbnN9IG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIHdoZWVsIHNlbGVjdG9yXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8V2hlZWxTZWxlY3RvckRhdGE+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHNlbGVjdGVkIGl0ZW1zLCBvciBhbiBlcnJvci5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hvdyhvcHRpb25zOiBXaGVlbFNlbGVjdG9yT3B0aW9ucyk6IFByb21pc2U8V2hlZWxTZWxlY3RvckRhdGE+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhpZGUgdGhlIHNlbGVjdG9yXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2lPUyddLFxyXG4gIH0pXHJcbiAgaGlkZVNlbGVjdG9yKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=