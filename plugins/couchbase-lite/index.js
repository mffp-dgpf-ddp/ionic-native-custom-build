var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CouchbaseLiteOriginal = /** @class */ (function (_super) {
    __extends(CouchbaseLiteOriginal, _super);
    function CouchbaseLiteOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CouchbaseLiteOriginal.prototype.getURL = function () { return cordova(this, "getURL", { "callbackStyle": "node" }, arguments); };
    CouchbaseLiteOriginal.pluginName = "CouchbaseLite";
    CouchbaseLiteOriginal.plugin = "couchbase-lite-phonegap-plugin";
    CouchbaseLiteOriginal.pluginRef = "cblite";
    CouchbaseLiteOriginal.repo = "https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin";
    CouchbaseLiteOriginal.platforms = ["Android", "iOS"];
    return CouchbaseLiteOriginal;
}(IonicNativePlugin));
var CouchbaseLite = new CouchbaseLiteOriginal();
export { CouchbaseLite };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NvdWNoYmFzZS1saXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXdIckMsaUNBQWlCOzs7O0lBUWxELDhCQUFNOzs7Ozs7d0JBaklSO0VBeUhtQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgQ291Y2hiYXNlIExpdGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFBsdWdpbiB0byBpbnN0YWxsIENvdWNoYmFzZSBMaXRlIGluIHlvdXIgUGhvbmVHYXAgYXBwIG9uIGlPUyBvciBBbmRyb2lkIDxkb2NzLWNhcmQgaHJlZj1cImh0dHBzOi8vaW9uaWNmcmFtZXdvcmsuY29tL2ludGVncmF0aW9ucy9jb3VjaGJhc2UtbGl0ZVwiIGlvbmljb249XCJhbGVydFwiPlRoaXMgUGx1Z2luIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgQ291Y2hiYXNlLiBQbGVhc2Ugc2VlIG91ciBDb3VjaGJhc2UgTGl0ZSBJbnRlZ3JhdGlvbjwvZG9jcy1jYXJkPlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDb3VjaGJhc2VMaXRlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3VjaGJhc2UtbGl0ZS9uZ3gnO1xyXG4gKiBpbXBvcnQgeyBIdHRwIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbiAqIGltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJ1xyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvdWNoYmFzZTogQ291Y2hiYXNlTGl0ZSwgcHJpdmF0ZSBwbGF0Zm9ybTpQbGF0Zm9ybSxwcml2YXRlIF9odHRwOkh0dHApIHtcclxuICogICAgdGhpcy5pbml0TWV0aG9kKCk7XHJcbiAqIH1cclxuICogdXJsOnN0cmluZztcclxuICogaW5pdE1ldGhvZCgpIHtcclxuICogICAgdGhpcy5jb3VjaGJhc2UuZ2V0VVJMKCkudGhlbigodXJsKT0+IHtcclxuICogICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG4gKiAgICB9KVxyXG4gKiB9XHJcbiAqIGdldFVybCgpIHtcclxuICogICAgICByZXR1cm4gdGhpcy51cmw7XHJcbiAqIH1cclxuICogLy8gREFUQUJBU0VTIC8vXHJcbiAqIGNyZWF0ZURhdGFiYXNlKGRhdGFiYXNlX25hbWU6c3RyaW5nKSB7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsK2RhdGFiYXNlX25hbWU7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICogICAgICAgIC5wdXQodXJsKVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgIH0pXHJcbiAqICB9XHJcbiAqIGRlbGV0ZURhdGFiYXNlKGRhdGFiYXNlX25hbWU6c3RyaW5nKSB7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsK2RhdGFiYXNlX25hbWU7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICogICAgICAgIC5kZWxldGUodXJsKVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgfSlcclxuICogfVxyXG4gKiBnZXRBbGxEYnMoKSB7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsKydfYWxsX2Ricyc7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICogICAgICAgIC5nZXQodXJsKVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgfSlcclxuICogfVxyXG4gKiAvLyBET0NVTUVOVFMgLy9cclxuICogZ2V0QWxsRG9jdW1lbnRzKGRhdGFiYXNlX25hbWU6c3RyaW5nKXtcclxuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcclxuICogICAgICAvLyBpbmNsdWRlX2RvY3M9dHJ1ZSB3aWxsIGluY2x1ZGUgYSBkb2MgaW5zaWRlIHJlc3BvbnNlLCBpdCBpcyBmYWxzZSBieSBkZWZhdWx0XHJcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZSArICcvX2FsbF9kb2NzP2luY2x1ZGVfZG9jcz10cnVlJztcclxuICogICAgICByZXR1cm4gdGhpcy5faHR0cFxyXG4gKiAgICAgICAgLmdldCh1cmwpXHJcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcclxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XHJcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XHJcbiAqICAgICAgICB9KSAgICAgICAgLlxyXG4gKiB9XHJcbiAqIGNyZWF0ZURvY3VtZW50KGRhdGFiYXNlX25hbWU6c3RyaW5nLGRvY3VtZW50KXtcclxuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcclxuICogICAgICB1cmwgPSB1cmwgKyBkYXRhYmFzZV9uYW1lO1xyXG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAqICAgICAgICAucG9zdCh1cmwsZG9jdW1lbnQpXHJcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcclxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XHJcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XHJcbiAqICAgICAgICB9KSAgICAgICAgLlxyXG4gKiB9XHJcbiAqIGxldCBkb2N1bWVudCA9IHtcclxuICogICAgX2lkOidZb3UgY2FuIGVpdGhlciBzcGVjaWZ5IHRoZSBkb2N1bWVudCBJRCAobXVzdCBiZSBzdHJpbmcpIGVsc2UgY291Y2hiYXNlIGdlbmVyYXRlcyBvbmUgZm9yIHlvdXIgZG9jJyxcclxuICogICAgZGF0YTp7bmFtZTonc2FuZG1hbicsYWdlOjI1LGNpdHk6cHVuZX1cclxuICogIH1cclxuICogY3JlYXRlRG9jdW1lbnQoJ2p1c3RiZScsIGRvY3VtZW50KTtcclxuICogLy8gc3VjY2Vzc2Z1bCByZXNwb25zZVxyXG4gKiB7IFwiaWRcIjogXCJzdHJpbmdcIixcInJldlwiOiBcInN0cmluZ1wiLFwib2tcIjogdHJ1ZSB9XHJcbiAqIHVwZGF0ZURvY3VtZW50KGRhdGFiYXNlX25hbWU6c3RyaW5nLGRvY3VtZW50KXtcclxuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcclxuICogICAgICB1cmwgPSB1cmwgKyBkYXRhYmFzZV9uYW1lICsgJy8nICsgZG9jdW1lbnQuX2lkO1xyXG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAqICAgICAgICAucHV0KHVybCxkb2N1bWVudClcclxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxyXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcclxuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcclxuICogICAgICAgIH0pICAgICAgICAuXHJcbiAqIH1cclxuICogLy8gZm9yIHVwZGF0aW9uIG9mIGRvY3VtZW50IHlvdXIgZG9jdW1lbnQgbXVzdCBjb250YWluIG1vc3QgcmVjZW50IHJldihyZXZpc2lvbikgaWQuXHJcbiAqIC8vIGZvciBlYWNoIHVwZGF0aW9uIG9mIGRvY3VtZW50IG5ldyByZXYgaWQgaXMgZ2V0IGdlbmVyYXRlZFxyXG4gKiAvLyBzdWNjZXNzZnVsIHJlc3BvbnNlXHJcbiAqIHsgXCJpZFwiOiBcInN0cmluZ1wiLFwicmV2XCI6IFwic3RyaW5nKG5ldyByZXZpc2lvbiBpZClcIixcIm9rXCI6IHRydWUgfVxyXG4gKiBkZWxldGVEb2N1bWVudChkYXRhYmFzZV9uYW1lOnN0cmluZyxkb2N1bWVudCl7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZSArICcvJyArIGRvY3VtZW50Ll9pZCArJz9yZXY9Jytkb2MuX3JldjtcclxuICogICAgICByZXR1cm4gdGhpcy5faHR0cFxyXG4gKiAgICAgICAgLmRlbGV0ZSh1cmwpXHJcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcclxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XHJcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XHJcbiAqICAgICAgICB9KSAgICAgICAgLlxyXG4gKiB9XHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NvdWNoYmFzZUxpdGUnLFxyXG4gIHBsdWdpbjogJ2NvdWNoYmFzZS1saXRlLXBob25lZ2FwLXBsdWdpbicsXHJcbiAgcGx1Z2luUmVmOiAnY2JsaXRlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NvdWNoYmFzZWxhYnMvQ291Y2hiYXNlLUxpdGUtUGhvbmVHYXAtUGx1Z2luJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ291Y2hiYXNlTGl0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBHZXQgdGhlIGRhdGFiYXNlIHVybFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsb2NhbCBkYXRhYmFzZSB1cmxcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja1N0eWxlOiAnbm9kZScsXHJcbiAgfSlcclxuICBnZXRVUkwoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19