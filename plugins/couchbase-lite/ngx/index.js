import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CouchbaseLite = /** @class */ (function (_super) {
    __extends(CouchbaseLite, _super);
    function CouchbaseLite() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CouchbaseLite.prototype.getURL = function () { return cordova(this, "getURL", { "callbackStyle": "node" }, arguments); };
    CouchbaseLite.pluginName = "CouchbaseLite";
    CouchbaseLite.plugin = "couchbase-lite-phonegap-plugin";
    CouchbaseLite.pluginRef = "cblite";
    CouchbaseLite.repo = "https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin";
    CouchbaseLite.platforms = ["Android", "iOS"];
    CouchbaseLite = __decorate([
        Injectable()
    ], CouchbaseLite);
    return CouchbaseLite;
}(IonicNativePlugin));
export { CouchbaseLite };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NvdWNoYmFzZS1saXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXdIckMsaUNBQWlCOzs7O0lBUWxELDhCQUFNOzs7Ozs7SUFSSyxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWE7d0JBekgxQjtFQXlIbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENvdWNoYmFzZSBMaXRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQbHVnaW4gdG8gaW5zdGFsbCBDb3VjaGJhc2UgTGl0ZSBpbiB5b3VyIFBob25lR2FwIGFwcCBvbiBpT1Mgb3IgQW5kcm9pZCA8ZG9jcy1jYXJkIGhyZWY9XCJodHRwczovL2lvbmljZnJhbWV3b3JrLmNvbS9pbnRlZ3JhdGlvbnMvY291Y2hiYXNlLWxpdGVcIiBpb25pY29uPVwiYWxlcnRcIj5UaGlzIFBsdWdpbiBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGJ5IENvdWNoYmFzZS4gUGxlYXNlIHNlZSBvdXIgQ291Y2hiYXNlIExpdGUgSW50ZWdyYXRpb248L2RvY3MtY2FyZD5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ291Y2hiYXNlTGl0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY291Y2hiYXNlLWxpdGUvbmd4JztcclxuICogaW1wb3J0IHsgSHR0cCB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xyXG4gKiBpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjb3VjaGJhc2U6IENvdWNoYmFzZUxpdGUsIHByaXZhdGUgcGxhdGZvcm06UGxhdGZvcm0scHJpdmF0ZSBfaHR0cDpIdHRwKSB7XHJcbiAqICAgIHRoaXMuaW5pdE1ldGhvZCgpO1xyXG4gKiB9XHJcbiAqIHVybDpzdHJpbmc7XHJcbiAqIGluaXRNZXRob2QoKSB7XHJcbiAqICAgIHRoaXMuY291Y2hiYXNlLmdldFVSTCgpLnRoZW4oKHVybCk9PiB7XHJcbiAqICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICogICAgfSlcclxuICogfVxyXG4gKiBnZXRVcmwoKSB7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMudXJsO1xyXG4gKiB9XHJcbiAqIC8vIERBVEFCQVNFUyAvL1xyXG4gKiBjcmVhdGVEYXRhYmFzZShkYXRhYmFzZV9uYW1lOnN0cmluZykge1xyXG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xyXG4gKiAgICAgIHVybCA9IHVybCtkYXRhYmFzZV9uYW1lO1xyXG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAqICAgICAgICAucHV0KHVybClcclxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxyXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcclxuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcclxuICogICAgICAgICB9KVxyXG4gKiAgfVxyXG4gKiBkZWxldGVEYXRhYmFzZShkYXRhYmFzZV9uYW1lOnN0cmluZykge1xyXG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xyXG4gKiAgICAgIHVybCA9IHVybCtkYXRhYmFzZV9uYW1lO1xyXG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAqICAgICAgICAuZGVsZXRlKHVybClcclxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxyXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcclxuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcclxuICogICAgICAgIH0pXHJcbiAqIH1cclxuICogZ2V0QWxsRGJzKCkge1xyXG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xyXG4gKiAgICAgIHVybCA9IHVybCsnX2FsbF9kYnMnO1xyXG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXHJcbiAqICAgICAgICAuZ2V0KHVybClcclxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxyXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcclxuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcclxuICogICAgICAgIH0pXHJcbiAqIH1cclxuICogLy8gRE9DVU1FTlRTIC8vXHJcbiAqIGdldEFsbERvY3VtZW50cyhkYXRhYmFzZV9uYW1lOnN0cmluZyl7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgLy8gaW5jbHVkZV9kb2NzPXRydWUgd2lsbCBpbmNsdWRlIGEgZG9jIGluc2lkZSByZXNwb25zZSwgaXQgaXMgZmFsc2UgYnkgZGVmYXVsdFxyXG4gKiAgICAgIHVybCA9IHVybCArIGRhdGFiYXNlX25hbWUgKyAnL19hbGxfZG9jcz9pbmNsdWRlX2RvY3M9dHJ1ZSc7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICogICAgICAgIC5nZXQodXJsKVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgfSkgICAgICAgIC5cclxuICogfVxyXG4gKiBjcmVhdGVEb2N1bWVudChkYXRhYmFzZV9uYW1lOnN0cmluZyxkb2N1bWVudCl7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZTtcclxuICogICAgICByZXR1cm4gdGhpcy5faHR0cFxyXG4gKiAgICAgICAgLnBvc3QodXJsLGRvY3VtZW50KVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgfSkgICAgICAgIC5cclxuICogfVxyXG4gKiBsZXQgZG9jdW1lbnQgPSB7XHJcbiAqICAgIF9pZDonWW91IGNhbiBlaXRoZXIgc3BlY2lmeSB0aGUgZG9jdW1lbnQgSUQgKG11c3QgYmUgc3RyaW5nKSBlbHNlIGNvdWNoYmFzZSBnZW5lcmF0ZXMgb25lIGZvciB5b3VyIGRvYycsXHJcbiAqICAgIGRhdGE6e25hbWU6J3NhbmRtYW4nLGFnZToyNSxjaXR5OnB1bmV9XHJcbiAqICB9XHJcbiAqIGNyZWF0ZURvY3VtZW50KCdqdXN0YmUnLCBkb2N1bWVudCk7XHJcbiAqIC8vIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcclxuICogeyBcImlkXCI6IFwic3RyaW5nXCIsXCJyZXZcIjogXCJzdHJpbmdcIixcIm9rXCI6IHRydWUgfVxyXG4gKiB1cGRhdGVEb2N1bWVudChkYXRhYmFzZV9uYW1lOnN0cmluZyxkb2N1bWVudCl7XHJcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XHJcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZSArICcvJyArIGRvY3VtZW50Ll9pZDtcclxuICogICAgICByZXR1cm4gdGhpcy5faHR0cFxyXG4gKiAgICAgICAgLnB1dCh1cmwsZG9jdW1lbnQpXHJcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcclxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XHJcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XHJcbiAqICAgICAgICB9KSAgICAgICAgLlxyXG4gKiB9XHJcbiAqIC8vIGZvciB1cGRhdGlvbiBvZiBkb2N1bWVudCB5b3VyIGRvY3VtZW50IG11c3QgY29udGFpbiBtb3N0IHJlY2VudCByZXYocmV2aXNpb24pIGlkLlxyXG4gKiAvLyBmb3IgZWFjaCB1cGRhdGlvbiBvZiBkb2N1bWVudCBuZXcgcmV2IGlkIGlzIGdldCBnZW5lcmF0ZWRcclxuICogLy8gc3VjY2Vzc2Z1bCByZXNwb25zZVxyXG4gKiB7IFwiaWRcIjogXCJzdHJpbmdcIixcInJldlwiOiBcInN0cmluZyhuZXcgcmV2aXNpb24gaWQpXCIsXCJva1wiOiB0cnVlIH1cclxuICogZGVsZXRlRG9jdW1lbnQoZGF0YWJhc2VfbmFtZTpzdHJpbmcsZG9jdW1lbnQpe1xyXG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xyXG4gKiAgICAgIHVybCA9IHVybCArIGRhdGFiYXNlX25hbWUgKyAnLycgKyBkb2N1bWVudC5faWQgKyc/cmV2PScrZG9jLl9yZXY7XHJcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcclxuICogICAgICAgIC5kZWxldGUodXJsKVxyXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXHJcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xyXG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xyXG4gKiAgICAgICAgfSkgICAgICAgIC5cclxuICogfVxyXG4gKlxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdDb3VjaGJhc2VMaXRlJyxcclxuICBwbHVnaW46ICdjb3VjaGJhc2UtbGl0ZS1waG9uZWdhcC1wbHVnaW4nLFxyXG4gIHBsdWdpblJlZjogJ2NibGl0ZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jb3VjaGJhc2VsYWJzL0NvdWNoYmFzZS1MaXRlLVBob25lR2FwLVBsdWdpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvdWNoYmFzZUxpdGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBkYXRhYmFzZSB1cmxcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbG9jYWwgZGF0YWJhc2UgdXJsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnLFxyXG4gIH0pXHJcbiAgZ2V0VVJMKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==