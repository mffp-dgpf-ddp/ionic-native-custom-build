import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var OpenNativeSettings = /** @class */ (function (_super) {
    __extends(OpenNativeSettings, _super);
    function OpenNativeSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenNativeSettings.prototype.open = function (setting) { return cordova(this, "open", {}, arguments); };
    OpenNativeSettings.pluginName = "OpenNativeSettings";
    OpenNativeSettings.plugin = "cordova-open-native-settings";
    OpenNativeSettings.pluginRef = "cordova.plugins.settings";
    OpenNativeSettings.repo = "https://github.com/guyromb/Cordova-open-native-settings";
    OpenNativeSettings.platforms = ["Android", "iOS"];
    OpenNativeSettings = __decorate([
        Injectable()
    ], OpenNativeSettings);
    return OpenNativeSettings;
}(IonicNativePlugin));
export { OpenNativeSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL29wZW4tbmF0aXZlLXNldHRpbmdzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1HaEMsc0NBQWlCOzs7O0lBT3ZELGlDQUFJLGFBQUMsT0FBbUM7Ozs7OztJQVA3QixrQkFBa0I7UUFEOUIsVUFBVSxFQUFFO09BQ0Esa0JBQWtCOzZCQXBHL0I7RUFvR3dDLGlCQUFpQjtTQUE1QyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIE9wZW4gTmF0aXZlIFNldHRpbmdzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBQbHVnaW4gdG8gb3BlbiBuYXRpdmUgc2NyZWVucyBvZiBpT1MvYW5kcm9pZCBzZXR0aW5nc1xyXG4gKiBAdXNhZ2VcclxuICogWW91IGNhbiBvcGVuIGFueSBvZiB0aGVzZSBzZXR0aW5nczpcclxuICogYGBgXHJcbiAqICBcImFib3V0XCIsIC8vIGlvc1xyXG4gKiAgXCJhY2Nlc3NpYmlsaXR5XCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJhY2NvdW50XCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJhaXJwbGFuZV9tb2RlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJhcG5cIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJhcHBsaWNhdGlvbl9kZXRhaWxzXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJhcHBsaWNhdGlvbl9kZXZlbG9wbWVudFwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImFwcGxpY2F0aW9uXCIsIC8vIGFuZHJvaWRcclxuICogIFwiYXV0b2xvY2tcIiwgLy8gaW9zXHJcbiAqICBcImJhdHRlcnlfb3B0aW1pemF0aW9uXCIsIC8vIGFuZHJvaWRcclxuICogIFwiYmx1ZXRvb3RoXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJjYXN0bGVcIiwgLy8gaW9zXHJcbiAqICBcImNhcHRpb25pbmdcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJjYXN0XCIsIC8vIGFuZHJvaWRcclxuICogIFwiY2VsbHVsYXJfdXNhZ2VcIiwgLy8gaW9zXHJcbiAqICBcImNvbmZpZ3VyYXRpb25fbGlzdFwiLCAvLyBpb3NcclxuICogIFwiZGF0YV9yb2FtaW5nXCIsIC8vIGFuZHJvaWRcclxuICogIFwiZGF0ZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiZGlzcGxheVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiZHJlYW1cIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJmYWNldGltZVwiLCAvLyBpb3NcclxuICogIFwiaG9tZVwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImtleWJvYXJkXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiAgXCJrZXlib2FyZF9zdWJ0eXBlXCIsIC8vIGFuZHJvaWRcclxuICogIFwibG9jYWxlXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcImxvY2F0aW9uXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcImxvY2F0aW9uc1wiLCAvLyBpb3NcclxuICogXCJtYW5hZ2VfYWxsX2FwcGxpY2F0aW9uc1wiLCAvLyBhbmRyb2lkXHJcbiAqIFwibWFuYWdlX2FwcGxpY2F0aW9uc1wiLCAvLyBhbmRyb2lkXHJcbiAqIFwibWVtb3J5X2NhcmRcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm11c2ljXCIsIC8vIGlvc1xyXG4gKiBcIm11c2ljX2VxdWFsaXplclwiLCAvLyBpb3NcclxuICogXCJtdXNpY192b2x1bWVcIiwgLy8gaW9zXHJcbiAqIFwibmV0d29ya1wiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJuaWtlX2lwb2RcIiwgLy8gaW9zXHJcbiAqIFwibmZjc2hhcmluZ1wiLCAvLyBhbmRyb2lkXHJcbiAqIFwibmZjX3BheW1lbnRcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm5mY19zZXR0aW5nc1wiLCAvLyBhbmRyb2lkXHJcbiAqIFwibm90ZXNcIiwgLy8gaW9zXHJcbiAqIFwibm90aWZpY2F0aW9uX2lkXCIsIC8vIGlvc1xyXG4gKiBcInBhc3Nib29rXCIsIC8vIGlvc1xyXG4gKiBcInBob25lXCIsIC8vIGlvc1xyXG4gKiBcInBob3Rvc1wiLCAvLyBpb3NcclxuICogXCJwcmludFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwicHJpdmFjeVwiLCAvLyBhbmRyb2lkXHJcbiAqIFwicXVpY2tfbGF1bmNoXCIsIC8vIGFuZHJvaWRcclxuICogXCJyZXNldFwiLCAvLyBpb3NcclxuICogXCJyaW5ndG9uZVwiLCAvLyBpb3NcclxuICogXCJicm93c2VyXCIsIC8vIGlvc1xyXG4gKiBcInNlYXJjaFwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJzZWN1cml0eVwiLCAvLyBhbmRyb2lkXHJcbiAqIFwic2V0dGluZ3NcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwic2hvd19yZWd1bGF0b3J5X2luZm9cIixcclxuICogXCJzb3VuZFwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJzb2Z0d2FyZV91cGRhdGVcIiwgLy8gaW9zXHJcbiAqIFwic3RvcmFnZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJzdG9yZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJzeW5jXCIsIC8vIGFuZHJvaWRcclxuICogXCJ0ZXRoZXJpbmdcIiwgLy8gaW9zXHJcbiAqIFwidHdpdHRlclwiLCAvLyBpb3NcclxuICogXCJ0b3VjaFwiLCAvLyBpb3NcclxuICogXCJ1c2FnZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJ1c2VyX2RpY3Rpb25hcnlcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInZpZGVvXCIsIC8vIGlvc1xyXG4gKiBcInZvaWNlX2lucHV0XCIsIC8vIGFuZHJvaWRcclxuICogXCJ2cG5cIiwgLy8gaW9zXHJcbiAqIFwid2FsbHBhcGVyXCIsIC8vIGlvc1xyXG4gKiBcIndpZmlfaXBcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIndpZmlcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwid2lyZWxlc3NcIiAvLyBhbmRyb2lkXHJcbiAqICBgYGBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBPcGVuTmF0aXZlU2V0dGluZ3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL29wZW4tbmF0aXZlLXNldHRpbmdzL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgb3Blbk5hdGl2ZVNldHRpbmdzOiBPcGVuTmF0aXZlU2V0dGluZ3MpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnT3Blbk5hdGl2ZVNldHRpbmdzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLW9wZW4tbmF0aXZlLXNldHRpbmdzJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc2V0dGluZ3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZ3V5cm9tYi9Db3Jkb3ZhLW9wZW4tbmF0aXZlLXNldHRpbmdzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT3Blbk5hdGl2ZVNldHRpbmdzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIE9wZW5zIGEgc2V0dGluZyBkaWFsb2dcclxuICAgKiBAcGFyYW0gc2V0dGluZyB7c3RyaW5nfGFycmF5fSBzZXR0aW5nIG5hbWVcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG9wZW4oc2V0dGluZzogc3RyaW5nIHwgW3N0cmluZywgYm9vbGVhbl0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=