var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var OpenNativeSettingsOriginal = /** @class */ (function (_super) {
    __extends(OpenNativeSettingsOriginal, _super);
    function OpenNativeSettingsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenNativeSettingsOriginal.prototype.open = function (setting) { return cordova(this, "open", {}, arguments); };
    OpenNativeSettingsOriginal.pluginName = "OpenNativeSettings";
    OpenNativeSettingsOriginal.plugin = "cordova-open-native-settings";
    OpenNativeSettingsOriginal.pluginRef = "cordova.plugins.settings";
    OpenNativeSettingsOriginal.repo = "https://github.com/guyromb/Cordova-open-native-settings";
    OpenNativeSettingsOriginal.platforms = ["Android", "iOS"];
    return OpenNativeSettingsOriginal;
}(IonicNativePlugin));
var OpenNativeSettings = new OpenNativeSettingsOriginal();
export { OpenNativeSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL29wZW4tbmF0aXZlLXNldHRpbmdzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1HaEMsc0NBQWlCOzs7O0lBT3ZELGlDQUFJLGFBQUMsT0FBbUM7Ozs7Ozs2QkEzRzFDO0VBb0d3QyxpQkFBaUI7U0FBNUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBPcGVuIE5hdGl2ZSBTZXR0aW5nc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUGx1Z2luIHRvIG9wZW4gbmF0aXZlIHNjcmVlbnMgb2YgaU9TL2FuZHJvaWQgc2V0dGluZ3NcclxuICogQHVzYWdlXHJcbiAqIFlvdSBjYW4gb3BlbiBhbnkgb2YgdGhlc2Ugc2V0dGluZ3M6XHJcbiAqIGBgYFxyXG4gKiAgXCJhYm91dFwiLCAvLyBpb3NcclxuICogIFwiYWNjZXNzaWJpbGl0eVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiYWNjb3VudFwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiYWlycGxhbmVfbW9kZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiYXBuXCIsIC8vIGFuZHJvaWRcclxuICogIFwiYXBwbGljYXRpb25fZGV0YWlsc1wiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiYXBwbGljYXRpb25fZGV2ZWxvcG1lbnRcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJhcHBsaWNhdGlvblwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImF1dG9sb2NrXCIsIC8vIGlvc1xyXG4gKiAgXCJiYXR0ZXJ5X29wdGltaXphdGlvblwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImJsdWV0b290aFwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwiY2FzdGxlXCIsIC8vIGlvc1xyXG4gKiAgXCJjYXB0aW9uaW5nXCIsIC8vIGFuZHJvaWRcclxuICogIFwiY2FzdFwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImNlbGx1bGFyX3VzYWdlXCIsIC8vIGlvc1xyXG4gKiAgXCJjb25maWd1cmF0aW9uX2xpc3RcIiwgLy8gaW9zXHJcbiAqICBcImRhdGFfcm9hbWluZ1wiLCAvLyBhbmRyb2lkXHJcbiAqICBcImRhdGVcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImRpc3BsYXlcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqICBcImRyZWFtXCIsIC8vIGFuZHJvaWRcclxuICogIFwiZmFjZXRpbWVcIiwgLy8gaW9zXHJcbiAqICBcImhvbWVcIiwgLy8gYW5kcm9pZFxyXG4gKiAgXCJrZXlib2FyZFwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogIFwia2V5Ym9hcmRfc3VidHlwZVwiLCAvLyBhbmRyb2lkXHJcbiAqICBcImxvY2FsZVwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJsb2NhdGlvblwiLCAvLyBpb3MsIGFuZHJvaWRcclxuICogXCJsb2NhdGlvbnNcIiwgLy8gaW9zXHJcbiAqIFwibWFuYWdlX2FsbF9hcHBsaWNhdGlvbnNcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm1hbmFnZV9hcHBsaWNhdGlvbnNcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm1lbW9yeV9jYXJkXCIsIC8vIGFuZHJvaWRcclxuICogXCJtdXNpY1wiLCAvLyBpb3NcclxuICogXCJtdXNpY19lcXVhbGl6ZXJcIiwgLy8gaW9zXHJcbiAqIFwibXVzaWNfdm9sdW1lXCIsIC8vIGlvc1xyXG4gKiBcIm5ldHdvcmtcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwibmlrZV9pcG9kXCIsIC8vIGlvc1xyXG4gKiBcIm5mY3NoYXJpbmdcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm5mY19wYXltZW50XCIsIC8vIGFuZHJvaWRcclxuICogXCJuZmNfc2V0dGluZ3NcIiwgLy8gYW5kcm9pZFxyXG4gKiBcIm5vdGVzXCIsIC8vIGlvc1xyXG4gKiBcIm5vdGlmaWNhdGlvbl9pZFwiLCAvLyBpb3NcclxuICogXCJwYXNzYm9va1wiLCAvLyBpb3NcclxuICogXCJwaG9uZVwiLCAvLyBpb3NcclxuICogXCJwaG90b3NcIiwgLy8gaW9zXHJcbiAqIFwicHJpbnRcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInByaXZhY3lcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInF1aWNrX2xhdW5jaFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwicmVzZXRcIiwgLy8gaW9zXHJcbiAqIFwicmluZ3RvbmVcIiwgLy8gaW9zXHJcbiAqIFwiYnJvd3NlclwiLCAvLyBpb3NcclxuICogXCJzZWFyY2hcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwic2VjdXJpdHlcIiwgLy8gYW5kcm9pZFxyXG4gKiBcInNldHRpbmdzXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcInNob3dfcmVndWxhdG9yeV9pbmZvXCIsXHJcbiAqIFwic291bmRcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwic29mdHdhcmVfdXBkYXRlXCIsIC8vIGlvc1xyXG4gKiBcInN0b3JhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwic3RvcmVcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwic3luY1wiLCAvLyBhbmRyb2lkXHJcbiAqIFwidGV0aGVyaW5nXCIsIC8vIGlvc1xyXG4gKiBcInR3aXR0ZXJcIiwgLy8gaW9zXHJcbiAqIFwidG91Y2hcIiwgLy8gaW9zXHJcbiAqIFwidXNhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXHJcbiAqIFwidXNlcl9kaWN0aW9uYXJ5XCIsIC8vIGFuZHJvaWRcclxuICogXCJ2aWRlb1wiLCAvLyBpb3NcclxuICogXCJ2b2ljZV9pbnB1dFwiLCAvLyBhbmRyb2lkXHJcbiAqIFwidnBuXCIsIC8vIGlvc1xyXG4gKiBcIndhbGxwYXBlclwiLCAvLyBpb3NcclxuICogXCJ3aWZpX2lwXCIsIC8vIGFuZHJvaWRcclxuICogXCJ3aWZpXCIsIC8vIGlvcywgYW5kcm9pZFxyXG4gKiBcIndpcmVsZXNzXCIgLy8gYW5kcm9pZFxyXG4gKiAgYGBgXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgT3Blbk5hdGl2ZVNldHRpbmdzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9vcGVuLW5hdGl2ZS1zZXR0aW5ncy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wZW5OYXRpdmVTZXR0aW5nczogT3Blbk5hdGl2ZVNldHRpbmdzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ09wZW5OYXRpdmVTZXR0aW5ncycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1vcGVuLW5hdGl2ZS1zZXR0aW5ncycsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNldHRpbmdzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2d1eXJvbWIvQ29yZG92YS1vcGVuLW5hdGl2ZS1zZXR0aW5ncycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE9wZW5OYXRpdmVTZXR0aW5ncyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBPcGVucyBhIHNldHRpbmcgZGlhbG9nXHJcbiAgICogQHBhcmFtIHNldHRpbmcge3N0cmluZ3xhcnJheX0gc2V0dGluZyBuYW1lXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBvcGVuKHNldHRpbmc6IHN0cmluZyB8IFtzdHJpbmcsIGJvb2xlYW5dKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19