var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SpeechRecognitionOriginal = /** @class */ (function (_super) {
    __extends(SpeechRecognitionOriginal, _super);
    function SpeechRecognitionOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpeechRecognitionOriginal.prototype.isRecognitionAvailable = function () { return cordova(this, "isRecognitionAvailable", {}, arguments); };
    SpeechRecognitionOriginal.prototype.startListening = function (options) { return cordova(this, "startListening", { "callbackOrder": "reverse", "observable": true }, arguments); };
    SpeechRecognitionOriginal.prototype.stopListening = function () { return cordova(this, "stopListening", {}, arguments); };
    SpeechRecognitionOriginal.prototype.getSupportedLanguages = function () { return cordova(this, "getSupportedLanguages", {}, arguments); };
    SpeechRecognitionOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    SpeechRecognitionOriginal.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    SpeechRecognitionOriginal.pluginName = "SpeechRecognition";
    SpeechRecognitionOriginal.plugin = "cordova-plugin-speechrecognition";
    SpeechRecognitionOriginal.pluginRef = "plugins.speechRecognition";
    SpeechRecognitionOriginal.repo = "https://github.com/pbakondy/cordova-plugin-speechrecognition";
    SpeechRecognitionOriginal.platforms = ["Android", "iOS"];
    return SpeechRecognitionOriginal;
}(IonicNativePlugin));
var SpeechRecognition = new SpeechRecognitionOriginal();
export { SpeechRecognition };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NwZWVjaC1yZWNvZ25pdGlvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJHSyxxQ0FBaUI7Ozs7SUFNdEQsa0RBQXNCO0lBWXRCLDBDQUFjLGFBQUMsT0FBMkM7SUFRMUQseUNBQWE7SUFTYixpREFBcUI7SUFTckIseUNBQWE7SUFTYiw2Q0FBaUI7Ozs7Ozs0QkFsS25CO0VBNkd1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zID1cclxuICB8IFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9uc0lPU1xyXG4gIHwgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zQW5kcm9pZDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zSU9TIHtcclxuICAvKipcclxuICAgKiB1c2VkIGxhbmd1YWdlIGZvciByZWNvZ25pdGlvbiAoZGVmYXVsdCBgXCJlbi1VU1wiYClcclxuICAgKi9cclxuICBsYW5ndWFnZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogdW1iZXIgb2YgcmV0dXJuIG1hdGNoZXMgKGRlZmF1bHQgYDVgKVxyXG4gICAqL1xyXG4gIG1hdGNoZXM/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFsbG93IHBhcnRpYWwgcmVzdWx0cyB0byBiZSByZXR1cm5lZCAoZGVmYXVsdCBgZmFsc2VgKVxyXG4gICAqL1xyXG4gIHNob3dQYXJ0aWFsPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNBbmRyb2lkIHtcclxuICAvKipcclxuICAgKiB1c2VkIGxhbmd1YWdlIGZvciByZWNvZ25pdGlvbiAoZGVmYXVsdCBgXCJlbi1VU1wiYClcclxuICAgKi9cclxuICBsYW5ndWFnZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogbnVtYmVyIG9mIHJldHVybiBtYXRjaGVzIChtYXhpbXVtIG51bWJlciBvZiBtYXRjaGVzKVxyXG4gICAqL1xyXG4gIG1hdGNoZXM/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIGRpc3BsYXllZCBwcm9tcHQgb2YgbGlzdGVuZXIgcG9wdXAgd2luZG93XHJcbiAgICovXHJcbiAgcHJvbXB0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBkaXNwbGF5IGxpc3RlbmVyIHBvcHVwIHdpbmRvdyB3aXRoIHByb21wdCAoZGVmYXVsdCBgdHJ1ZWApXHJcbiAgICovXHJcbiAgc2hvd1BvcHVwPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQWxsb3cgcGFydGlhbCByZXN1bHRzIHRvIGJlIHJldHVybmVkIChkZWZhdWx0IGBmYWxzZWApXHJcbiAgICovXHJcbiAgc2hvd1BhcnRpYWw/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgU3BlZWNoIFJlY29nbml0aW9uXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBkb2VzIHNwZWVjaCByZWNvZ25pdGlvbiB1c2luZyBjbG91ZCBzZXJ2aWNlc1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTcGVlY2hSZWNvZ25pdGlvbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3BlZWNoLXJlY29nbml0aW9uL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BlZWNoUmVjb2duaXRpb246IFNwZWVjaFJlY29nbml0aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqIC8vIENoZWNrIGZlYXR1cmUgYXZhaWxhYmxlXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uaXNSZWNvZ25pdGlvbkF2YWlsYWJsZSgpXHJcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4gY29uc29sZS5sb2coYXZhaWxhYmxlKSlcclxuICpcclxuICogLy8gU3RhcnQgdGhlIHJlY29nbml0aW9uIHByb2Nlc3NcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5zdGFydExpc3RlbmluZyhvcHRpb25zKVxyXG4gKiAgIC5zdWJzY3JpYmUoXHJcbiAqICAgICAobWF0Y2hlczogc3RyaW5nW10pID0+IGNvbnNvbGUubG9nKG1hdGNoZXMpLFxyXG4gKiAgICAgKG9uZXJyb3IpID0+IGNvbnNvbGUubG9nKCdlcnJvcjonLCBvbmVycm9yKVxyXG4gKiAgIClcclxuICpcclxuICogLy8gU3RvcCB0aGUgcmVjb2duaXRpb24gcHJvY2VzcyAoaU9TIG9ubHkpXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uc3RvcExpc3RlbmluZygpXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXHJcbiAqIHRoaXMuc3BlZWNoUmVjb2duaXRpb24uZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKClcclxuICogICAudGhlbihcclxuICogICAgIChsYW5ndWFnZXM6IHN0cmluZ1tdKSA9PiBjb25zb2xlLmxvZyhsYW5ndWFnZXMpLFxyXG4gKiAgICAgKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICogICApXHJcbiAqXHJcbiAqIC8vIENoZWNrIHBlcm1pc3Npb25cclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5oYXNQZXJtaXNzaW9uKClcclxuICogICAudGhlbigoaGFzUGVybWlzc2lvbjogYm9vbGVhbikgPT4gY29uc29sZS5sb2coaGFzUGVybWlzc2lvbikpXHJcbiAqXHJcbiAqIC8vIFJlcXVlc3QgcGVybWlzc2lvbnNcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpXHJcbiAqICAgLnRoZW4oXHJcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnR3JhbnRlZCcpLFxyXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ0RlbmllZCcpXHJcbiAqICAgKVxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTcGVlY2hSZWNvZ25pdGlvbicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3BlZWNocmVjb2duaXRpb24nLFxyXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMuc3BlZWNoUmVjb2duaXRpb24nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGJha29uZHkvY29yZG92YS1wbHVnaW4tc3BlZWNocmVjb2duaXRpb24nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTcGVlY2hSZWNvZ25pdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBmZWF0dXJlIGF2YWlsYWJsZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzUmVjb2duaXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgcmVjb2duaXplZCB0ZXJtc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICBzdGFydExpc3RlbmluZyhvcHRpb25zPzogU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wTGlzdGVuaW5nKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCBzdHJpbmdbXSA+fSBsaXN0IG9mIGxhbmd1YWdlc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgcGVybWlzc2lvblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IGhhcyBwZXJtaXNzaW9uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhhc1Blcm1pc3Npb24oKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXF1ZXN0IHBlcm1pc3Npb25zXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVxdWVzdFBlcm1pc3Npb24oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==