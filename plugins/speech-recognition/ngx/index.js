import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SpeechRecognition = /** @class */ (function (_super) {
    __extends(SpeechRecognition, _super);
    function SpeechRecognition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpeechRecognition.prototype.isRecognitionAvailable = function () { return cordova(this, "isRecognitionAvailable", {}, arguments); };
    SpeechRecognition.prototype.startListening = function (options) { return cordova(this, "startListening", { "callbackOrder": "reverse", "observable": true }, arguments); };
    SpeechRecognition.prototype.stopListening = function () { return cordova(this, "stopListening", {}, arguments); };
    SpeechRecognition.prototype.getSupportedLanguages = function () { return cordova(this, "getSupportedLanguages", {}, arguments); };
    SpeechRecognition.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    SpeechRecognition.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    SpeechRecognition.pluginName = "SpeechRecognition";
    SpeechRecognition.plugin = "cordova-plugin-speechrecognition";
    SpeechRecognition.pluginRef = "plugins.speechRecognition";
    SpeechRecognition.repo = "https://github.com/pbakondy/cordova-plugin-speechrecognition";
    SpeechRecognition.platforms = ["Android", "iOS"];
    SpeechRecognition = __decorate([
        Injectable()
    ], SpeechRecognition);
    return SpeechRecognition;
}(IonicNativePlugin));
export { SpeechRecognition };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NwZWVjaC1yZWNvZ25pdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJHSyxxQ0FBaUI7Ozs7SUFNdEQsa0RBQXNCO0lBWXRCLDBDQUFjLGFBQUMsT0FBMkM7SUFRMUQseUNBQWE7SUFTYixpREFBcUI7SUFTckIseUNBQWE7SUFTYiw2Q0FBaUI7Ozs7OztJQXJETixpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO09BQ0EsaUJBQWlCOzRCQTdHOUI7RUE2R3VDLGlCQUFpQjtTQUEzQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgdHlwZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnMgPVxyXG4gIHwgU3BlZWNoUmVjb2duaXRpb25MaXN0ZW5pbmdPcHRpb25zSU9TXHJcbiAgfCBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNBbmRyb2lkO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnNJT1Mge1xyXG4gIC8qKlxyXG4gICAqIHVzZWQgbGFuZ3VhZ2UgZm9yIHJlY29nbml0aW9uIChkZWZhdWx0IGBcImVuLVVTXCJgKVxyXG4gICAqL1xyXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiB1bWJlciBvZiByZXR1cm4gbWF0Y2hlcyAoZGVmYXVsdCBgNWApXHJcbiAgICovXHJcbiAgbWF0Y2hlcz86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQWxsb3cgcGFydGlhbCByZXN1bHRzIHRvIGJlIHJldHVybmVkIChkZWZhdWx0IGBmYWxzZWApXHJcbiAgICovXHJcbiAgc2hvd1BhcnRpYWw/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwZWVjaFJlY29nbml0aW9uTGlzdGVuaW5nT3B0aW9uc0FuZHJvaWQge1xyXG4gIC8qKlxyXG4gICAqIHVzZWQgbGFuZ3VhZ2UgZm9yIHJlY29nbml0aW9uIChkZWZhdWx0IGBcImVuLVVTXCJgKVxyXG4gICAqL1xyXG4gIGxhbmd1YWdlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBudW1iZXIgb2YgcmV0dXJuIG1hdGNoZXMgKG1heGltdW0gbnVtYmVyIG9mIG1hdGNoZXMpXHJcbiAgICovXHJcbiAgbWF0Y2hlcz86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogZGlzcGxheWVkIHByb21wdCBvZiBsaXN0ZW5lciBwb3B1cCB3aW5kb3dcclxuICAgKi9cclxuICBwcm9tcHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGRpc3BsYXkgbGlzdGVuZXIgcG9wdXAgd2luZG93IHdpdGggcHJvbXB0IChkZWZhdWx0IGB0cnVlYClcclxuICAgKi9cclxuICBzaG93UG9wdXA/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBBbGxvdyBwYXJ0aWFsIHJlc3VsdHMgdG8gYmUgcmV0dXJuZWQgKGRlZmF1bHQgYGZhbHNlYClcclxuICAgKi9cclxuICBzaG93UGFydGlhbD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTcGVlY2ggUmVjb2duaXRpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGRvZXMgc3BlZWNoIHJlY29nbml0aW9uIHVzaW5nIGNsb3VkIHNlcnZpY2VzXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFNwZWVjaFJlY29nbml0aW9uIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zcGVlY2gtcmVjb2duaXRpb24vbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzcGVlY2hSZWNvZ25pdGlvbjogU3BlZWNoUmVjb2duaXRpb24pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICpcclxuICogLy8gQ2hlY2sgZmVhdHVyZSBhdmFpbGFibGVcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5pc1JlY29nbml0aW9uQXZhaWxhYmxlKClcclxuICogICAudGhlbigoYXZhaWxhYmxlOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhhdmFpbGFibGUpKVxyXG4gKlxyXG4gKiAvLyBTdGFydCB0aGUgcmVjb2duaXRpb24gcHJvY2Vzc1xyXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLnN0YXJ0TGlzdGVuaW5nKG9wdGlvbnMpXHJcbiAqICAgLnN1YnNjcmliZShcclxuICogICAgIChtYXRjaGVzOiBzdHJpbmdbXSkgPT4gY29uc29sZS5sb2cobWF0Y2hlcyksXHJcbiAqICAgICAob25lcnJvcikgPT4gY29uc29sZS5sb2coJ2Vycm9yOicsIG9uZXJyb3IpXHJcbiAqICAgKVxyXG4gKlxyXG4gKiAvLyBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzIChpT1Mgb25seSlcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5zdG9wTGlzdGVuaW5nKClcclxuICpcclxuICogLy8gR2V0IHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXNcclxuICogdGhpcy5zcGVlY2hSZWNvZ25pdGlvbi5nZXRTdXBwb3J0ZWRMYW5ndWFnZXMoKVxyXG4gKiAgIC50aGVuKFxyXG4gKiAgICAgKGxhbmd1YWdlczogc3RyaW5nW10pID0+IGNvbnNvbGUubG9nKGxhbmd1YWdlcyksXHJcbiAqICAgICAoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiAgIClcclxuICpcclxuICogLy8gQ2hlY2sgcGVybWlzc2lvblxyXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLmhhc1Blcm1pc3Npb24oKVxyXG4gKiAgIC50aGVuKChoYXNQZXJtaXNzaW9uOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhoYXNQZXJtaXNzaW9uKSlcclxuICpcclxuICogLy8gUmVxdWVzdCBwZXJtaXNzaW9uc1xyXG4gKiB0aGlzLnNwZWVjaFJlY29nbml0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKClcclxuICogICAudGhlbihcclxuICogICAgICgpID0+IGNvbnNvbGUubG9nKCdHcmFudGVkJyksXHJcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnRGVuaWVkJylcclxuICogICApXHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1NwZWVjaFJlY29nbml0aW9uJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zcGVlY2hyZWNvZ25pdGlvbicsXHJcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5zcGVlY2hSZWNvZ25pdGlvbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wYmFrb25keS9jb3Jkb3ZhLXBsdWdpbi1zcGVlY2hyZWNvZ25pdGlvbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNwZWVjaFJlY29nbml0aW9uIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENoZWNrIGZlYXR1cmUgYXZhaWxhYmxlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNSZWNvZ25pdGlvbkF2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTwgc3RyaW5nW10gPn0gbGlzdCBvZiByZWNvZ25pemVkIHRlcm1zXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIHN0YXJ0TGlzdGVuaW5nKG9wdGlvbnM/OiBTcGVlY2hSZWNvZ25pdGlvbkxpc3RlbmluZ09wdGlvbnMpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wIHRoZSByZWNvZ25pdGlvbiBwcm9jZXNzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BMaXN0ZW5pbmcoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGxhbmd1YWdlc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8IHN0cmluZ1tdID59IGxpc3Qgb2YgbGFuZ3VhZ2VzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFN1cHBvcnRlZExhbmd1YWdlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBwZXJtaXNzaW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gaGFzIHBlcm1pc3Npb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGFzUGVybWlzc2lvbigpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3QgcGVybWlzc2lvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZXF1ZXN0UGVybWlzc2lvbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19