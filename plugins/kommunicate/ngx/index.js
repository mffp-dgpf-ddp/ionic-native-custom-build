import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Kommunicate = /** @class */ (function (_super) {
    __extends(Kommunicate, _super);
    function Kommunicate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Kommunicate.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    Kommunicate.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    Kommunicate.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    Kommunicate.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    Kommunicate.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    Kommunicate.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    Kommunicate.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    Kommunicate.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    Kommunicate.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Kommunicate.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    Kommunicate.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    Kommunicate.pluginName = "Kommunicate";
    Kommunicate.plugin = "kommunicate-cordova-plugin";
    Kommunicate.pluginRef = "kommunicate";
    Kommunicate.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    Kommunicate.platforms = ["Android", "Browser", "iOS"];
    Kommunicate = __decorate([
        Injectable()
    ], Kommunicate);
    return Kommunicate;
}(IonicNativePlugin));
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tvbW11bmljYXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTZDdkMsK0JBQWlCOzs7O0lBa0JoRCwyQkFBSyxhQUFDLE1BQVc7SUFVakIsOENBQXdCO0lBVXhCLGdDQUFVO0lBV1YsaURBQTJCLGFBQUMsS0FBYTtJQVV6Qyx3Q0FBa0I7SUFnQmxCLGtEQUE0QixhQUFDLGtCQUF1QjtJQVlwRCwwQ0FBb0IsYUFBQyxrQkFBdUI7SUFXNUMsNkNBQXVCLGFBQUMsSUFBUztJQVVqQyw0QkFBTTtJQVlOLHFDQUFlLGFBQUMsSUFBUztJQWlCekIseUNBQW1CLGFBQUMsaUJBQXNCOzs7Ozs7SUF6SS9CLFdBQVc7UUFEdkIsVUFBVSxFQUFFO09BQ0EsV0FBVztzQkE5Q3hCO0VBOENpQyxpQkFBaUI7U0FBckMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBLb21tdW5pY2F0ZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIHBsdWdpbiBmb3IgdGhlIEtvbW11bmljYXRlIFNESy5cclxuICogV2l0aCB0aGUgaGVscCBvZiB0aGlzIHBsdWdpbiwgeW91IGNhbiBlYXNpbHkgYWRkIGh1bWFuICsgYm90IGNoYXQgc3VwcG9ydCBmdW5jdGlvbmFsaXR5IHRvIHlvdSBhcHAuXHJcbiAqIFJlZmVyIHRvOiBUT0RPOiBpbnNlcnQgc2l0ZSBsaW5rXHJcbiAqIEZvciBkb2N1bWVudGF0aW9uOiBUT0RPOiBpbnNlcnQgbGlua1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBLb21tdW5pY2F0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvS29tbXVuaWNhdGUnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGtvbW11bmljYXRlOiBLb21tdW5pY2F0ZSkgeyB9XHJcbiAqIC8vYWxzbyBhZGQgWy4uLiwgS29tbXVuaWNhdGUsIC4uLiBdIGluc2lkZSB0aGUgcHJvdmlkZXJzIGFycmF5LCBpZiByZXF1aXJlZFxyXG4gKlxyXG4gKiB2YXIga21Vc2VyID0ge1xyXG4gKiAgICB1c2VySWQgOiAncmFuZG9tc3RyaW5nJyxcclxuICogICAgYXV0aGVudGljYXRpb25UeXBlSWQgOiAxXHJcbiAqIH07XHJcbiAqXHJcbiAqIHRoaXMua29tbXVuaWNhdGUubG9naW4oa21Vc2VyKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coXCJTdWNlc3NmdWxseSBsb2dnZWQgaW4uXCIgKyByZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihcIkVycm9yIGxvZ2dpbmcgaW4uXCIgKyBlcnJvcikpO1xyXG4gKlxyXG4gKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xyXG4gKiAgICBpc1VuaXF1ZSA6IGZhbHNlXHJcbiAqIH07XHJcbiAqXHJcbiAqIHRoaXMua29tbXVuaWNhdGUuY29udmVyc2F0aW9uQnVpbGRlcihjb252ZXJhdGlvbk9iamVjdClcclxuICogICAudGhlbigoY2xpZW50Q2hhbm5lbEtleTogYW55KSA9PiBjb25zb2xlLmxvZyhcIktvbW11bmljYXRlIGNyZWF0ZSBjb252ZXJzYXRpb24gc3VjY2Vzc2Z1bCB0aGUgY2xpZW50Q2hhbm5lbEtleSBpcyA6IFwiICsgY2xpZW50Q2hhbm5lbEtleSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY29udmVyc2F0aW9uLlwiICsgZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnS29tbXVuaWNhdGUnLFxyXG4gIHBsdWdpbjogJ2tvbW11bmljYXRlLWNvcmRvdmEtcGx1Z2luJyxcclxuICBwbHVnaW5SZWY6ICdrb21tdW5pY2F0ZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Lb21tdW5pY2F0ZS1pby9Lb21tdW5pY2F0ZS1Db3Jkb3ZhLUlvbmljLVBob25lR2FwLUNoYXQtUGx1Z2luJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBLb21tdW5pY2F0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBMb2dpbiB0aGUgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHBhc3NlZCBpblxyXG4gICAqIENyZWF0ZXMgYSBuZXcgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHByb3ZpZGVkIHRoZXJlIGlzIG5vIGV4aXN0aW5nIHVzZXJcclxuICAgKlxyXG4gICAqIHZhciBrbVVzZXIgPSB7XHJcbiAgICogICAgJ3VzZXJJZCcgOiAndXNlcklkJywgICAvL1JlcGxhY2UgaXQgd2l0aCB0aGUgdXNlcklkIG9mIHRoZSBsb2dnZWQgaW4gdXNlclxyXG4gICAqICAgICdwYXNzd29yZCcgOiAncGFzc3dvcmQnLCAgLy9yZXBsYWNlIHdpdGggcGFzc3dvcmRcclxuICAgKiAgICAnYXV0aGVudGljYXRpb25UeXBlSWQnIDogMSxcclxuICAgKiAgICAnaW1hZ2VMaW5rJyA6IDxpbWFnZS1saW5rLWZvci11c2VyPlxyXG4gICAqICAgICdhcHBsaWNhdGlvbklkJyA6ICc8QVBQX0lEPicsICAvL3JlcGxhY2UgdGhpcyB3aXRoIHlvdXIgQVBQX0lEIGZyb20gQXBwbG96aWMgRGFzaGJvYXJkXHJcbiAgICogICAgJ2RldmljZUFwbnNUeXBlJyA6IDAgICAgLy9TZXQgMCBmb3IgRGV2ZWxvcG1lbnQgYW5kIDEgZm9yIERpc3RyaWJ1dGlvbiAoUmVsZWFzZSlcclxuICAgKiB9O1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGttVXNlciB7YW55fSB0aGUgdXNlciBkZXRhaWxzXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsb2dpbihrbVVzZXI6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBmb3IgcHVzaCBub3RpZmljYXRpb25cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJQdXNoTm90aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBhbnkgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90XHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzTG9nZ2VkSW4oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUgdG9rZW4gZm9yIHB1c2ggbm90aWZpY2F0aW9uc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IHRoZSB1c2VyIGRldGFpbHNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVwZGF0ZVB1c2hOb3RpZmljYXRpb25Ub2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExhdW5jaCB0aGUgY29udmVyc2F0aW9uIHNjcmVlbiAoaXQgY29udGFpbnMgYWxsIHRoZSBleGlzdGluZyBjb252ZXJzYXRpb25zKVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsYXVuY2hDb252ZXJzYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExhdW5jaCB0aGUgY29udmVyc2F0aW9uIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuIGNoYW5uZWwoY29udmVyc2F0aW9uKSBrZXlcclxuICAgKlxyXG4gICAqIGxldCBjb252T2JqID0ge1xyXG4gICAqICAgJ2NsaWVudENoYW5uZWxLZXknIDogY2xpZW50Q2hhbm5lbEtleSwgLy9wYXNzIHRoZSBjbGllbnRDaGFubmVsS2V5IGhlcmVcclxuICAgKiAgICd0YWtlT3JkZXInIDogdHJ1ZSAvL3NraXAgY2hhdCBsaXN0IG9uIGJhY2sgcHJlc3MsIHBhc3MgZmFsc2UgaWYgeW91IHdhbnQgdG8gc2hvdyBjaGF0IGxpc3Qgb24gYmFjayBwcmVzc1xyXG4gICAqIH07XHJcbiAgICpcclxuICAgKiBAcGFyYW0gY29udmVyc2F0aW9uT2JqZWN0IHthbnl9IHRoZSBjaGFubmVsIGtleSBhbmQgb3RoZXIgaW5mb3JtYXRpb25cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGxhdW5jaFBhcnRpY3VsYXJDb252ZXJzYXRpb24oY29udmVyc2F0aW9uT2JqZWN0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgYSBuZXcgY29udmVyc2F0aW9uLCBkZXRhaWxzIGFib3V0IHRoZSBjb252ZXJzYXRpb24gdG8gYmUgcGFzc2VkIGFzIHBhcmFtZXRlcnNcclxuICAgKlxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICogQHBhcmFtIGNvbnZlcmF0aW9uUGFyYW1zIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXJ0TmV3Q29udmVyc2F0aW9uKGNvbnZlcnNhdGlvblBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2Nlc3MgcHVzaCBub3RpZmljYXRpb25zXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSB0aGUgdXNlciBkZXRhaWxzXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlL2ZhbHNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcHJvY2Vzc1B1c2hOb3RpZmljYXRpb24oZGF0YTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2dvdXQgdGhlIGN1cnJlbnQgdXNlclxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsb2dvdXQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IGEgc2luZ2xlIGNoYXQgKGNvbnZlcnNhdGlvbilcclxuICAgKlxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICogQHBhcmFtIGRhdGEge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RhcnRTaW5nbGVDaGF0KGRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMYXVuY2hlcyBhIGNvbnZlcnNhdGlvbiB3aXRoIHRoZSBwcm9wZXJ0aWVzIHBhc3NlZCBpbiB0aGUgY29udmVyc2F0aW9uIHBhcmFtXHJcbiAgICpcclxuICAgKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xyXG4gICAqICAgJ2lzVW5pcXVlJyA6IGZhbHNlLFxyXG4gICAqICAgJ2FnZW50SWRzJzpbJzxBR0VOVF9JRD4nXSwgIC8vTGlzdCBvZiBhZ2VudElkcy4gQUdFTlRfSUQgaXMgdGhlIGVtYWlsSUQgdXNlZCB0byBzaWdudXAgb24gS29tbXVuaWNhdGVcclxuICAgKiAgICdib3RJZHMnOiBbJzxCT1RfSUQ+J10gIC8vTGlzdCBvZiBib3RJZHMuIEdvIHRvIE1hbmFnZSBCb3RzKGh0dHBzOi8vZGFzaGJvYXJkLmtvbW11bmljYXRlLmlvL2JvdHMvbWFuYWdlLWJvdHMpIC0+IENvcHkgYm90SURcclxuICAgKiB9O1xyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvbk9iamVjdCB7YW55fSB0aGUgdXNlciBkZXRhaWxzXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjb252ZXJzYXRpb25CdWlsZGVyKGNvbnZlcmF0aW9uT2JqZWN0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=