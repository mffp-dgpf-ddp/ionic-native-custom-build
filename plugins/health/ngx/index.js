import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var Health = /** @class */ (function (_super) {
    __extends(Health, _super);
    function Health() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Health.prototype.isAvailable = function () { return cordova(this, "isAvailable", { "callbackOrder": "reverse" }, arguments); };
    Health.prototype.promptInstallFit = function () { return cordova(this, "promptInstallFit", { "callbackOrder": "reverse" }, arguments); };
    Health.prototype.requestAuthorization = function (datatypes) { return cordova(this, "requestAuthorization", {}, arguments); };
    Health.prototype.isAuthorized = function (datatypes) { return cordova(this, "isAuthorized", {}, arguments); };
    Health.prototype.query = function (queryOptions) { return cordova(this, "query", {}, arguments); };
    Health.prototype.queryAggregated = function (queryOptionsAggregated) { return cordova(this, "queryAggregated", {}, arguments); };
    Health.prototype.store = function (storeOptions) { return cordova(this, "store", {}, arguments); };
    Health.pluginName = "Health";
    Health.plugin = "cordova-plugin-health";
    Health.pluginRef = "navigator.health";
    Health.repo = "https://github.com/dariosalvi78/cordova-plugin-health";
    Health.platforms = ["Android", "iOS"];
    Health = __decorate([
        Injectable()
    ], Health);
    return Health;
}(IonicNativePlugin));
export { Health };
//# sourceMappingURL=data:application/json;base64,