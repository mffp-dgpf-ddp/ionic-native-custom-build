var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HealthOriginal = /** @class */ (function (_super) {
    __extends(HealthOriginal, _super);
    function HealthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HealthOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", { "callbackOrder": "reverse" }, arguments); };
    HealthOriginal.prototype.promptInstallFit = function () { return cordova(this, "promptInstallFit", { "callbackOrder": "reverse" }, arguments); };
    HealthOriginal.prototype.requestAuthorization = function (datatypes) { return cordova(this, "requestAuthorization", {}, arguments); };
    HealthOriginal.prototype.isAuthorized = function (datatypes) { return cordova(this, "isAuthorized", {}, arguments); };
    HealthOriginal.prototype.query = function (queryOptions) { return cordova(this, "query", {}, arguments); };
    HealthOriginal.prototype.queryAggregated = function (queryOptionsAggregated) { return cordova(this, "queryAggregated", {}, arguments); };
    HealthOriginal.prototype.store = function (storeOptions) { return cordova(this, "store", {}, arguments); };
    HealthOriginal.pluginName = "Health";
    HealthOriginal.plugin = "cordova-plugin-health";
    HealthOriginal.pluginRef = "navigator.health";
    HealthOriginal.repo = "https://github.com/dariosalvi78/cordova-plugin-health";
    HealthOriginal.platforms = ["Android", "iOS"];
    return HealthOriginal;
}(IonicNativePlugin));
var Health = new HealthOriginal();
export { Health };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2hlYWx0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnTjVDLDBCQUFpQjs7OztJQVMzQyw0QkFBVztJQWtCWCxpQ0FBZ0I7SUF3QmhCLHFDQUFvQixhQUFDLFNBQXNDO0lBZ0IzRCw2QkFBWSxhQUFDLFNBQXNDO0lBb0NuRCxzQkFBSyxhQUFDLFlBQWdDO0lBMEJ0QyxnQ0FBZSxhQUFDLHNCQUFvRDtJQW1CcEUsc0JBQUssYUFBQyxZQUFnQzs7Ozs7O2lCQXBXeEM7RUFnTjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAaGlkZGVuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aERhdGFUeXBlIHtcclxuICAvKipcclxuICAgKiBSZWFkIG9ubHkgZGF0ZSB0eXBlcyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxyXG4gICAqL1xyXG4gIHJlYWQ/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgb25seSBkYXRlIHR5cGVzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rhcmlvc2Fsdmk3OC9jb3Jkb3ZhLXBsdWdpbi1oZWFsdGgjc3VwcG9ydGVkLWRhdGEtdHlwZXMpXHJcbiAgICovXHJcbiAgd3JpdGU/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoUXVlcnlPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBTdGFydCBkYXRlIGZyb20gd2hpY2ggdG8gZ2V0IGRhdGFcclxuICAgKi9cclxuICBzdGFydERhdGU6IERhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuZCBkYXRlIGZyb20gd2hpY2ggdG8gZ2V0IGRhdGFcclxuICAgKi9cclxuICBlbmREYXRlOiBEYXRlO1xyXG5cclxuICAvKipcclxuICAgKiBEYXRhdHlwZSB0byBiZSBxdWVyaWVkIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rhcmlvc2Fsdmk3OC9jb3Jkb3ZhLXBsdWdpbi1oZWFsdGgjc3VwcG9ydGVkLWRhdGEtdHlwZXMpXHJcbiAgICovXHJcbiAgZGF0YVR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgbGltaXQgdGhlIG51bWJlciBvZiB2YWx1ZXMgcmV0dXJuZWQuIERlZmF1bHRzIHRvIDEwMDBcclxuICAgKi9cclxuICBsaW1pdD86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9uYWwgaW5kaWNhdG9yIHRvIHNvcnQgdmFsdWVzIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nXHJcbiAgICovXHJcbiAgYXNjZW5kaW5nPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW4gQW5kcm9pZCwgaXQgaXMgcG9zc2libGUgdG8gcXVlcnkgZm9yIFwicmF3XCIgc3RlcHMgb3IgdG8gc2VsZWN0IHRob3NlIGFzIGZpbHRlcmVkIGJ5IHRoZSBHb29nbGUgRml0IGFwcC5cclxuICAgKiBJbiB0aGUgbGF0dGVyIGNhc2UgdGhlIHF1ZXJ5IG9iamVjdCBtdXN0IGNvbnRhaW4gdGhlIGZpZWxkIGZpbHRlcmVkOiB0cnVlLlxyXG4gICAqL1xyXG4gIGZpbHRlcmVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoUXVlcnlPcHRpb25zQWdncmVnYXRlZCB7XHJcbiAgLyoqXHJcbiAgICogU3RhcnQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXHJcbiAgICovXHJcbiAgc3RhcnREYXRlOiBEYXRlO1xyXG5cclxuICAvKipcclxuICAgKiBFbmQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXHJcbiAgICovXHJcbiAgZW5kRGF0ZTogRGF0ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGF0YXR5cGUgdG8gYmUgcXVlcmllZCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxyXG4gICAqL1xyXG4gIGRhdGFUeXBlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGlmIHNwZWNpZmllZCwgYWdncmVnYXRpb24gaXMgZ3JvdXBlZCBhbiBhcnJheSBvZiBcImJ1Y2tldHNcIiAod2luZG93cyBvZiB0aW1lKSxcclxuICAgKiBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogJ2hvdXInLCAnZGF5JywgJ3dlZWsnLCAnbW9udGgnLCAneWVhcicuXHJcbiAgICovXHJcbiAgYnVja2V0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBJbiBBbmRyb2lkLCBpdCBpcyBwb3NzaWJsZSB0byBxdWVyeSBmb3IgXCJyYXdcIiBzdGVwcyBvciB0byBzZWxlY3QgdGhvc2UgYXMgZmlsdGVyZWQgYnkgdGhlIEdvb2dsZSBGaXQgYXBwLlxyXG4gICAqIEluIHRoZSBsYXR0ZXIgY2FzZSB0aGUgcXVlcnkgb2JqZWN0IG11c3QgY29udGFpbiB0aGUgZmllbGQgZmlsdGVyZWQ6IHRydWUuXHJcbiAgICovXHJcbiAgZmlsdGVyZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQGhpZGRlblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhTdG9yZU9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IGRhdGUgZnJvbSB3aGljaCB0byBnZXQgZGF0YVxyXG4gICAqL1xyXG4gIHN0YXJ0RGF0ZTogRGF0ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogRW5kIGRhdGUgZnJvbSB3aGljaCB0byBnZXQgZGF0YVxyXG4gICAqL1xyXG4gIGVuZERhdGU6IERhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIERhdGF0eXBlIHRvIGJlIHF1ZXJpZWQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCNzdXBwb3J0ZWQtZGF0YS10eXBlcylcclxuICAgKi9cclxuICBkYXRhVHlwZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBWYWx1ZSBvZiBjb3JyZXNwb25kaW5nIERhdGF0eXBlIChzZWUgXCJPdmVydmlldyBvZiB2YWxpZCBkYXRhdHlwZXNcIilcclxuICAgKi9cclxuICB2YWx1ZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgc291cmNlIHRoYXQgcHJvZHVjZWQgdGhpcyBkYXRhLiBJbiBpT1MgdGhpcyBpcyBpZ25vcmVkIGFuZFxyXG4gICAqIHNldCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBuYW1lIG9mIHlvdXIgYXBwLlxyXG4gICAqL1xyXG4gIHNvdXJjZU5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNvbXBsZXRlIHBhY2thZ2Ugb2YgdGhlIHNvdXJjZSB0aGF0IHByb2R1Y2VkIHRoaXMgZGF0YS5cclxuICAgKiBJbiBBbmRyb2lkLCBpZiBub3Qgc3BlY2lmaWVkLCBpdCdzIGFzc2lnbmVkIHRvIHRoZSBwYWNrYWdlIG9mIHRoZSBBcHAuIEluIGlPUyB0aGlzIGlzIGlnbm9yZWQgYW5kXHJcbiAgICogc2V0IGF1dG9tYXRpY2FsbHkgdG8gdGhlIGJ1bmRlIGlkIG9mIHRoZSBhcHAuXHJcbiAgICovXHJcbiAgc291cmNlQnVuZGxlSWQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoRGF0YSB7XHJcbiAgLyoqXHJcbiAgICogU3RhcnQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXHJcbiAgICovXHJcbiAgc3RhcnREYXRlOiBEYXRlO1xyXG5cclxuICAvKipcclxuICAgKiBFbmQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXHJcbiAgICovXHJcbiAgZW5kRGF0ZTogRGF0ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogVmFsdWUgb2YgY29ycmVzcG9uZGluZyBEYXRhdHlwZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxyXG4gICAqL1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVuaXQgb2YgY29ycmVzcG9uZGluZyB2YWx1ZSBvZiBEYXRhdHlwZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxyXG4gICAqL1xyXG4gIHVuaXQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHNvdXJjZSB0aGF0IHByb2R1Y2VkIHRoaXMgZGF0YS4gSW4gaU9TIHRoaXMgaXMgaWdub3JlZCBhbmRcclxuICAgKiBzZXQgYXV0b21hdGljYWxseSB0byB0aGUgbmFtZSBvZiB5b3VyIGFwcC5cclxuICAgKi9cclxuICBzb3VyY2VOYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBjb21wbGV0ZSBwYWNrYWdlIG9mIHRoZSBzb3VyY2UgdGhhdCBwcm9kdWNlZCB0aGlzIGRhdGEuXHJcbiAgICogSW4gQW5kcm9pZCwgaWYgbm90IHNwZWNpZmllZCwgaXQncyBhc3NpZ25lZCB0byB0aGUgcGFja2FnZSBvZiB0aGUgQXBwLiBJbiBpT1MgdGhpcyBpcyBpZ25vcmVkIGFuZFxyXG4gICAqIHNldCBhdXRvbWF0aWNhbGx5IHRvIHRoZSBidW5kZSBpZCBvZiB0aGUgYXBwLlxyXG4gICAqL1xyXG4gIHNvdXJjZUJ1bmRsZUlkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBIZWFsdGhcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgcGx1Z2luIHRoYXQgYWJzdHJhY3RzIGZpdG5lc3MgYW5kIGhlYWx0aCByZXBvc2l0b3JpZXMgbGlrZSBBcHBsZSBIZWFsdGhLaXQgb3IgR29vZ2xlIEZpdC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSGVhbHRoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9oZWFsdGgvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBoZWFsdGg6IEhlYWx0aCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmhlYWx0aC5pc0F2YWlsYWJsZSgpXHJcbiAqIC50aGVuKChhdmFpbGFibGU6Ym9vbGVhbikgPT4ge1xyXG4gKiAgIGNvbnNvbGUubG9nKGF2YWlsYWJsZSk7XHJcbiAqICAgdGhpcy5oZWFsdGgucmVxdWVzdEF1dGhvcml6YXRpb24oW1xyXG4gKiAgICAgJ2Rpc3RhbmNlJywgJ251dHJpdGlvbicsICAvL3JlYWQgYW5kIHdyaXRlIHBlcm1pc3Npb25zXHJcbiAqICAgICB7XHJcbiAqICAgICAgIHJlYWQ6IFsnc3RlcHMnXSwgICAgICAgLy9yZWFkIG9ubHkgcGVybWlzc2lvblxyXG4gKiAgICAgICB3cml0ZTogWydoZWlnaHQnLCAnd2VpZ2h0J10gIC8vd3JpdGUgb25seSBwZXJtaXNzaW9uXHJcbiAqICAgICB9XHJcbiAqICAgXSlcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XHJcbiAqIH0pXHJcbiAqIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcclxuICpcclxuICogYGBgXHJcbiAqIFNlZSBkZXNjcmlwdGlvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCBmb3IgYSBmdWxsIGxpc3Qgb2YgRGF0YXR5cGVzIGFuZCBzZWUgZXhhbXBsZXMuXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEhlYWx0aFF1ZXJ5T3B0aW9uc1xyXG4gKiBIZWFsdGhRdWVyeU9wdGlvbnNBZ2dyZWdhdGVkXHJcbiAqIEhlYWx0aFN0b3JlT3B0aW9uc1xyXG4gKiBIZWFsdGhEYXRhXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnSGVhbHRoJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1oZWFsdGgnLFxyXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5oZWFsdGgnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEhlYWx0aCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUZWxscyBpZiBlaXRoZXIgR29vZ2xlIEZpdCBvciBIZWFsdGhLaXQgYXJlIGF2YWlsYWJsZS5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgcmVjZW50IEdvb2dsZSBQbGF5IFNlcnZpY2VzIGFuZCBHb29nbGUgRml0IGFyZSBpbnN0YWxsZWQuIElmIHRoZSBwbGF5IHNlcnZpY2VzIGFyZSBub3QgaW5zdGFsbGVkLFxyXG4gICAqIG9yIGFyZSBvYnNvbGV0ZSwgaXQgd2lsbCBzaG93IGEgcG9wLXVwIHN1Z2dlc3RpbmcgdG8gZG93bmxvYWQgdGhlbS4gSWYgR29vZ2xlIEZpdCBpcyBub3QgaW5zdGFsbGVkLFxyXG4gICAqIGl0IHdpbGwgb3BlbiB0aGUgUGxheSBTdG9yZSBhdCB0aGUgbG9jYXRpb24gb2YgdGhlIEdvb2dsZSBGaXQgYXBwLlxyXG4gICAqIFRoZSBwbHVnaW4gZG9lcyBub3Qgd2FpdCB1bnRpbCB0aGUgbWlzc2luZyBwYWNrYWdlcyBhcmUgaW5zdGFsbGVkLCBpdCB3aWxsIHJldHVybiBpbW1lZGlhdGVseS5cclxuICAgKiBJZiBib3RoIFBsYXkgU2VydmljZXMgYW5kIEdvb2dsZSBGaXQgYXJlIGF2YWlsYWJsZSwgdGhpcyBmdW5jdGlvbiBqdXN0IHJldHVybnMgd2l0aG91dCBhbnkgdmlzaWJsZSBlZmZlY3QuXHJcbiAgICpcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIEFuZHJvaWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgcHJvbXB0SW5zdGFsbEZpdCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVxdWVzdHMgcmVhZCBhbmQvb3Igd3JpdGUgYWNjZXNzIHRvIGEgc2V0IG9mIGRhdGEgdHlwZXMuIEl0IGlzIHJlY29tbWVuZGFibGUgdG8gYWx3YXlzIGV4cGxhaW4gd2h5IHRoZSBhcHBcclxuICAgKiBuZWVkcyBhY2Nlc3MgdG8gdGhlIGRhdGEgYmVmb3JlIGFza2luZyB0aGUgdXNlciB0byBhdXRob3JpemUgaXQuXHJcbiAgICogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgdXNpbmcgdGhlIHF1ZXJ5IGFuZCBzdG9yZSBmdW5jdGlvbnMsIGV2ZW4gaWYgdGhlIGF1dGhvcml6YXRpb24gaGFzIGFscmVhZHlcclxuICAgKiBiZWVuIGdpdmVuIGF0IHNvbWUgcG9pbnQgaW4gdGhlIHBhc3QuXHJcbiAgICpcclxuICAgKiBRdWlya3Mgb2YgcmVxdWVzdEF1dGhvcml6YXRpb24oKVxyXG4gICAqXHJcbiAgICogSW4gQW5kcm9pZCwgaXQgd2lsbCB0cnkgdG8gZ2V0IGF1dGhvcml6YXRpb24gZnJvbSB0aGUgR29vZ2xlIEZpdCBBUElzLlxyXG4gICAqIEl0IGlzIG5lY2Vzc2FyeSB0aGF0IHRoZSBhcHAncyBwYWNrYWdlIG5hbWUgYW5kIHRoZSBzaWduaW5nIGtleSBhcmUgcmVnaXN0ZXJlZCBpbiB0aGUgR29vZ2xlIEFQSSBjb25zb2xlLlxyXG4gICAqIEluIEFuZHJvaWQsIGJlIGF3YXJlIHRoYXQgaWYgdGhlIGFjdGl2aXR5IGlzIGRlc3Ryb3llZCAoZS5nLiBhZnRlciBhIHJvdGF0aW9uKSBvciBpcyBwdXQgaW4gYmFja2dyb3VuZCxcclxuICAgKiB0aGUgY29ubmVjdGlvbiB0byBHb29nbGUgRml0IG1heSBiZSBsb3N0IHdpdGhvdXQgYW55IGNhbGxiYWNrLiBHb2luZyB0aHJvdWdoIHRoZSBhdXRob3JpemF0aW9uIHdpbGwgZW5zdXJlIHRoYXRcclxuICAgKiB0aGUgYXBwIGlzIGNvbm5lY3RlZCBhZ2Fpbi5cclxuICAgKiBJbiBBbmRyb2lkIDYgYW5kIG92ZXIsIHRoaXMgZnVuY3Rpb24gd2lsbCBhbHNvIGFzayBmb3Igc29tZSBkeW5hbWljIHBlcm1pc3Npb25zIGlmIG5lZWRlZFxyXG4gICAqIChlLmcuIGluIHRoZSBjYXNlIG9mIFwiZGlzdGFuY2VcIiwgaXQgd2lsbCBuZWVkIGFjY2VzcyB0byBBQ0NFU1NfRklORV9MT0NBVElPTikuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdIHwgSGVhbHRoRGF0YVR5cGVbXX0gZGF0YXR5cGVzIGEgbGlzdCBvZiBkYXRhIHR5cGVzIHlvdSB3YW50IHRvIGJlIGdyYW50ZWQgYWNjZXNzIHRvLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVxdWVzdEF1dGhvcml6YXRpb24oZGF0YXR5cGVzOiAoc3RyaW5nIHwgSGVhbHRoRGF0YVR5cGUpW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIGFwcCBoYXMgYXV0aG9yaXphdGlvbiB0byByZWFkL3dyaXRlIGEgc2V0IG9mIGRhdGF0eXBlcy5cclxuICAgKlxyXG4gICAqIFF1aXJrcyBvZiBpc0F1dGhvcml6ZWQoKVxyXG4gICAqXHJcbiAgICogSW4gaU9TLCB0aGlzIGZ1bmN0aW9uIHdpbGwgb25seSBjaGVjayBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3Igd3JpdGFibGUgZGF0YS5cclxuICAgKiBSZWFkLW9ubHkgZGF0YSB3aWxsIGFsd2F5cyBiZSBjb25zaWRlcmVkIGFzIG5vdCBhdXRob3JpemVkLiBUaGlzIGlzIGFuIGludGVuZGVkIGJlaGF2aW91ciBvZiBIZWFsdGhLaXQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdIHwgSGVhbHRoRGF0YVR5cGVbXX0gZGF0YXR5cGVzIGEgbGlzdCBvZiBkYXRhIHR5cGVzIHlvdSB3YW50IHRvIGNoZWNrIGFjY2VzcyBvZiwgc2FtZSBhcyBpbiByZXF1ZXN0QXV0aG9yaXphdGlvblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgdGhlIGF1dGhvcml6YXRpb24gc3RhdHVzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQXV0aG9yaXplZChkYXRhdHlwZXM6IChzdHJpbmcgfCBIZWFsdGhEYXRhVHlwZSlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhbGwgdGhlIGRhdGEgcG9pbnRzIG9mIGEgY2VydGFpbiBkYXRhIHR5cGUgd2l0aGluIGEgY2VydGFpbiB0aW1lIHdpbmRvdy5cclxuICAgKiBXYXJuaW5nOiBpZiB0aGUgdGltZSBzcGFuIGlzIGJpZywgaXQgY2FuIGdlbmVyYXRlIGxvbmcgYXJyYXlzIVxyXG4gICAqXHJcbiAgICogUXVpcmtzIG9mIHF1ZXJ5KClcclxuICAgKlxyXG4gICAqIEluIGlPUywgdGhlIGFtb3VudCBvZiBkYXRhcG9pbnRzIGlzIGxpbWl0ZWQgdG8gMTAwMCBieSBkZWZhdWx0LlxyXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBieSBhZGRpbmcgYSBsaW1pdDogeHh4IHRvIHlvdXIgcXVlcnkgb2JqZWN0LlxyXG4gICAqIEluIGlPUywgZGF0YXBvaW50cyBhcmUgb3JkZXJlZCBpbiBhbiBkZXNjZW5kaW5nIGZhc2hpb24gKGZyb20gbmV3ZXIgdG8gb2xkZXIpLlxyXG4gICAqIFlvdSBjYW4gcmV2ZXJ0IHRoaXMgYmVoYXZpb3VyIGJ5IGFkZGluZyBhc2NlbmRpbmc6IHRydWUgdG8geW91ciBxdWVyeSBvYmplY3QuXHJcbiAgICogSW4gQW5kcm9pZCwgaXQgaXMgcG9zc2libGUgdG8gcXVlcnkgZm9yIFwicmF3XCIgc3RlcHMgb3IgdG8gc2VsZWN0IHRob3NlIGFzIGZpbHRlcmVkIGJ5IHRoZSBHb29nbGUgRml0IGFwcC5cclxuICAgKiBJbiB0aGUgbGF0dGVyIGNhc2UgdGhlIHF1ZXJ5IG9iamVjdCBtdXN0IGNvbnRhaW4gdGhlIGZpZWxkIGZpbHRlcmVkOiB0cnVlLlxyXG4gICAqIEluIEdvb2dsZSBGaXQsIGNhbG9yaWVzLmJhc2FsIGlzIHJldHVybmVkIGFzIGFuIGF2ZXJhZ2UgcGVyIGRheSwgYW5kIHVzdWFsbHkgaXMgbm90IGF2YWlsYWJsZSBpbiBhbGwgZGF5cy5cclxuICAgKiBJbiBHb29nbGUgRml0LCBjYWxvcmllcy5hY3RpdmUgaXMgY29tcHV0ZWQgYnkgc3VidHJhY3RpbmcgdGhlIGJhc2FsIGNhbG9yaWVzIGZyb20gdGhlIHRvdGFsLlxyXG4gICAqIEFzIGJhc2FsIGVuZXJneSBleHBlbmRpdHVyZSwgYW4gYXZlcmFnZSBpcyBjb21wdXRlZCBmcm9tIHRoZSB3ZWVrIGJlZm9yZSBlbmREYXRlLlxyXG4gICAqIFdoaWxlIEdvb2dsZSBGaXQgY2FsY3VsYXRlcyBiYXNhbCBhbmQgYWN0aXZlIGNhbG9yaWVzIGF1dG9tYXRpY2FsbHksXHJcbiAgICogSGVhbHRoS2l0IG5lZWRzIGFuIGV4cGxpY2l0IGlucHV0IGZyb20gc29tZSBhcHAuXHJcbiAgICogV2hlbiBxdWVyeWluZyBmb3IgYWN0aXZpdGllcywgR29vZ2xlIEZpdCBpcyBhYmxlIHRvIGRldGVybWluZSBzb21lIGFjdGl2aXRpZXMgYXV0b21hdGljYWxseVxyXG4gICAqIChzdGlsbCwgd2Fsa2luZywgcnVubmluZywgYmlraW5nLCBpbiB2ZWhpY2xlKSwgd2hpbGUgSGVhbHRoS2l0IG9ubHkgcmVsaWVzIG9uIHRoZSBpbnB1dCBvZlxyXG4gICAqIHRoZSB1c2VyIG9yIG9mIHNvbWUgZXh0ZXJuYWwgYXBwLlxyXG4gICAqIFdoZW4gcXVlcnlpbmcgZm9yIGFjdGl2aXRpZXMsIGNhbG9yaWVzIGFuZCBkaXN0YW5jZSBhcmUgYWxzbyBwcm92aWRlZCBpbiBIZWFsdGhLaXQgKHVuaXRzIGFyZSBrY2FsIGFuZCBtZXRlcnMpIGFuZFxyXG4gICAqIG5ldmVyIGluIEdvb2dsZSBGaXQuXHJcbiAgICogV2hlbiBxdWVyeWluZyBmb3IgbnV0cml0aW9uLCBHb29nbGUgRml0IGFsd2F5cyByZXR1cm5zIGFsbCB0aGUgbnV0cml0aW9uIGVsZW1lbnRzIGl0IGhhcyxcclxuICAgKiB3aGlsZSBIZWFsdGhLaXQgcmV0dXJucyBvbmx5IHRob3NlIHRoYXQgYXJlIHN0b3JlZCBhcyBjb3JyZWxhdGlvbi4gVG8gYmUgc3VyZSB0byBnZXQgYWxsIHN0b3JlZCB0aGUgcXVhbnRpdGllc1xyXG4gICAqIChyZWdhcmRsZXNzIG9mIHRoZXkgYXJlIHN0b3JlZCBhcyBjb3JyZWxhdGlvbiBvciBub3QpLCBpdCdzIGJldHRlciB0byBxdWVyeSBzaW5nbGUgbnV0cmllbnRzLlxyXG4gICAqIG51dHJpdGlvbi52aXRhbWluX2EgaXMgZ2l2ZW4gaW4gbWljcm9ncmFtcyBpbiBIZWFsdGhLaXQgYW5kIEludGVybmF0aW9uYWwgVW5pdCBpbiBHb29nbGUgRml0LlxyXG4gICAqIEF1dG9tYXRpYyBjb252ZXJzaW9uIGlzIG5vdCB0cml2aWFsIGFuZCBkZXBlbmRzIG9uIHRoZSBhY3R1YWwgc3Vic3RhbmNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIZWFsdGhRdWVyeU9wdGlvbnN9IHF1ZXJ5T3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SGVhbHRoRGF0YVtdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcXVlcnkocXVlcnlPcHRpb25zOiBIZWFsdGhRdWVyeU9wdGlvbnMpOiBQcm9taXNlPEhlYWx0aERhdGFbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhZ2dyZWdhdGVkIGRhdGEgaW4gYSBjZXJ0YWluIHRpbWUgd2luZG93LiBVc3VhbGx5IHRoZSBzdW0gaXMgcmV0dXJuZWQgZm9yIHRoZSBnaXZlbiBxdWFudGl0eS5cclxuICAgKlxyXG4gICAqIFF1aXJrcyBvZiBxdWVyeUFnZ3JlZ2F0ZWQoKVxyXG4gICAqIEluIEFuZHJvaWQsIHRvIHF1ZXJ5IGZvciBzdGVwcyBhcyBmaWx0ZXJlZCBieSB0aGUgR29vZ2xlIEZpdCBhcHAsIHRoZSBmbGFnIGZpbHRlcmVkOlxyXG4gICAqIHRydWUgbXVzdCBiZSBhZGRlZCBpbnRvIHRoZSBxdWVyeSBvYmplY3QuXHJcbiAgICogV2hlbiBxdWVyeWluZyBmb3IgYWN0aXZpdGllcywgY2Fsb3JpZXMgYW5kIGRpc3RhbmNlIGFyZSBwcm92aWRlZFxyXG4gICAqIHdoZW4gYXZhaWxhYmxlIGluIEhlYWx0aEtpdCBhbmQgbmV2ZXIgaW4gR29vZ2xlIEZpdC5cclxuICAgKiBJbiBBbmRyb2lkLCB0aGUgc3RhcnQgYW5kIGVuZCBkYXRlcyByZXR1cm5lZCBhcmUgdGhlIGRhdGUgb2YgdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCBhdmFpbGFibGUgc2FtcGxlcy5cclxuICAgKiBJZiBubyBzYW1wbGVzIGFyZSBmb3VuZCwgc3RhcnQgYW5kIGVuZCBtYXkgbm90IGJlIHNldC5cclxuICAgKiBXaGVuIGJ1Y2tldGluZywgYnVja2V0cyB3aWxsIGluY2x1ZGUgdGhlIHdob2xlIGhvdXIgLyBkYXkgLyBtb250aCAvIHdlZWsgLyB5ZWFyIHdoZXJlIHN0YXJ0IGFuZCBlbmQgdGltZXNcclxuICAgKiBmYWxsIGludG8uIEZvciBleGFtcGxlLCBpZiB5b3VyIHN0YXJ0IHRpbWUgaXMgMjAxNi0xMC0yMSAxMDo1MzozNCxcclxuICAgKiB0aGUgZmlyc3QgZGFpbHkgYnVja2V0IHdpbGwgc3RhcnQgYXQgMjAxNi0xMC0yMSAwMDowMDowMC5cclxuICAgKiBXZWVrcyBzdGFydCBvbiBNb25kYXkuXHJcbiAgICogV2hlbiBxdWVyeWluZyBmb3IgbnV0cml0aW9uLCBIZWFsdGhLaXQgcmV0dXJucyBvbmx5IHRob3NlIHRoYXQgYXJlIHN0b3JlZCBhcyBjb3JyZWxhdGlvbi5cclxuICAgKiBUbyBiZSBzdXJlIHRvIGdldCBhbGwgdGhlIHN0b3JlZCBxdWFudGl0aWVzLCBpdCdzIGJldHRlciB0byBxdWVyeSBzaW5nbGUgbnV0cmllbnRzLlxyXG4gICAqIG51dHJpdGlvbi52aXRhbWluX2EgaXMgZ2l2ZW4gaW4gbWljcm9ncmFtcyBpbiBIZWFsdGhLaXQgYW5kIEludGVybmF0aW9uYWwgVW5pdCBpbiBHb29nbGUgRml0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIZWFsdGhRdWVyeU9wdGlvbnNBZ2dyZWdhdGVkfSBxdWVyeU9wdGlvbnNBZ2dyZWdhdGVkXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxIZWFsdGhEYXRhW10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBxdWVyeUFnZ3JlZ2F0ZWQocXVlcnlPcHRpb25zQWdncmVnYXRlZDogSGVhbHRoUXVlcnlPcHRpb25zQWdncmVnYXRlZCk6IFByb21pc2U8SGVhbHRoRGF0YVtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9yZXMgYSBkYXRhIHBvaW50LlxyXG4gICAqXHJcbiAgICogUXVpcmtzIG9mIHN0b3JlKClcclxuICAgKlxyXG4gICAqIEdvb2dsZSBGaXQgZG9lc24ndCBhbGxvdyB5b3UgdG8gb3ZlcndyaXRlIGRhdGEgcG9pbnRzIHRoYXQgb3ZlcmxhcCB3aXRoIG90aGVycyBhbHJlYWR5IHN0b3JlZCBvZiB0aGUgc2FtZSB0eXBlIChzZWUgaGVyZSkuIEF0IHRoZSBtb21lbnQgdGhlcmUgaXMgbm8gc3VwcG9ydCBmb3IgdXBkYXRlIG5vciBkZWxldGUuXHJcbiAgICogSW4gaU9TIHlvdSBjYW5ub3Qgc3RvcmUgdGhlIHRvdGFsIGNhbG9yaWVzLCB5b3UgbmVlZCB0byBzcGVjaWZ5IGVpdGhlciBiYXNhbCBvciBhY3RpdmUuIElmIHlvdSB1c2UgdG90YWwgY2Fsb3JpZXMsIHRoZSBhY3RpdmUgb25lcyB3aWxsIGJlIHN0b3JlZC5cclxuICAgKiBJbiBBbmRyb2lkIHlvdSBjYW4gb25seSBzdG9yZSBhY3RpdmUgY2Fsb3JpZXMsIGFzIHRoZSBiYXNhbCBhcmUgZXN0aW1hdGVkIGF1dG9tYXRpY2FsbHkuIElmIHlvdSBzdG9yZSB0b3RhbCBjYWxvcmllcywgdGhlc2Ugd2lsbCBiZSB0cmVhdGVkIGFzIGFjdGl2ZS5cclxuICAgKiBJbiBpT1MgZGlzdGFuY2UgaXMgYXNzdW1lZCB0byBiZSBvZiB0eXBlIFdhbGtpbmdSdW5uaW5nLCBpZiB5b3Ugd2FudCB0byBleHBsaWNpdGx5IHNldCBpdCB0byBDeWNsaW5nIHlvdSBuZWVkIHRvIGFkZCB0aGUgZmllbGQgY3ljbGluZzogdHJ1ZS5cclxuICAgKiBJbiBpT1Mgc3RvcmluZyB0aGUgc2xlZXAgYWN0aXZpdGllcyBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoZSBtb21lbnQuXHJcbiAgICogU3RvcmluZyBvZiBudXRyaWVudHMgaXMgbm90IHN1cHBvcnRlZCBhdCB0aGUgbW9tZW50LlxyXG4gICAqIEBwYXJhbSBzdG9yZU9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3JlKHN0b3JlT3B0aW9uczogSGVhbHRoU3RvcmVPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19