var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeGeocoderOriginal = /** @class */ (function (_super) {
    __extends(NativeGeocoderOriginal, _super);
    function NativeGeocoderOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeGeocoderOriginal.prototype.reverseGeocode = function (latitude, longitude, options) { return cordova(this, "reverseGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoderOriginal.prototype.forwardGeocode = function (addressString, options) { return cordova(this, "forwardGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoderOriginal.pluginName = "NativeGeocoder";
    NativeGeocoderOriginal.plugin = "cordova-plugin-nativegeocoder";
    NativeGeocoderOriginal.pluginRef = "nativegeocoder";
    NativeGeocoderOriginal.repo = "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder";
    NativeGeocoderOriginal.platforms = ["iOS", "Android"];
    return NativeGeocoderOriginal;
}(IonicNativePlugin));
var NativeGeocoder = new NativeGeocoderOriginal();
export { NativeGeocoder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS1nZW9jb2Rlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF3Q3BDLGtDQUFpQjs7OztJQVduRCx1Q0FBYyxhQUNaLFFBQWdCLEVBQ2hCLFNBQWlCLEVBQ2pCLE9BQStCO0lBY2pDLHVDQUFjLGFBQUMsYUFBcUIsRUFBRSxPQUErQjs7Ozs7O3lCQXJFdkU7RUF5Q29DLGlCQUFpQjtTQUF4QyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBOYXRpdmUgR2VvY29kZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvcmRvdmEgcGx1Z2luIGZvciBuYXRpdmUgZm9yd2FyZCBhbmQgcmV2ZXJzZSBnZW9jb2RpbmdcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgTmF0aXZlR2VvY29kZXIsIE5hdGl2ZUdlb2NvZGVyUmVzdWx0LCBOYXRpdmVHZW9jb2Rlck9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL25hdGl2ZS1nZW9jb2Rlci9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZUdlb2NvZGVyOiBOYXRpdmVHZW9jb2RlcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBsZXQgb3B0aW9uczogTmF0aXZlR2VvY29kZXJPcHRpb25zID0ge1xyXG4gKiAgICAgdXNlTG9jYWxlOiB0cnVlLFxyXG4gKiAgICAgbWF4UmVzdWx0czogNVxyXG4gKiB9O1xyXG4gKlxyXG4gKiB0aGlzLm5hdGl2ZUdlb2NvZGVyLnJldmVyc2VHZW9jb2RlKDUyLjUwNzIwOTUsIDEzLjE0NTI4MTgsIG9wdGlvbnMpXHJcbiAqICAgLnRoZW4oKHJlc3VsdDogTmF0aXZlR2VvY29kZXJSZXN1bHRbXSkgPT4gY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0WzBdKSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLm5hdGl2ZUdlb2NvZGVyLmZvcndhcmRHZW9jb2RlKCdCZXJsaW4nLCBvcHRpb25zKVxyXG4gKiAgIC50aGVuKChyZXN1bHQ6IE5hdGl2ZUdlb2NvZGVyUmVzdWx0W10pID0+IGNvbnNvbGUubG9nKCdUaGUgY29vcmRpbmF0ZXMgYXJlIGxhdGl0dWRlPScgKyByZXN1bHRbMF0ubGF0aXR1ZGUgKyAnIGFuZCBsb25naXR1ZGU9JyArIHJlc3VsdFswXS5sb25naXR1ZGUpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIE5hdGl2ZUdlb2NvZGVyUmVzdWx0XHJcbiAqIE5hdGl2ZUdlb2NvZGVyT3B0aW9uc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ05hdGl2ZUdlb2NvZGVyJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1uYXRpdmVnZW9jb2RlcicsXHJcbiAgcGx1Z2luUmVmOiAnbmF0aXZlZ2VvY29kZXInLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vc2ViYXN0aWFuYmFhci9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmVnZW9jb2RlcicsXHJcbiAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5hdGl2ZUdlb2NvZGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldmVyc2UgZ2VvY29kZSBhIGdpdmVuIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgdG8gZmluZCBsb2NhdGlvbiBhZGRyZXNzXHJcbiAgICogQHBhcmFtIGxhdGl0dWRlIHtudW1iZXJ9IFRoZSBsYXRpdHVkZVxyXG4gICAqIEBwYXJhbSBsb25naXR1ZGUge251bWJlcn0gVGhlIGxvbmdpdHVkZVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtOYXRpdmVHZW9jb2Rlck9wdGlvbnN9IFRoZSBvcHRpb25zXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxOYXRpdmVHZW9jb2RlclJlc3VsdFtdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICByZXZlcnNlR2VvY29kZShcclxuICAgIGxhdGl0dWRlOiBudW1iZXIsXHJcbiAgICBsb25naXR1ZGU6IG51bWJlcixcclxuICAgIG9wdGlvbnM/OiBOYXRpdmVHZW9jb2Rlck9wdGlvbnNcclxuICApOiBQcm9taXNlPE5hdGl2ZUdlb2NvZGVyUmVzdWx0W10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvcndhcmQgZ2VvY29kZSBhIGdpdmVuIGFkZHJlc3MgdG8gZmluZCBjb29yZGluYXRlc1xyXG4gICAqIEBwYXJhbSBhZGRyZXNzU3RyaW5nIHtzdHJpbmd9IFRoZSBhZGRyZXNzIHRvIGJlIGdlb2NvZGVkXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZUdlb2NvZGVyT3B0aW9uc30gVGhlIG9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE5hdGl2ZUdlb2NvZGVyUmVzdWx0W10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIGZvcndhcmRHZW9jb2RlKGFkZHJlc3NTdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IE5hdGl2ZUdlb2NvZGVyT3B0aW9ucyk6IFByb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEVuY2Fwc3VsYXRlcyBmb3JtYXQgaW5mb3JtYXRpb24gYWJvdXQgYSBnZW9jb2RpbmcgcmVzdWx0LlxyXG4gKiBtb3JlIEluZm86XHJcbiAqICAtIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2NvcmVsb2NhdGlvbi9jbHBsYWNlbWFya1xyXG4gKiAgLSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9yZWZlcmVuY2UvYW5kcm9pZC9sb2NhdGlvbi9BZGRyZXNzLmh0bWxcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlR2VvY29kZXJSZXN1bHQge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsYXRpdHVkZS5cclxuICAgKi9cclxuICBsYXRpdHVkZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb25naXR1ZGUuXHJcbiAgICovXHJcbiAgbG9uZ2l0dWRlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvdW50cnkgY29kZS5cclxuICAgKi9cclxuICBjb3VudHJ5Q29kZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb3VudHJ5IG5hbWUuXHJcbiAgICovXHJcbiAgY291bnRyeU5hbWU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgcG9zdGFsIGNvZGUuXHJcbiAgICovXHJcbiAgcG9zdGFsQ29kZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhZG1pbmlzdHJhdGl2ZUFyZWEuXHJcbiAgICovXHJcbiAgYWRtaW5pc3RyYXRpdmVBcmVhOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN1YkFkbWluaXN0cmF0aXZlQXJlYS5cclxuICAgKi9cclxuICBzdWJBZG1pbmlzdHJhdGl2ZUFyZWE6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgbG9jYWxpdHkuXHJcbiAgICovXHJcbiAgbG9jYWxpdHk6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgc3ViTG9jYWxpdHkuXHJcbiAgICovXHJcbiAgc3ViTG9jYWxpdHk6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgdGhvcm91Z2hmYXJlLlxyXG4gICAqL1xyXG4gIHRob3JvdWdoZmFyZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdWJUaG9yb3VnaGZhcmUuXHJcbiAgICovXHJcbiAgc3ViVGhvcm91Z2hmYXJlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFyZWFzT2ZJbnRlcmVzdFxyXG4gICAqL1xyXG4gIGFyZWFzT2ZJbnRlcmVzdDogc3RyaW5nW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGZvciByZXZlcnNlIGFuZCBmb3J3YXJkIGdlb2NvZGluZy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlR2VvY29kZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBUaGUgbG9jYWxlIHRvIHVzZSB3aGVuIHJldHVybmluZyB0aGUgYWRkcmVzcyBpbmZvcm1hdGlvbi5cclxuICAgKiBJZiBzZXQgdG8gJ2ZhbHNlJyB0aGUgbG9jYWxlIHdpbGwgYWx3YXlzIGJlICdlbl9VUycuXHJcbiAgICogRGVmYXVsdCBpcyAndHJ1ZSdcclxuICAgKi9cclxuICB1c2VMb2NhbGU6IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlZmF1bHQgbG9jYWxlIHRvIHVzZSB3aGVuIHJldHVybmluZyB0aGUgYWRkcmVzcyBpbmZvcm1hdGlvbi5cclxuICAgKiBlLmcuOiAnZmEtSVInIG9yICdkZV9ERScuXHJcbiAgICovXHJcbiAgZGVmYXVsdExvY2FsZT86IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0IHRvIHJldHVybiAobWF4IGlzIDUpLlxyXG4gICAqIERlZmF1bHQgaXMgMVxyXG4gICAqL1xyXG4gIG1heFJlc3VsdHM6IG51bWJlcjtcclxufVxyXG4iXX0=