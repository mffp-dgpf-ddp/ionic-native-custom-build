import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeGeocoder = /** @class */ (function (_super) {
    __extends(NativeGeocoder, _super);
    function NativeGeocoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeGeocoder.prototype.reverseGeocode = function (latitude, longitude, options) { return cordova(this, "reverseGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.prototype.forwardGeocode = function (addressString, options) { return cordova(this, "forwardGeocode", { "callbackOrder": "reverse" }, arguments); };
    NativeGeocoder.pluginName = "NativeGeocoder";
    NativeGeocoder.plugin = "cordova-plugin-nativegeocoder";
    NativeGeocoder.pluginRef = "nativegeocoder";
    NativeGeocoder.repo = "https://github.com/sebastianbaar/cordova-plugin-nativegeocoder";
    NativeGeocoder.platforms = ["iOS", "Android"];
    NativeGeocoder = __decorate([
        Injectable()
    ], NativeGeocoder);
    return NativeGeocoder;
}(IonicNativePlugin));
export { NativeGeocoder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS1nZW9jb2Rlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF3Q3BDLGtDQUFpQjs7OztJQVduRCx1Q0FBYyxhQUNaLFFBQWdCLEVBQ2hCLFNBQWlCLEVBQ2pCLE9BQStCO0lBY2pDLHVDQUFjLGFBQUMsYUFBcUIsRUFBRSxPQUErQjs7Ozs7O0lBNUIxRCxjQUFjO1FBRDFCLFVBQVUsRUFBRTtPQUNBLGNBQWM7eUJBekMzQjtFQXlDb0MsaUJBQWlCO1NBQXhDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIE5hdGl2ZSBHZW9jb2RlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIG5hdGl2ZSBmb3J3YXJkIGFuZCByZXZlcnNlIGdlb2NvZGluZ1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBOYXRpdmVHZW9jb2RlciwgTmF0aXZlR2VvY29kZXJSZXN1bHQsIE5hdGl2ZUdlb2NvZGVyT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmF0aXZlLWdlb2NvZGVyL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmF0aXZlR2VvY29kZXI6IE5hdGl2ZUdlb2NvZGVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGxldCBvcHRpb25zOiBOYXRpdmVHZW9jb2Rlck9wdGlvbnMgPSB7XHJcbiAqICAgICB1c2VMb2NhbGU6IHRydWUsXHJcbiAqICAgICBtYXhSZXN1bHRzOiA1XHJcbiAqIH07XHJcbiAqXHJcbiAqIHRoaXMubmF0aXZlR2VvY29kZXIucmV2ZXJzZUdlb2NvZGUoNTIuNTA3MjA5NSwgMTMuMTQ1MjgxOCwgb3B0aW9ucylcclxuICogICAudGhlbigocmVzdWx0OiBOYXRpdmVHZW9jb2RlclJlc3VsdFtdKSA9PiBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHRbMF0pKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMubmF0aXZlR2VvY29kZXIuZm9yd2FyZEdlb2NvZGUoJ0JlcmxpbicsIG9wdGlvbnMpXHJcbiAqICAgLnRoZW4oKHJlc3VsdDogTmF0aXZlR2VvY29kZXJSZXN1bHRbXSkgPT4gY29uc29sZS5sb2coJ1RoZSBjb29yZGluYXRlcyBhcmUgbGF0aXR1ZGU9JyArIHJlc3VsdFswXS5sYXRpdHVkZSArICcgYW5kIGxvbmdpdHVkZT0nICsgcmVzdWx0WzBdLmxvbmdpdHVkZSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogTmF0aXZlR2VvY29kZXJSZXN1bHRcclxuICogTmF0aXZlR2VvY29kZXJPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTmF0aXZlR2VvY29kZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5hdGl2ZWdlb2NvZGVyJyxcclxuICBwbHVnaW5SZWY6ICduYXRpdmVnZW9jb2RlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zZWJhc3RpYW5iYWFyL2NvcmRvdmEtcGx1Z2luLW5hdGl2ZWdlb2NvZGVyJyxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmF0aXZlR2VvY29kZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogUmV2ZXJzZSBnZW9jb2RlIGEgZ2l2ZW4gbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSB0byBmaW5kIGxvY2F0aW9uIGFkZHJlc3NcclxuICAgKiBAcGFyYW0gbGF0aXR1ZGUge251bWJlcn0gVGhlIGxhdGl0dWRlXHJcbiAgICogQHBhcmFtIGxvbmdpdHVkZSB7bnVtYmVyfSBUaGUgbG9uZ2l0dWRlXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge05hdGl2ZUdlb2NvZGVyT3B0aW9uc30gVGhlIG9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE5hdGl2ZUdlb2NvZGVyUmVzdWx0W10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHJldmVyc2VHZW9jb2RlKFxyXG4gICAgbGF0aXR1ZGU6IG51bWJlcixcclxuICAgIGxvbmdpdHVkZTogbnVtYmVyLFxyXG4gICAgb3B0aW9ucz86IE5hdGl2ZUdlb2NvZGVyT3B0aW9uc1xyXG4gICk6IFByb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yd2FyZCBnZW9jb2RlIGEgZ2l2ZW4gYWRkcmVzcyB0byBmaW5kIGNvb3JkaW5hdGVzXHJcbiAgICogQHBhcmFtIGFkZHJlc3NTdHJpbmcge3N0cmluZ30gVGhlIGFkZHJlc3MgdG8gYmUgZ2VvY29kZWRcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TmF0aXZlR2VvY29kZXJPcHRpb25zfSBUaGUgb3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8TmF0aXZlR2VvY29kZXJSZXN1bHRbXT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgZm9yd2FyZEdlb2NvZGUoYWRkcmVzc1N0cmluZzogc3RyaW5nLCBvcHRpb25zPzogTmF0aXZlR2VvY29kZXJPcHRpb25zKTogUHJvbWlzZTxOYXRpdmVHZW9jb2RlclJlc3VsdFtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogRW5jYXBzdWxhdGVzIGZvcm1hdCBpbmZvcm1hdGlvbiBhYm91dCBhIGdlb2NvZGluZyByZXN1bHQuXHJcbiAqIG1vcmUgSW5mbzpcclxuICogIC0gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vY29yZWxvY2F0aW9uL2NscGxhY2VtYXJrXHJcbiAqICAtIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL2xvY2F0aW9uL0FkZHJlc3MuaHRtbFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVHZW9jb2RlclJlc3VsdCB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxhdGl0dWRlLlxyXG4gICAqL1xyXG4gIGxhdGl0dWRlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxvbmdpdHVkZS5cclxuICAgKi9cclxuICBsb25naXR1ZGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY291bnRyeSBjb2RlLlxyXG4gICAqL1xyXG4gIGNvdW50cnlDb2RlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNvdW50cnkgbmFtZS5cclxuICAgKi9cclxuICBjb3VudHJ5TmFtZTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBwb3N0YWwgY29kZS5cclxuICAgKi9cclxuICBwb3N0YWxDb2RlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGFkbWluaXN0cmF0aXZlQXJlYS5cclxuICAgKi9cclxuICBhZG1pbmlzdHJhdGl2ZUFyZWE6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgc3ViQWRtaW5pc3RyYXRpdmVBcmVhLlxyXG4gICAqL1xyXG4gIHN1YkFkbWluaXN0cmF0aXZlQXJlYTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb2NhbGl0eS5cclxuICAgKi9cclxuICBsb2NhbGl0eTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBzdWJMb2NhbGl0eS5cclxuICAgKi9cclxuICBzdWJMb2NhbGl0eTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aG9yb3VnaGZhcmUuXHJcbiAgICovXHJcbiAgdGhvcm91Z2hmYXJlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHN1YlRob3JvdWdoZmFyZS5cclxuICAgKi9cclxuICBzdWJUaG9yb3VnaGZhcmU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgYXJlYXNPZkludGVyZXN0XHJcbiAgICovXHJcbiAgYXJlYXNPZkludGVyZXN0OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgZm9yIHJldmVyc2UgYW5kIGZvcndhcmQgZ2VvY29kaW5nLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVHZW9jb2Rlck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsb2NhbGUgdG8gdXNlIHdoZW4gcmV0dXJuaW5nIHRoZSBhZGRyZXNzIGluZm9ybWF0aW9uLlxyXG4gICAqIElmIHNldCB0byAnZmFsc2UnIHRoZSBsb2NhbGUgd2lsbCBhbHdheXMgYmUgJ2VuX1VTJy5cclxuICAgKiBEZWZhdWx0IGlzICd0cnVlJ1xyXG4gICAqL1xyXG4gIHVzZUxvY2FsZTogYm9vbGVhbjtcclxuICAvKipcclxuICAgKiBUaGUgZGVmYXVsdCBsb2NhbGUgdG8gdXNlIHdoZW4gcmV0dXJuaW5nIHRoZSBhZGRyZXNzIGluZm9ybWF0aW9uLlxyXG4gICAqIGUuZy46ICdmYS1JUicgb3IgJ2RlX0RFJy5cclxuICAgKi9cclxuICBkZWZhdWx0TG9jYWxlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHQgdG8gcmV0dXJuIChtYXggaXMgNSkuXHJcbiAgICogRGVmYXVsdCBpcyAxXHJcbiAgICovXHJcbiAgbWF4UmVzdWx0czogbnVtYmVyO1xyXG59XHJcbiJdfQ==