import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeviceOrientation = /** @class */ (function (_super) {
    __extends(DeviceOrientation, _super);
    function DeviceOrientation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceOrientation.prototype.getCurrentHeading = function () { return cordova(this, "getCurrentHeading", {}, arguments); };
    DeviceOrientation.prototype.watchHeading = function (options) { return cordova(this, "watchHeading", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceOrientation.pluginName = "DeviceOrientation";
    DeviceOrientation.plugin = "cordova-plugin-device-orientation";
    DeviceOrientation.pluginRef = "navigator.compass";
    DeviceOrientation.repo = "https://github.com/apache/cordova-plugin-device-orientation";
    DeviceOrientation.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone"];
    DeviceOrientation = __decorate([
        Injectable()
    ], DeviceOrientation);
    return DeviceOrientation;
}(IonicNativePlugin));
export { DeviceOrientation };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1vcmllbnRhdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXVGSyxxQ0FBaUI7Ozs7SUFNdEQsNkNBQWlCO0lBZ0JqQix3Q0FBWSxhQUFDLE9BQXlDOzs7Ozs7SUF0QjNDLGlCQUFpQjtRQUQ3QixVQUFVLEVBQUU7T0FDQSxpQkFBaUI7NEJBekY5QjtFQXlGdUMsaUJBQWlCO1NBQTNDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGhlYWRpbmcgaW4gZGVncmVlcyBmcm9tIDAtMzU5Ljk5IGF0IGEgc2luZ2xlIG1vbWVudCBpbiB0aW1lLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIG1hZ25ldGljSGVhZGluZzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgaGVhZGluZyByZWxhdGl2ZSB0byB0aGUgZ2VvZ3JhcGhpYyBOb3J0aCBQb2xlIGluIGRlZ3JlZXMgMC0zNTkuOTkgYXQgYSBzaW5nbGUgbW9tZW50IGluIHRpbWUuIEEgbmVnYXRpdmUgdmFsdWUgaW5kaWNhdGVzIHRoYXQgdGhlIHRydWUgaGVhZGluZyBjYW4ndCBiZSBkZXRlcm1pbmVkLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIHRydWVIZWFkaW5nOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXZpYXRpb24gaW4gZGVncmVlcyBiZXR3ZWVuIHRoZSByZXBvcnRlZCBoZWFkaW5nIGFuZCB0aGUgdHJ1ZSBoZWFkaW5nLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIGhlYWRpbmdBY2N1cmFjeTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgdGltZSBhdCB3aGljaCB0aGlzIGhlYWRpbmcgd2FzIGRldGVybWluZWQuIChET01UaW1lU3RhbXApXHJcbiAgICovXHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogSG93IG9mdGVuIHRvIHJldHJpZXZlIHRoZSBjb21wYXNzIGhlYWRpbmcgaW4gbWlsbGlzZWNvbmRzLiAoTnVtYmVyKSAoRGVmYXVsdDogMTAwKVxyXG4gICAqL1xyXG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGNoYW5nZSBpbiBkZWdyZWVzIHJlcXVpcmVkIHRvIGluaXRpYXRlIGEgd2F0Y2hIZWFkaW5nIHN1Y2Nlc3MgY2FsbGJhY2suIFdoZW4gdGhpcyB2YWx1ZSBpcyBzZXQsIGZyZXF1ZW5jeSBpcyBpZ25vcmVkLiAoTnVtYmVyKVxyXG4gICAqL1xyXG4gIGZpbHRlcj86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERldmljZSBPcmllbnRhdGlvblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb25gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGV2aWNlIE9yaWVudGF0aW9uIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogLy8gRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZyBpcyBhbiBpbnRlcmZhY2UgZm9yIGNvbXBhc3NcclxuICogaW1wb3J0IHsgRGV2aWNlT3JpZW50YXRpb24sIERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2RldmljZS1vcmllbnRhdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRldmljZU9yaWVudGF0aW9uOiBEZXZpY2VPcmllbnRhdGlvbikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyBHZXQgdGhlIGRldmljZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZ1xyXG4gKiB0aGlzLmRldmljZU9yaWVudGF0aW9uLmdldEN1cnJlbnRIZWFkaW5nKCkudGhlbihcclxuICogICAoZGF0YTogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzSGVhZGluZykgPT4gY29uc29sZS5sb2coZGF0YSksXHJcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBXYXRjaCB0aGUgZGV2aWNlIGNvbXBhc3MgaGVhZGluZyBjaGFuZ2VcclxuICogdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuZGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKCkuc3Vic2NyaWJlKFxyXG4gKiAgIChkYXRhOiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBTdG9wIHdhdGNoaW5nIGhlYWRpbmcgY2hhbmdlXHJcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogRGV2aWNlT3JpZW50YXRpb25Db21wYXNzT3B0aW9uc1xyXG4gKiBEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRGV2aWNlT3JpZW50YXRpb24nLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXHJcbiAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLmNvbXBhc3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXHJcbiAgcGxhdGZvcm1zOiBbXHJcbiAgICAnQW1hem9uIEZpcmUgT1MnLFxyXG4gICAgJ0FuZHJvaWQnLFxyXG4gICAgJ0JsYWNrQmVycnkgMTAnLFxyXG4gICAgJ0Jyb3dzZXInLFxyXG4gICAgJ0ZpcmVmb3ggT1MnLFxyXG4gICAgJ2lPUycsXHJcbiAgICAnVGl6ZW4nLFxyXG4gICAgJ1VidW50dScsXHJcbiAgICAnV2luZG93cycsXHJcbiAgICAnV2luZG93cyBQaG9uZScsXHJcbiAgXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGV2aWNlT3JpZW50YXRpb24gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Q3VycmVudEhlYWRpbmcoKTogUHJvbWlzZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGRldmljZSBjdXJyZW50IGhlYWRpbmcgYXQgYSByZWd1bGFyIGludGVydmFsXHJcbiAgICpcclxuICAgKiBTdG9wIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGVcclxuICAgKiBAcGFyYW0ge0RldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBjb21wYXNzLiBGcmVxdWVuY3kgYW5kIEZpbHRlci4gT3B0aW9uYWxcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZXZpY2VPcmllbnRhdGlvbkNvbXBhc3NIZWFkaW5nPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgY29udGFpbnMgdGhlIGNvbXBhc3MgaGVhZGluZ1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnY2xlYXJXYXRjaCcsXHJcbiAgfSlcclxuICB3YXRjaEhlYWRpbmcob3B0aW9ucz86IERldmljZU9yaWVudGF0aW9uQ29tcGFzc09wdGlvbnMpOiBPYnNlcnZhYmxlPERldmljZU9yaWVudGF0aW9uQ29tcGFzc0hlYWRpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19