import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SSHConnect = /** @class */ (function (_super) {
    __extends(SSHConnect, _super);
    function SSHConnect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SSHConnect.prototype.connect = function (user, password, host, port) { return cordova(this, "connect", {}, arguments); };
    SSHConnect.prototype.executeCommand = function (command) { return cordova(this, "executeCommand", {}, arguments); };
    SSHConnect.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    SSHConnect.pluginName = "SSHConnect";
    SSHConnect.plugin = "cordova-plugin-ssh-connect";
    SSHConnect.pluginRef = "cordova.plugins.sshConnect";
    SSHConnect.repo = "https://github.com/JosePerez27/cordova-plugin-ssh-connect";
    SSHConnect.platforms = ["Android"];
    SSHConnect = __decorate([
        Injectable()
    ], SSHConnect);
    return SSHConnect;
}(IonicNativePlugin));
export { SSHConnect };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NzaC1jb25uZWN0L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXVDeEMsOEJBQWlCOzs7O0lBVS9DLDRCQUFPLGFBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsSUFBWSxFQUFFLElBQVk7SUFVbEUsbUNBQWMsYUFBQyxPQUFlO0lBUzlCLCtCQUFVOzs7Ozs7SUE3QkMsVUFBVTtRQUR0QixVQUFVLEVBQUU7T0FDQSxVQUFVO3FCQXhDdkI7RUF3Q2dDLGlCQUFpQjtTQUFwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTU0ggQ29ubmVjdFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gdG8gbWFrZSBjb25uZWN0aW9ucyBhbmQgZXhlY3V0ZSBjb21tYW5kcyB0aHJvdWdoIFNTSFxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTU0hDb25uZWN0IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zc2gtY29ubmVjdC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNzaENvbm5lY3Q6IFNTSENvbm5lY3QpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5zc2hDb25uZWN0LmNvbm5lY3QoJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsIHBvcnQpXHJcbiAqICAgLnRoZW4ocmVzcCA9PiBjb25zb2xlLmxvZyhyZXNwKSlcclxuICogICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiB0aGlzLnNzaENvbm5lY3QuZXhlY3V0ZUNvbW1hbmQoJ2NvbW1hbmQnKVxyXG4gKiAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXHJcbiAqICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5zc2hDb25uZWN0LmRpc2Nvbm5lY3QoKVxyXG4gKiAgIC50aGVuKHJlc3AgPT4gY29uc29sZS5sb2cocmVzcCkpXHJcbiAqICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnU1NIQ29ubmVjdCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3NoLWNvbm5lY3QnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5zc2hDb25uZWN0JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0pvc2VQZXJlejI3L2NvcmRvdmEtcGx1Z2luLXNzaC1jb25uZWN0JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTU0hDb25uZWN0IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEVzdGFibGlzaCBhIHJlbW90ZSBzc2ggY29ubmVjdGlvblxyXG4gICAqIEBwYXJhbSB7dXNlcn0gdXNlciAgVGhlIHJlbW90ZSBob3N0IHVzZXJcclxuICAgKiBAcGFyYW0ge3Bhc3N3b3JkfSBwYXNzd29yZCAgVGhlIHJlbW90ZSBob3N0IHBhc3N3b3JkXHJcbiAgICogQHBhcmFtIHtob3N0fSBob3N0ICBUaGUgcmVtb3RlIGRldmljZSB0byBjb25uZWN0XHJcbiAgICogQHBhcmFtIHtwb3J0fSBwb3J0ICBUaGUgU1NIIHBvcnQgZm9yIGNvbm5lY3Rpb24gKHVzdWFsbHkgcG9ydCAyMilcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYW4gcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHN1Y2Nlc3Mgb2YgdGhlIGNvbm5lY3Rpb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY29ubmVjdCh1c2VyOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIGhvc3Q6IHN0cmluZywgcG9ydDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4ZWN1dGUgYSBjb21tYW5kIG9uIHRoZSByZW1vdGUgaG9zdCBjb25uZWN0ZWQgYnkgc3NoXHJcbiAgICogQHBhcmFtIHtjb21tYW5kfSBjb21tYW5kICBUaGUgY29tbWFuZCB0byBleGVjdXRlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGFuIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBwcmludGVkIHRleHQgb24gdGhlIHJlbW90ZSBjb25zb2xlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNjb25uZWN0IHRoZSBTU0ggc2Vzc2lvblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhbiBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc3VjY2VzcyBvZiB0aGUgZGlzY29ubmVjdGlvblxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==