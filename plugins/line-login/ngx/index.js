import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LineLogin = /** @class */ (function (_super) {
    __extends(LineLogin, _super);
    function LineLogin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineLogin.prototype.initialize = function (param) { return cordova(this, "initialize", {}, arguments); };
    LineLogin.prototype.login = function () { return cordova(this, "login", {}, arguments); };
    LineLogin.prototype.loginWeb = function () { return cordova(this, "loginWeb", {}, arguments); };
    LineLogin.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    LineLogin.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    LineLogin.prototype.verifyAccessToken = function () { return cordova(this, "verifyAccessToken", {}, arguments); };
    LineLogin.prototype.refreshAccessToken = function () { return cordova(this, "refreshAccessToken", {}, arguments); };
    LineLogin.pluginName = "LineLogin";
    LineLogin.plugin = "cordova-line-login-plugin";
    LineLogin.pluginRef = "lineLogin";
    LineLogin.repo = "https://github.com/nrikiji/cordova-line-login-plugin";
    LineLogin.install = "ionic cordova plugin add https://github.com/nrikiji/cordova-line-login-plugin.git --variable LINE_CHANNEL_ID=\"your_line_channel_id\"";
    LineLogin.installVariables = ["LINE_CHANNEL_ID"];
    LineLogin.platforms = ["Android", "iOS"];
    LineLogin = __decorate([
        Injectable()
    ], LineLogin);
    return LineLogin;
}(IonicNativePlugin));
export { LineLogin };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xpbmUtbG9naW4vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBbUZ6Qyw2QkFBaUI7Ozs7SUFPOUMsOEJBQVUsYUFBQyxLQUFzQjtJQVNqQyx5QkFBSztJQVVMLDRCQUFRO0lBU1IsMEJBQU07SUFTTixrQ0FBYztJQVNkLHFDQUFpQjtJQVNqQixzQ0FBa0I7Ozs7Ozs7O0lBOURQLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUztvQkFwRnRCO0VBb0YrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpbmVMb2dpblBhcmFtcyB7XHJcbiAgLyoqXHJcbiAgICogTGluZSBDaGFubmVsIElEXHJcbiAgICovXHJcbiAgY2hhbm5lbF9pZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpbmVMb2dpblByb2ZpbGUge1xyXG4gIC8qKlxyXG4gICAqIExpbmUgVXNlciBJRFxyXG4gICAqL1xyXG4gIHVzZXJJRDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMaW5lIFByb2ZpbGUgSW1hZ2UgVVJMXHJcbiAgICovXHJcbiAgcGljdHVyZVVSTDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMaW5lIFByb2ZpbGUgTmFtZVxyXG4gICAqL1xyXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtYWlsXHJcbiAgICovXHJcbiAgZW1haWw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGluZUxvZ2luQWNjZXNzVG9rZW4ge1xyXG4gIC8qKlxyXG4gICAqIExpbmUgQWNjZXNzIFRva2VuXHJcbiAgICovXHJcbiAgYWNjZXNzVG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTGluZSBBY2Nlc3MgVG9rZW4gRXhwaXJlIFRpbWVcclxuICAgKi9cclxuICBleHBpcmVUaW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBMaW5lIExvZ2luXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgZnVuY3Rpb24gbG9naW4sIGxvZ3Mgb3V0LCBhY3F1aXJlcywgdmVyaWZpZXMsIGFuZCByZWZyZXNoZXMgdGhlIGFjY2VzcyB0b2tlbi4gVGhlIHZlcnNpb24gb2YgTGluZVNESyB5b3UgYXJlIHVzaW5nIGlzIGFzIGZvbGxvd3MuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IExpbmVMb2dpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbGluZS1sb2dpbi9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpbmVMb2dpbjogTGluZUxvZ2luKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMubGluZUxvZ2luLmluaXRpYWxpemUoeyBjaGFubmVsX2lkOiBcInh4eHh4eHh4eHhcIiB9KVxyXG4gKlxyXG4gKiB0aGlzLmxpbmVMb2dpbi5sb2dpbigpXHJcbiAqICAgLnRoZW4ocmVzdWx0ID0+IGNvbnNvbGUubG9nKHJlc3VsdCkpXHJcbiAqICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSlcclxuICpcclxuICogYGBgXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIExpbmVMb2dpblBhcmFtc1xyXG4gKiBMaW5lTG9naW5Qcm9maWxlXHJcbiAqIExpbmVMb2dpbkFjY2Vzc1Rva2VuXHJcbiAqXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTGluZUxvZ2luJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLWxpbmUtbG9naW4tcGx1Z2luJyxcclxuICBwbHVnaW5SZWY6ICdsaW5lTG9naW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbnJpa2lqaS9jb3Jkb3ZhLWxpbmUtbG9naW4tcGx1Z2luJyxcclxuICBpbnN0YWxsOlxyXG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBodHRwczovL2dpdGh1Yi5jb20vbnJpa2lqaS9jb3Jkb3ZhLWxpbmUtbG9naW4tcGx1Z2luLmdpdCAtLXZhcmlhYmxlIExJTkVfQ0hBTk5FTF9JRD1cInlvdXJfbGluZV9jaGFubmVsX2lkXCInLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnTElORV9DSEFOTkVMX0lEJ10sXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExpbmVMb2dpbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplXHJcbiAgICogQHBhcmFtIHBhcmFtIExpbmVMb2dpblBhcmFtc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdGlhbGl6ZShwYXJhbTogTGluZUxvZ2luUGFyYW1zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvZ2luXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxMaW5lTG9naW5Qcm9maWxlPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbG9naW4oKTogUHJvbWlzZTxMaW5lTG9naW5Qcm9maWxlPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2dpbiB3aXRoIFdlYlxyXG4gICAqIChpT1Mgb25seSlcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBsb2dpbldlYigpOiBQcm9taXNlPExpbmVMb2dpblByb2ZpbGU+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvZ291dFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgQWNjZXNzIFRva2VuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxMaW5lTG9naW5BY2Nlc3NUb2tlbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEFjY2Vzc1Rva2VuKCk6IFByb21pc2U8TGluZUxvZ2luQWNjZXNzVG9rZW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZlcmlmeSBBY2Nlc3NUb2tlblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmVyaWZ5QWNjZXNzVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZnJlc2ggQWNjZXNzIFRva2VuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWZyZXNoQWNjZXNzVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19