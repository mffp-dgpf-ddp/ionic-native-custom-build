import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var GoogleAnalytics = /** @class */ (function (_super) {
    __extends(GoogleAnalytics, _super);
    function GoogleAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoogleAnalytics.prototype.startTrackerWithId = function (id, interval) { return cordova(this, "startTrackerWithId", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    GoogleAnalytics.prototype.setAllowIDFACollection = function (allow) { return cordova(this, "setAllowIDFACollection", {}, arguments); };
    GoogleAnalytics.prototype.setUserId = function (id) { return cordova(this, "setUserId", {}, arguments); };
    GoogleAnalytics.prototype.setAnonymizeIp = function (anonymize) { return cordova(this, "setAnonymizeIp", {}, arguments); };
    GoogleAnalytics.prototype.setAppVersion = function (appVersion) { return cordova(this, "setAppVersion", {}, arguments); };
    GoogleAnalytics.prototype.getVar = function (key) { return cordova(this, "getVar", {}, arguments); };
    GoogleAnalytics.prototype.setVar = function (key, value) { return cordova(this, "setVar", {}, arguments); };
    GoogleAnalytics.prototype.setOptOut = function (optout) { return cordova(this, "setOptOut", {}, arguments); };
    GoogleAnalytics.prototype.debugMode = function () { return cordova(this, "debugMode", {}, arguments); };
    GoogleAnalytics.prototype.trackMetric = function (key, value) { return cordova(this, "trackMetric", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    GoogleAnalytics.prototype.trackView = function (title, campaignUrl, newSession) { return cordova(this, "trackView", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    GoogleAnalytics.prototype.addCustomDimension = function (key, value) { return cordova(this, "addCustomDimension", {}, arguments); };
    GoogleAnalytics.prototype.trackEvent = function (category, action, label, value, newSession) { return cordova(this, "trackEvent", { "successIndex": 5, "errorIndex": 6 }, arguments); };
    GoogleAnalytics.prototype.trackException = function (description, fatal) { return cordova(this, "trackException", {}, arguments); };
    GoogleAnalytics.prototype.trackTiming = function (category, intervalInMilliseconds, variable, label) { return cordova(this, "trackTiming", {}, arguments); };
    GoogleAnalytics.prototype.addTransaction = function (id, affiliation, revenue, tax, shipping, currencyCode) { return cordova(this, "addTransaction", {}, arguments); };
    GoogleAnalytics.prototype.addTransactionItem = function (id, name, sku, category, price, quantity, currencyCode) { return cordova(this, "addTransactionItem", {}, arguments); };
    GoogleAnalytics.prototype.enableUncaughtExceptionReporting = function (shouldEnable) { return cordova(this, "enableUncaughtExceptionReporting", {}, arguments); };
    GoogleAnalytics.prototype.dispatch = function () { return cordova(this, "dispatch", { "platforms": ["Android", "iOS", "Windows"] }, arguments); };
    GoogleAnalytics.pluginName = "GoogleAnalytics";
    GoogleAnalytics.plugin = "cordova-plugin-google-analytics";
    GoogleAnalytics.pluginRef = "ga";
    GoogleAnalytics.repo = "https://github.com/danwilson/google-analytics-plugin";
    GoogleAnalytics.platforms = ["Android", "Browser", "iOS", "Windows Phone 8"];
    GoogleAnalytics = __decorate([
        Injectable()
    ], GoogleAnalytics);
    return GoogleAnalytics;
}(IonicNativePlugin));
export { GoogleAnalytics };
//# sourceMappingURL=data:application/json;base64,