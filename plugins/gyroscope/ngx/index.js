import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var Gyroscope = /** @class */ (function (_super) {
    __extends(Gyroscope, _super);
    function Gyroscope() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Watching for gyroscope sensor changes
     * @param {GyroscopeOptions} [options]
     * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation
     */
    Gyroscope.prototype.watch = function (options) {
        return new Observable(function (observer) {
            var watchId = navigator.gyroscope.watch(observer.next.bind(observer), observer.next.bind(observer), options);
            return function () { return navigator.gyroscope.clearWatch(watchId); };
        });
    };
    Gyroscope.prototype.getCurrent = function (options) { return cordova(this, "getCurrent", { "callbackOrder": "reverse" }, arguments); };
    Gyroscope.pluginName = "Gyroscope";
    Gyroscope.plugin = "cordova-plugin-gyroscope";
    Gyroscope.pluginRef = "navigator.gyroscope";
    Gyroscope.repo = "https://github.com/NeoLSN/cordova-plugin-gyroscope";
    Gyroscope.platforms = ["Android", "iOS"];
    Gyroscope = __decorate([
        Injectable()
    ], Gyroscope);
    return Gyroscope;
}(IonicNativePlugin));
export { Gyroscope };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2d5cm9zY29wZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQWlGWiw2QkFBaUI7Ozs7SUFDOUM7Ozs7T0FJRztJQUNILHlCQUFLLEdBQUwsVUFBTSxPQUEwQjtRQUM5QixPQUFPLElBQUksVUFBVSxDQUF1QixVQUFDLFFBQWE7WUFDeEQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0csT0FBTyxjQUFNLE9BQUEsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQXZDLENBQXVDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBVUQsOEJBQVUsYUFBQyxPQUEwQjs7Ozs7O0lBckIxQixTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBbkZ0QjtFQW1GK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xyXG5cclxuLyoqXHJcbiAqICBAaGlkZGVuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEd5cm9zY29wZU9yaWVudGF0aW9uIHtcclxuICAvKipcclxuICAgKiAgUmVwcmVzZW50IHgtYXhpc1xyXG4gICAqL1xyXG4gIHg6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogIFJlcHJlc2VudCB5LWF4aXNcclxuICAgKi9cclxuICB5OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqICBSZXByZXNlbnQgei1heGlzXHJcbiAgICovXHJcbiAgejogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiAgUmVwcmVzZW50IHRpbWVzdGFtcCBvZiBzZW5zb3IgcmVhZC4gRGVmYXVsdCBpcyAxMDAwMG1zXHJcbiAgICovXHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAgQGhpZGRlblxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBHeXJvc2NvcGVPcHRpb25zIHtcclxuICAvKipcclxuICAgKiAgUmVwcmVzZW50IGhvdyBvZnRlbiAoaW4gbWlsbGlzZWNvbmRzKSBzZW5zb3Igc2hvdWxkIGJlIHJlYWQuICBEZWZhdWx0IGlzIDEwMDAwIG1zXHJcbiAgICovXHJcbiAgZnJlcXVlbmN5OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBHeXJvc2NvcGVcclxuICogQGRlc2NyaXB0aW9uIFJlYWQgR3lyb3Njb3BlIHNlbnNvciBkYXRhXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEd5cm9zY29wZSwgR3lyb3Njb3BlT3JpZW50YXRpb24sIEd5cm9zY29wZU9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2d5cm9zY29wZS9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGd5cm9zY29wZTogR3lyb3Njb3BlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIGxldCBvcHRpb25zOiBHeXJvc2NvcGVPcHRpb25zID0ge1xyXG4gKiAgICBmcmVxdWVuY3k6IDEwMDBcclxuICogfVxyXG4gKlxyXG4gKiB0aGlzLmd5cm9zY29wZS5nZXRDdXJyZW50KG9wdGlvbnMpXHJcbiAqICAgLnRoZW4oKG9yaWVudGF0aW9uOiBHeXJvc2NvcGVPcmllbnRhdGlvbikgPT4ge1xyXG4gKiAgICAgIGNvbnNvbGUubG9nKG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIG9yaWVudGF0aW9uLnRpbWVzdGFtcCk7XHJcbiAqICAgIH0pXHJcbiAqICAgLmNhdGNoKClcclxuICpcclxuICpcclxuICogdGhpcy5neXJvc2NvcGUud2F0Y2goKVxyXG4gKiAgICAuc3Vic2NyaWJlKChvcmllbnRhdGlvbjogR3lyb3Njb3BlT3JpZW50YXRpb24pID0+IHtcclxuICogICAgICAgY29uc29sZS5sb2cob3JpZW50YXRpb24ueCwgb3JpZW50YXRpb24ueSwgb3JpZW50YXRpb24ueiwgb3JpZW50YXRpb24udGltZXN0YW1wKTtcclxuICogICAgfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBHeXJvc2NvcGVPcmllbnRhdGlvblxyXG4gKiBHeXJvc2NvcGVPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnR3lyb3Njb3BlJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1neXJvc2NvcGUnLFxyXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5neXJvc2NvcGUnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTmVvTFNOL2NvcmRvdmEtcGx1Z2luLWd5cm9zY29wZScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEd5cm9zY29wZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBXYXRjaGluZyBmb3IgZ3lyb3Njb3BlIHNlbnNvciBjaGFuZ2VzXHJcbiAgICogQHBhcmFtIHtHeXJvc2NvcGVPcHRpb25zfSBbb3B0aW9uc11cclxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPEd5cm9zY29wZU9yaWVudGF0aW9uPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVzb2x2ZXMgR3lyb3Njb3BlT3JpZW50YXRpb25cclxuICAgKi9cclxuICB3YXRjaChvcHRpb25zPzogR3lyb3Njb3BlT3B0aW9ucyk6IE9ic2VydmFibGU8R3lyb3Njb3BlT3JpZW50YXRpb24+IHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxHeXJvc2NvcGVPcmllbnRhdGlvbj4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgY29uc3Qgd2F0Y2hJZCA9IG5hdmlnYXRvci5neXJvc2NvcGUud2F0Y2gob2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSwgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSwgb3B0aW9ucyk7XHJcbiAgICAgIHJldHVybiAoKSA9PiBuYXZpZ2F0b3IuZ3lyb3Njb3BlLmNsZWFyV2F0Y2god2F0Y2hJZCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjdXJyZW50IGRhdGEgZnJvbSBneXJvc2NvcGUgc2Vuc29yXHJcbiAgICogQHBhcmFtIHtHeXJvc2NvcGVPcHRpb25zfSBbb3B0aW9uc11cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEd5cm9zY29wZU9yaWVudGF0aW9uPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBHeXJvc2NvcGVPcmllbnRhdGlvblxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIGdldEN1cnJlbnQob3B0aW9ucz86IEd5cm9zY29wZU9wdGlvbnMpOiBQcm9taXNlPEd5cm9zY29wZU9yaWVudGF0aW9uPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==