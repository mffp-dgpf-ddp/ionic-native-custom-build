import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var MusicControls = /** @class */ (function (_super) {
    __extends(MusicControls, _super);
    function MusicControls() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MusicControls.prototype.create = function (options) { return cordova(this, "create", {}, arguments); };
    MusicControls.prototype.destroy = function () { return cordova(this, "destroy", {}, arguments); };
    MusicControls.prototype.subscribe = function () { return cordova(this, "subscribe", { "observable": true }, arguments); };
    MusicControls.prototype.listen = function () { return cordova(this, "listen", { "sync": true }, arguments); };
    MusicControls.prototype.updateIsPlaying = function (isPlaying) { return cordova(this, "updateIsPlaying", {}, arguments); };
    MusicControls.prototype.updateElapsed = function (args) { return cordova(this, "updateElapsed", { "platforms": ["iOS"] }, arguments); };
    MusicControls.prototype.updateDismissable = function (dismissable) { return cordova(this, "updateDismissable", {}, arguments); };
    MusicControls.pluginName = "MusicControls";
    MusicControls.plugin = "cordova-plugin-music-controls2";
    MusicControls.pluginRef = "MusicControls";
    MusicControls.repo = "https://github.com/ghenry22/cordova-plugin-music-controls2";
    MusicControls.platforms = ["Android", "iOS", "Windows"];
    MusicControls = __decorate([
        Injectable()
    ], MusicControls);
    return MusicControls;
}(IonicNativePlugin));
export { MusicControls };
//# sourceMappingURL=data:application/json;base64,