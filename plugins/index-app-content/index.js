var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IndexAppContentOriginal = /** @class */ (function (_super) {
    __extends(IndexAppContentOriginal, _super);
    function IndexAppContentOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexAppContentOriginal.prototype.isIndexingAvailable = function () { return cordova(this, "isIndexingAvailable", {}, arguments); };
    IndexAppContentOriginal.prototype.setItems = function (items) { return cordova(this, "setItems", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForDomains = function (domains) { return cordova(this, "clearItemsForDomains", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForIdentifiers = function (identifiers) { return cordova(this, "clearItemsForIdentifiers", {}, arguments); };
    IndexAppContentOriginal.prototype.onItemPressed = function () { return cordovaFunctionOverride(this, "onItemPressed", {}, arguments); };
    IndexAppContentOriginal.prototype.setIndexingInterval = function (intervalMinutes) { return cordova(this, "setIndexingInterval", {}, arguments); };
    IndexAppContentOriginal.pluginName = "IndexAppContent";
    IndexAppContentOriginal.plugin = "cordova-plugin-indexappcontent";
    IndexAppContentOriginal.pluginRef = "window.plugins.indexAppContent";
    IndexAppContentOriginal.repo = "https://github.com/johanblomgren/cordova-plugin-indexappcontent";
    IndexAppContentOriginal.platforms = ["iOS"];
    return IndexAppContentOriginal;
}(IonicNativePlugin));
var IndexAppContent = new IndexAppContentOriginal();
export { IndexAppContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luZGV4LWFwcC1jb250ZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVEQUErRCxNQUFNLG9CQUFvQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdUVHLG1DQUFpQjs7OztJQU9wRCw2Q0FBbUI7SUFVbkIsa0NBQVEsYUFBQyxLQUFrQjtJQVUzQiw4Q0FBb0IsYUFBQyxPQUFpQjtJQVV0QyxrREFBd0IsYUFBQyxXQUFxQjtJQVU5Qyx1Q0FBYTtJQVViLDZDQUFtQixhQUFDLGVBQXVCOzs7Ozs7MEJBbEk3QztFQXlFcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmRleEl0ZW0ge1xyXG4gIGRvbWFpbjogc3RyaW5nO1xyXG4gIGlkZW50aWZpZXI6IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFVybCB0byBpbWFnZVxyXG4gICAqL1xyXG4gIHVybDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBJdGVtIGtleXdvcmRzXHJcbiAgICovXHJcbiAga2V5d29yZHM/OiBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogTGlmZXRpbWUgaW4gbWludXRlc1xyXG4gICAqL1xyXG4gIGxpZmV0aW1lPzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgSW5kZXggQXBwIENvbnRlbnRcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGdpdmVzIHlvdSBhIEphdmFzY3JpcHQgQVBJIHRvIGludGVyYWN0IHdpdGggQ29yZSBTcG90bGlnaHQgb24gaU9TICg9PiBpT1MgOSkuXHJcbiAqIFlvdSBjYW4gYWRkLCB1cGRhdGUgYW5kIGRlbGV0ZSBpdGVtcyB0byB0aGUgc3BvdGxpZ2h0IHNlYXJjaCBpbmRleC5cclxuICogU3BvdGxpZ2h0IFNlYXJjaCB3aWxsIGluY2x1ZGUgdGhlc2UgaXRlbXMgaW4gdGhlIHJlc3VsdCBsaXN0LiBZb3UgY2FuIGRlZXAtbGluayB0aGUgc2VhcmNoIHJlc3VsdHMgd2l0aCB5b3VyIGFwcC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSW5kZXhBcHBDb250ZW50IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbmRleC1hcHAtY29udGVudC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGluZGV4QXBwQ29udGVudDogSW5kZXhBcHBDb250ZW50KSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHZhciBpdGVtcyA9IFtcclxuICogICAgICB7XHJcbiAqICAgICAgICBkb21haW46ICdjb20ubXkuZG9tYWluJyxcclxuICogICAgICAgIGlkZW50aWZpZXI6ICc4OGFzZGY3ZHNmJyxcclxuICogICAgICAgIHRpdGxlOiAnRm9vJyxcclxuICogICAgICAgIGRlc2NyaXB0aW9uOiAnQmFyJyxcclxuICogICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhdGlvbi9vZi9teS9pbWFnZS5qcGcnLFxyXG4gKiAgICB9LFxyXG4gKiAgICB7XHJcbiAqICAgICAgICBkb21haW46ICdjb20ub3RoZXIuZG9tYWluJyxcclxuICogICAgICAgIGlkZW50aWZpZXI6ICc5YXNkNjdnNmEnLFxyXG4gKiAgICAgICAgdGl0bGU6ICdCYXonLFxyXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdXb290JyxcclxuICogICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhdGlvbi9vZi9teS9pbWFnZTIuanBnJyxcclxuICogICAgIH1cclxuICogXTtcclxuICpcclxuICogdGhpcy5pbmRleEFwcENvbnRlbnQuc2V0SXRlbXMoaXRlbXMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdJbmRleEFwcENvbnRlbnQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWluZGV4YXBwY29udGVudCcsXHJcbiAgcGx1Z2luUmVmOiAnd2luZG93LnBsdWdpbnMuaW5kZXhBcHBDb250ZW50JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYmxvbWdyZW4vY29yZG92YS1wbHVnaW4taW5kZXhhcHBjb250ZW50JyxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEluZGV4QXBwQ29udGVudCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGUgb3B0aW9uIHRvIGluZGV4IGFwcCBjb250ZW50IG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUgYXQgYWxsIGR1ZSB0byBkZXZpY2UgbGltaXRhdGlvbnMgb3IgdXNlciBzZXR0aW5ncy5cclxuICAgKiBUaGVyZWZvcmUgaXQncyBoaWdobHkgcmVjb21tZW5kZWQgdG8gY2hlY2sgdXBmcm9udCBpZiBpbmRleGluZyBpcyBwb3NzaWJsZS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdHJ1ZSBpZiBpbmRleGluZyBpcyBhdmFpbGFibGUsIGZhbHNlIGlmIG5vdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0luZGV4aW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIG9yIGNoYW5nZSBpdGVtcyB0byBzcG90bGlnaHQgaW5kZXhcclxuICAgKiBAcGFyYW0ge0luZGV4SXRlbVtdfSBpdGVtcyBBcnJheSBvZiBpdGVtcyB0byBpbmRleFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBpZiBpbmRleCBzZXQgd2FzIHN1Y2Nlc3NmdWxseVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRJdGVtcyhpdGVtczogSW5kZXhJdGVtW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXIgYWxsIGl0ZW1zIHN0b3JlZCBmb3IgYSBnaXZlbiBhcnJheSBvZiBkb21haW5zXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gZG9tYWlucyBBcnJheSBvZiBkb21haW5zIHRvIGNsZWFyXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlIGlmIHN1Y2Nlc3NmdWxseVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbGVhckl0ZW1zRm9yRG9tYWlucyhkb21haW5zOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBhbGwgaXRlbXMgc3RvcmVkIGZvciBhIGdpdmVuIGFycmF5IG9mIGlkZW50aWZpZXJzXHJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gaWRlbnRpZmllcnMgQXJyYXkgb2YgaWRlbnRpZmllcnMgdG8gY2xlYXJcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJlc29sdmUgaWYgc3VjY2Vzc2Z1bGx5XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFySXRlbXNGb3JJZGVudGlmaWVycyhpZGVudGlmaWVyczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSWYgdXNlciB0YXBzIG9uIGEgc2VhcmNoIHJlc3VsdCBpbiBzcG90bGlnaHQgdGhlbiB0aGUgYXBwIHdpbGwgYmUgbGF1bmNoZWQuXHJcbiAgICogWW91IGNhbiByZWdpc3RlciBhIEphdmFzY3JpcHQgaGFuZGxlciB0byBnZXQgaW5mb3JtZWQgd2hlbiB0aGlzIGhhcHBlbnMuXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gaGUgdXNlciBwcmVzc2VzIG9uIHRoZSBob21lIHNjcmVlbiBpY29uXHJcbiAgICovXHJcbiAgQENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlKClcclxuICBvbkl0ZW1QcmVzc2VkKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBZb3UgbWlnaHQgd2FudCB0byBhdm9pZCB0byB1cGRhdGUgc3BvdGxpZ2h0IGluZGV4IHRvbyBmcmVxdWVudGx5LlxyXG4gICAqIFdpdGhvdXQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGEgc3Vic2VxdWVudCBjYWxsIHRvIG1hbmlwdWxhdGUgdGhlIGluZGV4IGlzIG9ubHkgcG9zc2libGUgYWZ0ZXIgMTQ0MCBtaW51dGVzICg9IDI0IGhvdXJzKSFcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxNaW51dGVzIHZhbHVlID0+IDBcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0SW5kZXhpbmdJbnRlcnZhbChpbnRlcnZhbE1pbnV0ZXM6IG51bWJlcikge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=