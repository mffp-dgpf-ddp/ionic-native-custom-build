import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IndexAppContent = /** @class */ (function (_super) {
    __extends(IndexAppContent, _super);
    function IndexAppContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexAppContent.prototype.isIndexingAvailable = function () { return cordova(this, "isIndexingAvailable", {}, arguments); };
    IndexAppContent.prototype.setItems = function (items) { return cordova(this, "setItems", {}, arguments); };
    IndexAppContent.prototype.clearItemsForDomains = function (domains) { return cordova(this, "clearItemsForDomains", {}, arguments); };
    IndexAppContent.prototype.clearItemsForIdentifiers = function (identifiers) { return cordova(this, "clearItemsForIdentifiers", {}, arguments); };
    IndexAppContent.prototype.onItemPressed = function () { return cordovaFunctionOverride(this, "onItemPressed", {}, arguments); };
    IndexAppContent.prototype.setIndexingInterval = function (intervalMinutes) { return cordova(this, "setIndexingInterval", {}, arguments); };
    IndexAppContent.pluginName = "IndexAppContent";
    IndexAppContent.plugin = "cordova-plugin-indexappcontent";
    IndexAppContent.pluginRef = "window.plugins.indexAppContent";
    IndexAppContent.repo = "https://github.com/johanblomgren/cordova-plugin-indexappcontent";
    IndexAppContent.platforms = ["iOS"];
    IndexAppContent = __decorate([
        Injectable()
    ], IndexAppContent);
    return IndexAppContent;
}(IonicNativePlugin));
export { IndexAppContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luZGV4LWFwcC1jb250ZW50L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVEQUErRCxNQUFNLG9CQUFvQixDQUFDO0FBQ2pHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdUVHLG1DQUFpQjs7OztJQU9wRCw2Q0FBbUI7SUFVbkIsa0NBQVEsYUFBQyxLQUFrQjtJQVUzQiw4Q0FBb0IsYUFBQyxPQUFpQjtJQVV0QyxrREFBd0IsYUFBQyxXQUFxQjtJQVU5Qyx1Q0FBYTtJQVViLDZDQUFtQixhQUFDLGVBQXVCOzs7Ozs7SUF6RGhDLGVBQWU7UUFEM0IsVUFBVSxFQUFFO09BQ0EsZUFBZTswQkF6RTVCO0VBeUVxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4SXRlbSB7XHJcbiAgZG9tYWluOiBzdHJpbmc7XHJcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVXJsIHRvIGltYWdlXHJcbiAgICovXHJcbiAgdXJsOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEl0ZW0ga2V5d29yZHNcclxuICAgKi9cclxuICBrZXl3b3Jkcz86IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiBMaWZldGltZSBpbiBtaW51dGVzXHJcbiAgICovXHJcbiAgbGlmZXRpbWU/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBJbmRleCBBcHAgQ29udGVudFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGEgSmF2YXNjcmlwdCBBUEkgdG8gaW50ZXJhY3Qgd2l0aCBDb3JlIFNwb3RsaWdodCBvbiBpT1MgKD0+IGlPUyA5KS5cclxuICogWW91IGNhbiBhZGQsIHVwZGF0ZSBhbmQgZGVsZXRlIGl0ZW1zIHRvIHRoZSBzcG90bGlnaHQgc2VhcmNoIGluZGV4LlxyXG4gKiBTcG90bGlnaHQgU2VhcmNoIHdpbGwgaW5jbHVkZSB0aGVzZSBpdGVtcyBpbiB0aGUgcmVzdWx0IGxpc3QuIFlvdSBjYW4gZGVlcC1saW5rIHRoZSBzZWFyY2ggcmVzdWx0cyB3aXRoIHlvdXIgYXBwLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBJbmRleEFwcENvbnRlbnQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2luZGV4LWFwcC1jb250ZW50L25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5kZXhBcHBDb250ZW50OiBJbmRleEFwcENvbnRlbnQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdmFyIGl0ZW1zID0gW1xyXG4gKiAgICAgIHtcclxuICogICAgICAgIGRvbWFpbjogJ2NvbS5teS5kb21haW4nLFxyXG4gKiAgICAgICAgaWRlbnRpZmllcjogJzg4YXNkZjdkc2YnLFxyXG4gKiAgICAgICAgdGl0bGU6ICdGb28nLFxyXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdCYXInLFxyXG4gKiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2F0aW9uL29mL215L2ltYWdlLmpwZycsXHJcbiAqICAgIH0sXHJcbiAqICAgIHtcclxuICogICAgICAgIGRvbWFpbjogJ2NvbS5vdGhlci5kb21haW4nLFxyXG4gKiAgICAgICAgaWRlbnRpZmllcjogJzlhc2Q2N2c2YScsXHJcbiAqICAgICAgICB0aXRsZTogJ0JheicsXHJcbiAqICAgICAgICBkZXNjcmlwdGlvbjogJ1dvb3QnLFxyXG4gKiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2F0aW9uL29mL215L2ltYWdlMi5qcGcnLFxyXG4gKiAgICAgfVxyXG4gKiBdO1xyXG4gKlxyXG4gKiB0aGlzLmluZGV4QXBwQ29udGVudC5zZXRJdGVtcyhpdGVtcylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0luZGV4QXBwQ29udGVudCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW5kZXhhcHBjb250ZW50JyxcclxuICBwbHVnaW5SZWY6ICd3aW5kb3cucGx1Z2lucy5pbmRleEFwcENvbnRlbnQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vam9oYW5ibG9tZ3Jlbi9jb3Jkb3ZhLXBsdWdpbi1pbmRleGFwcGNvbnRlbnQnLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSW5kZXhBcHBDb250ZW50IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBvcHRpb24gdG8gaW5kZXggYXBwIGNvbnRlbnQgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBhdCBhbGwgZHVlIHRvIGRldmljZSBsaW1pdGF0aW9ucyBvciB1c2VyIHNldHRpbmdzLlxyXG4gICAqIFRoZXJlZm9yZSBpdCdzIGhpZ2hseSByZWNvbW1lbmRlZCB0byBjaGVjayB1cGZyb250IGlmIGluZGV4aW5nIGlzIHBvc3NpYmxlLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0cnVlIGlmIGluZGV4aW5nIGlzIGF2YWlsYWJsZSwgZmFsc2UgaWYgbm90XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzSW5kZXhpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgb3IgY2hhbmdlIGl0ZW1zIHRvIHNwb3RsaWdodCBpbmRleFxyXG4gICAqIEBwYXJhbSB7SW5kZXhJdGVtW119IGl0ZW1zIEFycmF5IG9mIGl0ZW1zIHRvIGluZGV4XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGlmIGluZGV4IHNldCB3YXMgc3VjY2Vzc2Z1bGx5XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldEl0ZW1zKGl0ZW1zOiBJbmRleEl0ZW1bXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhciBhbGwgaXRlbXMgc3RvcmVkIGZvciBhIGdpdmVuIGFycmF5IG9mIGRvbWFpbnNcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBkb21haW5zIEFycmF5IG9mIGRvbWFpbnMgdG8gY2xlYXJcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJlc29sdmUgaWYgc3VjY2Vzc2Z1bGx5XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFySXRlbXNGb3JEb21haW5zKGRvbWFpbnM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFyIGFsbCBpdGVtcyBzdG9yZWQgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgaWRlbnRpZmllcnNcclxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBpZGVudGlmaWVycyBBcnJheSBvZiBpZGVudGlmaWVycyB0byBjbGVhclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmVzb2x2ZSBpZiBzdWNjZXNzZnVsbHlcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xlYXJJdGVtc0ZvcklkZW50aWZpZXJzKGlkZW50aWZpZXJzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJZiB1c2VyIHRhcHMgb24gYSBzZWFyY2ggcmVzdWx0IGluIHNwb3RsaWdodCB0aGVuIHRoZSBhcHAgd2lsbCBiZSBsYXVuY2hlZC5cclxuICAgKiBZb3UgY2FuIHJlZ2lzdGVyIGEgSmF2YXNjcmlwdCBoYW5kbGVyIHRvIGdldCBpbmZvcm1lZCB3aGVuIHRoaXMgaGFwcGVucy5cclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiBoZSB1c2VyIHByZXNzZXMgb24gdGhlIGhvbWUgc2NyZWVuIGljb25cclxuICAgKi9cclxuICBAQ29yZG92YUZ1bmN0aW9uT3ZlcnJpZGUoKVxyXG4gIG9uSXRlbVByZXNzZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFlvdSBtaWdodCB3YW50IHRvIGF2b2lkIHRvIHVwZGF0ZSBzcG90bGlnaHQgaW5kZXggdG9vIGZyZXF1ZW50bHkuXHJcbiAgICogV2l0aG91dCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gYSBzdWJzZXF1ZW50IGNhbGwgdG8gbWFuaXB1bGF0ZSB0aGUgaW5kZXggaXMgb25seSBwb3NzaWJsZSBhZnRlciAxNDQwIG1pbnV0ZXMgKD0gMjQgaG91cnMpIVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbE1pbnV0ZXMgdmFsdWUgPT4gMFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRJbmRleGluZ0ludGVydmFsKGludGVydmFsTWludXRlczogbnVtYmVyKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==