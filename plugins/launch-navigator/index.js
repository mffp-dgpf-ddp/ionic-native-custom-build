var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LaunchNavigatorOriginal = /** @class */ (function (_super) {
    __extends(LaunchNavigatorOriginal, _super);
    function LaunchNavigatorOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.APP = {
            USER_SELECT: 'user_select',
            APPLE_MAPS: 'apple_maps',
            GOOGLE_MAPS: 'google_maps',
            WAZE: 'waze',
            CITYMAPPER: 'citymapper',
            NAVIGON: 'navigon',
            TRANSIT_APP: 'transit_app',
            YANDEX: 'yandex',
            UBER: 'uber',
            TOMTOM: 'tomtom',
            BING_MAPS: 'bing_maps',
            SYGIC: 'sygic',
            HERE_MAPS: 'here_maps',
            MOOVIT: 'moovit',
        };
        _this.TRANSPORT_MODE = {
            DRIVING: 'driving',
            WALKING: 'walking',
            BICYCLING: 'bicycling',
            TRANSIT: 'transit',
        };
        return _this;
    }
    LaunchNavigatorOriginal.prototype.navigate = function (destination, options) { return cordova(this, "navigate", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    LaunchNavigatorOriginal.prototype.isAppAvailable = function (app) { return cordova(this, "isAppAvailable", {}, arguments); };
    LaunchNavigatorOriginal.prototype.availableApps = function () { return cordova(this, "availableApps", {}, arguments); };
    LaunchNavigatorOriginal.prototype.getAppDisplayName = function (app) { return cordova(this, "getAppDisplayName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.getAppsForPlatform = function (platform) { return cordova(this, "getAppsForPlatform", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsTransportMode = function (app, platform) { return cordova(this, "supportsTransportMode", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.getTransportModes = function (app, platform) { return cordova(this, "getTransportModes", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsDestName = function (app, platform) { return cordova(this, "supportsDestName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsStart = function (app, platform) { return cordova(this, "supportsStart", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsStartName = function (app, platform) { return cordova(this, "supportsStartName", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.supportsLaunchMode = function (app, platform) { return cordova(this, "supportsLaunchMode", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.prototype.userSelect = function (destination, options) { return cordova(this, "userSelect", { "sync": true }, arguments); };
    LaunchNavigatorOriginal.pluginName = "LaunchNavigator";
    LaunchNavigatorOriginal.plugin = "uk.co.workingedge.phonegap.plugin.launchnavigator";
    LaunchNavigatorOriginal.pluginRef = "launchnavigator";
    LaunchNavigatorOriginal.repo = "https://github.com/dpa99c/phonegap-launch-navigator";
    LaunchNavigatorOriginal.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    return LaunchNavigatorOriginal;
}(IonicNativePlugin));
var LaunchNavigator = new LaunchNavigatorOriginal();
export { LaunchNavigator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xhdW5jaC1uYXZpZ2F0b3IvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBa1JuQyxtQ0FBaUI7OztRQUNwRCxTQUFHLEdBQVE7WUFDVCxXQUFXLEVBQUUsYUFBYTtZQUMxQixVQUFVLEVBQUUsWUFBWTtZQUN4QixXQUFXLEVBQUUsYUFBYTtZQUMxQixJQUFJLEVBQUUsTUFBTTtZQUNaLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFdBQVcsRUFBRSxhQUFhO1lBQzFCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLElBQUksRUFBRSxNQUFNO1lBQ1osTUFBTSxFQUFFLFFBQVE7WUFDaEIsU0FBUyxFQUFFLFdBQVc7WUFDdEIsS0FBSyxFQUFFLE9BQU87WUFDZCxTQUFTLEVBQUUsV0FBVztZQUN0QixNQUFNLEVBQUUsUUFBUTtTQUNqQixDQUFDO1FBRUYsb0JBQWMsR0FBUTtZQUNwQixPQUFPLEVBQUUsU0FBUztZQUNsQixPQUFPLEVBQUUsU0FBUztZQUNsQixTQUFTLEVBQUUsV0FBVztZQUN0QixPQUFPLEVBQUUsU0FBUztTQUNuQixDQUFDOzs7SUFhRixrQ0FBUSxhQUFDLFdBQThCLEVBQUUsT0FBZ0M7SUFVekUsd0NBQWMsYUFBQyxHQUFXO0lBUzFCLHVDQUFhO0lBVWIsMkNBQWlCLGFBQUMsR0FBVztJQVU3Qiw0Q0FBa0IsYUFBQyxRQUFnQjtJQVduQywrQ0FBcUIsYUFBQyxHQUFXLEVBQUUsUUFBZ0I7SUFXbkQsMkNBQWlCLGFBQUMsR0FBVyxFQUFFLFFBQWdCO0lBVS9DLDBDQUFnQixhQUFDLEdBQVcsRUFBRSxRQUFnQjtJQVc5Qyx1Q0FBYSxhQUFDLEdBQVcsRUFBRSxRQUFnQjtJQVUzQywyQ0FBaUIsYUFBQyxHQUFXLEVBQUUsUUFBZ0I7SUFZL0MsNENBQWtCLGFBQUMsR0FBVyxFQUFFLFFBQWdCO0lBU2hELG9DQUFVLGFBQUMsV0FBOEIsRUFBRSxPQUErQjs7Ozs7OzBCQXhhNUU7RUFtUnFDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvbXB0c09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIGEgZnVuY3Rpb24gdG8gcGFzcyB0aGUgdXNlcidzIGRlY2lzaW9uIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIG9mIGFwcC5cclxuICAgKiBUaGlzIHdpbGwgYmUgcGFzc2VkIGEgc2luZ2xlIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB0aGUgdXNlcidzIGRlY2lzaW9uLlxyXG4gICAqIEBwYXJhbSByZW1lbWJlckNob2ljZVxyXG4gICAqL1xyXG4gIGNhbGxiYWNrPzogKHJlbWVtYmVyQ2hvaWNlOiBib29sZWFuKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIG5hdGl2ZSBwcm9tcHQgaGVhZGVyIGFza2luZyB1c2VyIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlLlxyXG4gICAqIERlZmF1bHRzIHRvIFwiUmVtZW1iZXIgeW91ciBjaG9pY2U/XCIgaWYgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBoZWFkZXJUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIG5hdGl2ZSBwcm9tcHQgYm9keSBhc2tpbmcgdXNlciB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZS5cclxuICAgKiBEZWZhdWx0cyB0byBcIlVzZSB0aGUgc2FtZSBhcHAgZm9yIG5hdmlnYXRpbmcgbmV4dCB0aW1lP1wiIGlmIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgYm9keVRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIHRleHQgdG8gZGlzcGxheSBmb3IgdGhlIFllcyBidXR0b24uXHJcbiAgICogRGVmYXVsdHMgdG8gXCJZZXNcIiBpZiBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIHllc0J1dHRvblRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIHRleHQgdG8gZGlzcGxheSBmb3IgdGhlIE5vIGJ1dHRvbi5cclxuICAgKiBEZWZhdWx0cyB0byBcIk5vXCIgaWYgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBub0J1dHRvblRleHQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVtZW1iZXJDaG9pY2VPcHRpb25zIHtcclxuICAvKipcclxuICAgKiB3aGV0aGVyIHRvIHJlbWVtYmVyIHVzZXIgY2hvaWNlIG9mIGFwcCBmb3IgbmV4dCB0aW1lLCBpbnN0ZWFkIG9mIGFza2luZyBhZ2FpbiBmb3IgdXNlciBjaG9pY2UuXHJcbiAgICogYFwicHJvbXB0XCJgIC0gUHJvbXB0IHVzZXIgdG8gZGVjaWRlIHdoZXRoZXIgdG8gcmVtZW1iZXIgY2hvaWNlLlxyXG4gICAqICAtIERlZmF1bHQgdmFsdWUgaWYgdW5zcGVjaWZpZWQuXHJcbiAgICogIC0gSWYgYHByb21wdEZuYCBpcyBkZWZpbmVkLCB0aGlzIHdpbGwgYmUgdXNlZCBmb3IgdXNlciBjb25maXJtYXRpb24uXHJcbiAgICogIC0gT3RoZXJ3aXNlIChieSBkZWZhdWx0KSwgYSBuYXRpdmUgZGlhbG9nIHdpbGwgYmUgZGlzcGxheWVkIHRvIGFzayB1c2VyLlxyXG4gICAqIGBmYWxzZWAgLSBEbyBub3QgcmVtZW1iZXIgdXNlciBjaG9pY2UuXHJcbiAgICogYHRydWVgIC0gUmVtZW1iZXIgdXNlciBjaG9pY2UuXHJcbiAgICovXHJcbiAgZW5hYmxlZD86IGJvb2xlYW4gfCBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGEgZnVuY3Rpb24gd2hpY2ggYXNrcyB0aGUgdXNlciB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZSBvZiBhcHAuXHJcbiAgICogSWYgdGhpcyBpcyBkZWZpbmVkLCB0aGVuIHRoZSBkZWZhdWx0IGRpYWxvZyBwcm9tcHQgd2lsbCBub3QgYmUgc2hvd24sIGFsbG93aW5nIGZvciBhIGN1c3RvbSBVSSBmb3IgYXNraW5nIHRoZSB1c2VyLlxyXG4gICAqIFRoaXMgd2lsbCBiZSBwYXNzZWQgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBzaG91bGQgYmUgaW52b2tlZCB3aXRoIGEgc2luZ2xlIGJvb2xlYW4gYXJndW1lbnQgd2hpY2ggaW5kaWNhdGVzIHRoZSB1c2VyJ3MgZGVjaXNpb24gdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlLlxyXG4gICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAqL1xyXG4gIHByb21wdEZuPzogKGNhbGxiYWNrOiAocmVtZW1iZXJDaG9pY2U6IGJvb2xlYW4pID0+IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIG9wdGlvbnMgcmVsYXRlZCB0byB0aGUgZGVmYXVsdCBkaWFsb2cgcHJvbXB0IHVzZWQgdG8gYXNrIHRoZSB1c2VyIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIG9mIGFwcC5cclxuICAgKi9cclxuICBwcm9tcHQ/OiBQcm9tcHRzT3B0aW9ucztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBTZWxlY3Rpb25PcHRpb25zIHtcclxuICAvKipcclxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIG5hdGl2ZSBwaWNrZXIgd2hpY2ggZW5hYmxlcyB1c2VyIHRvIHNlbGVjdCB3aGljaCBuYXZpZ2F0aW9uIGFwcCB0byBsYXVuY2guXHJcbiAgICogRGVmYXVsdHMgdG8gXCJTZWxlY3QgYXBwIGZvciBuYXZpZ2F0aW9uXCIgaWYgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBkaWFsb2dIZWFkZXJUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiB0ZXh0IHRvIGRpc3BsYXkgZm9yIHRoZSBjYW5jZWwgYnV0dG9uIGluIHRoZSBuYXRpdmUgcGlja2VyIHdoaWNoIGVuYWJsZXMgdXNlciB0byBzZWxlY3Qgd2hpY2ggbmF2aWdhdGlvbiBhcHAgdG8gbGF1bmNoLlxyXG4gICAqIERlZmF1bHRzIHRvIFwiQ2FuY2VsXCIgaWYgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBjYW5jZWxCdXR0b25UZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMaXN0IG9mIGFwcHMsIGRlZmluZWQgYXMgYGxhdW5jaG5hdmlnYXRvci5BUFBgIGNvbnN0YW50cywgd2hpY2ggc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgcGlja2VyIGlmIHRoZSBhcHAgaXMgYXZhaWxhYmxlLlxyXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcmVzdHJpY3Qgd2hpY2ggYXBwcyBhcmUgZGlzcGxheWVkLCBldmVuIGlmIHRoZXkgYXJlIGluc3RhbGxlZC5cclxuICAgKiBCeSBkZWZhdWx0LCBhbGwgYXZhaWxhYmxlIGFwcHMgd2lsbCBiZSBkaXNwbGF5ZWQuXHJcbiAgICovXHJcbiAgbGlzdD86IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgdXNlciBzZWxlY3RzIGFuIGFwcCBpbiB0aGUgbmF0aXZlIHBpY2tlci5cclxuICAgKiBBIHNpbmdsZSBzdHJpbmcgYXJndW1lbnQgaXMgcGFzc2VkIHdoaWNoIGlzIHRoZSBhcHAgd2hhdCB3YXMgc2VsZWN0ZWQgZGVmaW5lZCBhcyBhIGBsYXVuY2huYXZpZ2F0b3IuQVBQYCBjb25zdGFudC5cclxuICAgKi9cclxuICBjYWxsYmFjaz86IChhcHA6IHN0cmluZykgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogKEFuZHJvaWQgb25seSkgbmF0aXZlIHBpY2tlciB0aGVtZS4gU3BlY2lmeSB1c2luZyBgYWN0aW9uc2hlZXQuQU5EUk9JRF9USEVNRVNgIGNvbnN0YW50cy5cclxuICAgKiBEZWZhdWx0IGBhY3Rpb25zaGVldC5BTkRST0lEX1RIRU1FUy5USEVNRV9IT0xPX0xJR0hUYFxyXG4gICAqL1xyXG4gIGFuZHJvaWRUaGVtZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogb3B0aW9ucyByZWxhdGVkIHRvIHdoZXRoZXIgdG8gcmVtZW1iZXIgdXNlciBjaG9pY2Ugb2YgYXBwIGZvciBuZXh0IHRpbWUsIGluc3RlYWQgb2YgYXNraW5nIGFnYWluIGZvciB1c2VyIGNob2ljZS5cclxuICAgKi9cclxuICByZW1lbWJlckNob2ljZT86IFJlbWVtYmVyQ2hvaWNlT3B0aW9ucztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMYXVuY2hOYXZpZ2F0b3JPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBBIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIHRoZSBuYXZpZ2F0aW9uIGFwcCBpcyBzdWNjZXNzZnVsbHkgbGF1bmNoZWQuXHJcbiAgICovXHJcbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgY2FsbGJhY2sgdG8gaW52b2tlIGlmIGFuIGVycm9yIGlzIGVuY291bnRlcmVkIHdoaWxlIGxhdW5jaGluZyB0aGUgYXBwLlxyXG4gICAqIEEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCBjb250YWluaW5nIHRoZSBlcnJvciBtZXNzYWdlIHdpbGwgYmUgcGFzc2VkIGluLlxyXG4gICAqL1xyXG4gIGVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IHN0cmluZykgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogbmFtZSBvZiB0aGUgbmF2aWdhdGlvbiBhcHAgdG8gdXNlIGZvciBkaXJlY3Rpb25zLlxyXG4gICAqIFNwZWNpZnkgdXNpbmcgbGF1bmNobmF2aWdhdG9yLkFQUCBjb25zdGFudHMuXHJcbiAgICogZS5nLiBgbGF1bmNobmF2aWdhdG9yLkFQUC5HT09HTEVfTUFQU2AuXHJcbiAgICogSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gVXNlciBTZWxlY3Rpb24uXHJcbiAgICovXHJcbiAgYXBwPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBuaWNrbmFtZSB0byBkaXNwbGF5IGluIGFwcCBmb3IgZGVzdGluYXRpb24uIGUuZy4gXCJCb2IncyBIb3VzZVwiLlxyXG4gICAqL1xyXG4gIGRlc3RpbmF0aW9uTmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgcG9pbnQgb2YgdGhlIG5hdmlnYXRpb24uXHJcbiAgICogSWYgbm90IHNwZWNpZmllZCwgdGhlIGN1cnJlbnQgZGV2aWNlIGxvY2F0aW9uIHdpbGwgYmUgdXNlZC5cclxuICAgKiBFaXRoZXI6XHJcbiAgICogIC0gYSB7c3RyaW5nfSBjb250YWluaW5nIHRoZSBhZGRyZXNzLiBlLmcuIFwiQnVja2luZ2hhbSBQYWxhY2UsIExvbmRvblwiXHJcbiAgICogIC0gYSB7c3RyaW5nfSBjb250YWluaW5nIGEgbGF0aXR1ZGUvbG9uZ2l0dWRlIGNvb3JkaW5hdGUuIGUuZy4gXCI1MC4xLiAtNC4wXCJcclxuICAgKiAgLSBhbiB7YXJyYXl9LCB3aGVyZSB0aGUgZmlyc3QgZWxlbWVudCBpcyB0aGUgbGF0aXR1ZGUgYW5kIHRoZSBzZWNvbmQgZWxlbWVudCBpcyBhIGxvbmdpdHVkZSwgYXMgZGVjaW1hbCBudW1iZXJzLiBlLmcuIFs1MC4xLCAtNC4wXVxyXG4gICAqL1xyXG4gIHN0YXJ0Pzogc3RyaW5nIHwgbnVtYmVyW107XHJcblxyXG4gIC8qKlxyXG4gICAqIG5pY2tuYW1lIHRvIGRpc3BsYXkgaW4gYXBwIGZvciBzdGFydCAuIGUuZy4gXCJNeSBIb3VzZVwiLlxyXG4gICAqL1xyXG4gIHN0YXJ0TmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVHJhbnNwb3J0YXRpb24gbW9kZSBmb3IgbmF2aWdhdGlvbjogXCJkcml2aW5nXCIsIFwid2Fsa2luZ1wiIG9yIFwidHJhbnNpdFwiLiBEZWZhdWx0cyB0byBcImRyaXZpbmdcIiBpZiBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIHRyYW5zcG9ydE1vZGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHRydWUsIGRlYnVnIGxvZyBvdXRwdXQgd2lsbCBiZSBnZW5lcmF0ZWQgYnkgdGhlIHBsdWdpbi4gRGVmYXVsdHMgdG8gZmFsc2UuXHJcbiAgICovXHJcbiAgZW5hYmxlRGVidWc/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBhIGtleS92YWx1ZSBtYXAgb2YgZXh0cmEgYXBwLXNwZWNpZmljIHBhcmFtZXRlcnMuIEZvciBleGFtcGxlLCB0byB0ZWxsIEdvb2dsZSBNYXBzIG9uIEFuZHJvaWQgdG8gZGlzcGxheSBTYXRlbGxpdGUgdmlldyBpbiBcIm1hcHNcIiBsYXVuY2ggbW9kZTogYHtcInRcIjogXCJrXCJ9YFxyXG4gICAqL1xyXG4gIGV4dHJhcz86IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogKEFuZHJvaWQgb25seSkgbW9kZSBpbiB3aGljaCB0byBvcGVuIEdvb2dsZSBNYXBzIGFwcC5cclxuICAgKiBgbGF1bmNobmF2aWdhdG9yLkxBVU5DSF9NT0RFLk1BUFNgIG9yIGBsYXVuY2huYXZpZ2F0b3IuTEFVTkNIX01PREUuVFVSTl9CWV9UVVJOYFxyXG4gICAqIERlZmF1bHRzIHRvIGBsYXVuY2huYXZpZ2F0b3IuTEFVTkNIX01PREUuTUFQU2AgaWYgbm90IHNwZWNpZmllZC5cclxuICAgKi9cclxuICBsYXVuY2hNb2RlR29vZ2xlTWFwcz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogKGlPUyBvbmx5KSBtZXRob2QgdG8gdXNlIHRvIG9wZW4gQXBwbGUgTWFwcyBhcHAuXHJcbiAgICogYGxhdW5jaG5hdmlnYXRvci5MQVVOQ0hfTU9ERS5VUklfU0NIRU1FYCBvciBgbGF1bmNobmF2aWdhdG9yLkxBVU5DSF9NT0RFLk1BUEtJVGBcclxuICAgKiBEZWZhdWx0cyB0byBgbGF1bmNobmF2aWdhdG9yLkxBVU5DSF9NT0RFLlVSSV9TQ0hFTUVgIGlmIG5vdCBzcGVjaWZpZWQuXHJcbiAgICovXHJcbiAgbGF1bmNoTW9kZUFwcGxlTWFwcz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgdHJ1ZSwgYW5kIGlucHV0IGxvY2F0aW9uIHR5cGUocykgZG9lc24ndCBtYXRjaCB0aG9zZSByZXF1aXJlZCBieSB0aGUgYXBwLCB1c2UgZ2VvY29kaW5nIHRvIG9idGFpbiB0aGUgYWRkcmVzcy9jb29yZHMgYXMgcmVxdWlyZWQuIERlZmF1bHRzIHRvIHRydWUuXHJcbiAgICovXHJcbiAgZW5hYmxlR2VvbG9jYXRpb24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBvcHRpb25zIHJlbGF0ZWQgdG8gdGhlIGRlZmF1bHQgbmF0aXZlIGFjdGlvbnNoZWV0IHBpY2tlciB3aGljaCBlbmFibGVzIHVzZXIgdG8gc2VsZWN0IHdoaWNoIG5hdmlnYXRpb24gYXBwIHRvIGxhdW5jaCBpZiBgYXBwYCBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gICAqL1xyXG4gIGFwcFNlbGVjdGlvbj86IEFwcFNlbGVjdGlvbk9wdGlvbnM7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlckNob2ljZSB7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgYSB1c2VyIGNob2ljZSBleGlzdHMgZm9yIGEgcHJlZmVycmVkIG5hdmlnYXRvciBhcHAuXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gcGFzcyByZXN1bHQgdG86IHdpbGwgcmVjZWl2ZSBhIGJvb2xlYW4gYXJndW1lbnQuXHJcbiAgICovXHJcbiAgZXhpc3RzOiAoY2FsbGJhY2s6IChleGlzdHM6IGJvb2xlYW4pID0+IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgY3VycmVudCB1c2VyIGNob2ljZSBvZiBwcmVmZXJyZWQgbmF2aWdhdG9yIGFwcC5cclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBwYXNzIHJlc3VsdCB0bzogd2lsbCByZWNlaXZlIGEgc3RyaW5nIGFyZ3VtZW50IGluZGljYXRpbmcgdGhlIGFwcCwgd2hpY2ggaXMgYSBjb25zdGFudCBpbiBgbGF1bmNobmF2aWdhdG9yLkFQUGAuXHJcbiAgICovXHJcbiAgZ2V0OiAoY2FsbGJhY2s6IChhcHA6IHN0cmluZykgPT4gdm9pZCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgY3VycmVudCB1c2VyIGNob2ljZSBvZiBwcmVmZXJyZWQgbmF2aWdhdG9yIGFwcC5cclxuICAgKiBAcGFyYW0gYXBwIC0gYXBwIHRvIHNldCBhcyBwcmVmZXJyZWQgY2hvaWNlIGFzIGEgY29uc3RhbnQgaW4gYGxhdW5jaG5hdmlnYXRvci5BUFBgLlxyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSBvcGVyYXRpb24gaXMgY29tcGxldGUuXHJcbiAgICovXHJcbiAgc2V0OiAoYXBwOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgdGhlIGN1cnJlbnQgdXNlciBjaG9pY2Ugb2YgcHJlZmVycmVkIG5hdmlnYXRvciBhcHAuXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gY2FsbCBvbmNlIG9wZXJhdGlvbiBpcyBjb21wbGV0ZS5cclxuICAgKi9cclxuICBjbGVhcjogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJQcm9tcHRlZCB7XHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdXNlciBoYXMgYWxyZWFkeSBiZWVuIHByb21wdGVkIHdoZXRoZXIgdG8gcmVtZW1iZXIgdGhlaXIgY2hvaWNlIGEgcHJlZmVycmVkIG5hdmlnYXRvciBhcHAuXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gcGFzcyByZXN1bHQgdG86IHdpbGwgcmVjZWl2ZSBhIGJvb2xlYW4gYXJndW1lbnQuXHJcbiAgICovXHJcbiAgZ2V0OiAoY2FsbGJhY2s6IChleGlzdHM6IGJvb2xlYW4pID0+IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgZmxhZyBpbmRpY2F0aW5nIHVzZXIgaGFzIGFscmVhZHkgYmVlbiBwcm9tcHRlZCB3aGV0aGVyIHRvIHJlbWVtYmVyIHRoZWlyIGNob2ljZSBhIHByZWZlcnJlZCBuYXZpZ2F0b3IgYXBwLlxyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGNhbGwgb25jZSBvcGVyYXRpb24gaXMgY29tcGxldGUuXHJcbiAgICovXHJcbiAgc2V0OiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiB1c2VyIGhhcyBhbHJlYWR5IGJlZW4gcHJvbXB0ZWQgd2hldGhlciB0byByZW1lbWJlciB0aGVpciBjaG9pY2UgYSBwcmVmZXJyZWQgbmF2aWdhdG9yIGFwcC5cclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBjYWxsIG9uY2Ugb3BlcmF0aW9uIGlzIGNvbXBsZXRlLlxyXG4gICAqL1xyXG4gIGNsZWFyOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwU2VsZWN0aW9uIHtcclxuICB1c2VyQ2hvaWNlOiBVc2VyQ2hvaWNlO1xyXG4gIHVzZXJQcm9tcHRlZDogVXNlclByb21wdGVkO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgTGF1bmNoIE5hdmlnYXRvclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IHVrLmNvLndvcmtpbmdlZGdlLnBob25lZ2FwLnBsdWdpbi5sYXVuY2huYXZpZ2F0b3IuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtMYXVuY2hOYXZpZ2F0b3IgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvcGhvbmVnYXAtbGF1bmNoLW5hdmlnYXRvcikuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBQbGVhc2UgcmVmZXIgdG8gdGhlIHBsdWdpbidzIHJlcG8gZm9yIGRldGFpbGVkIHVzYWdlLiBUaGlzIGRvY3MgcGFnZSBvbmx5IGV4cGxhaW5zIHRoZSBOYXRpdmUgd3JhcHBlci5cclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBMYXVuY2hOYXZpZ2F0b3IsIExhdW5jaE5hdmlnYXRvck9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2xhdW5jaC1uYXZpZ2F0b3Ivbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsYXVuY2hOYXZpZ2F0b3I6IExhdW5jaE5hdmlnYXRvcikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBsZXQgb3B0aW9uczogTGF1bmNoTmF2aWdhdG9yT3B0aW9ucyA9IHtcclxuICogICBzdGFydDogJ0xvbmRvbiwgT04nLFxyXG4gKiAgIGFwcDogTGF1bmNoTmF2aWdhdG9yLkFQUFMuVUJFUlxyXG4gKiB9XHJcbiAqXHJcbiAqIHRoaXMubGF1bmNoTmF2aWdhdG9yLm5hdmlnYXRlKCdUb3JvbnRvLCBPTicsIG9wdGlvbnMpXHJcbiAqICAgLnRoZW4oXHJcbiAqICAgICBzdWNjZXNzID0+IGNvbnNvbGUubG9nKCdMYXVuY2hlZCBuYXZpZ2F0b3InKSxcclxuICogICAgIGVycm9yID0+IGNvbnNvbGUubG9nKCdFcnJvciBsYXVuY2hpbmcgbmF2aWdhdG9yJywgZXJyb3IpXHJcbiAqICAgKTtcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIExhdW5jaE5hdmlnYXRvck9wdGlvbnNcclxuICogUHJvbXB0c09wdGlvbnNcclxuICogUmVtZW1iZXJDaG9pY2VPcHRpb25zXHJcbiAqIEFwcFNlbGVjdGlvbk9wdGlvbnNcclxuICogVXNlckNob2ljZVxyXG4gKiBVc2VyUHJvbXB0ZWRcclxuICogQXBwU2VsZWN0aW9uXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTGF1bmNoTmF2aWdhdG9yJyxcclxuICBwbHVnaW46ICd1ay5jby53b3JraW5nZWRnZS5waG9uZWdhcC5wbHVnaW4ubGF1bmNobmF2aWdhdG9yJyxcclxuICBwbHVnaW5SZWY6ICdsYXVuY2huYXZpZ2F0b3InLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL3Bob25lZ2FwLWxhdW5jaC1uYXZpZ2F0b3InLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMYXVuY2hOYXZpZ2F0b3IgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgQVBQOiBhbnkgPSB7XHJcbiAgICBVU0VSX1NFTEVDVDogJ3VzZXJfc2VsZWN0JyxcclxuICAgIEFQUExFX01BUFM6ICdhcHBsZV9tYXBzJyxcclxuICAgIEdPT0dMRV9NQVBTOiAnZ29vZ2xlX21hcHMnLFxyXG4gICAgV0FaRTogJ3dhemUnLFxyXG4gICAgQ0lUWU1BUFBFUjogJ2NpdHltYXBwZXInLFxyXG4gICAgTkFWSUdPTjogJ25hdmlnb24nLFxyXG4gICAgVFJBTlNJVF9BUFA6ICd0cmFuc2l0X2FwcCcsXHJcbiAgICBZQU5ERVg6ICd5YW5kZXgnLFxyXG4gICAgVUJFUjogJ3ViZXInLFxyXG4gICAgVE9NVE9NOiAndG9tdG9tJyxcclxuICAgIEJJTkdfTUFQUzogJ2JpbmdfbWFwcycsXHJcbiAgICBTWUdJQzogJ3N5Z2ljJyxcclxuICAgIEhFUkVfTUFQUzogJ2hlcmVfbWFwcycsXHJcbiAgICBNT09WSVQ6ICdtb292aXQnLFxyXG4gIH07XHJcblxyXG4gIFRSQU5TUE9SVF9NT0RFOiBhbnkgPSB7XHJcbiAgICBEUklWSU5HOiAnZHJpdmluZycsXHJcbiAgICBXQUxLSU5HOiAnd2Fsa2luZycsXHJcbiAgICBCSUNZQ0xJTkc6ICdiaWN5Y2xpbmcnLFxyXG4gICAgVFJBTlNJVDogJ3RyYW5zaXQnLFxyXG4gIH07XHJcbiAgYXBwU2VsZWN0aW9uOiBBcHBTZWxlY3Rpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIExhdW5jaGVzIG5hdmlnYXRvciBhcHBcclxuICAgKiBAcGFyYW0gZGVzdGluYXRpb24ge3N0cmluZ3xudW1iZXJbXX0gTG9jYXRpb24gbmFtZSBvciBjb29yZGluYXRlcyAoYXMgc3RyaW5nIG9yIGFycmF5KVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtMYXVuY2hOYXZpZ2F0b3JPcHRpb25zfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAyLFxyXG4gICAgZXJyb3JJbmRleDogMyxcclxuICB9KVxyXG4gIG5hdmlnYXRlKGRlc3RpbmF0aW9uOiBzdHJpbmcgfCBudW1iZXJbXSwgb3B0aW9ucz86IExhdW5jaE5hdmlnYXRvck9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gYXBwIGlzIGluc3RhbGxlZCBhbmQgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IGRldmljZS5cclxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNBcHBBdmFpbGFibGUoYXBwOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIGxpc3QgaW5kaWNhdGluZyB3aGljaCBhcHBzIGFyZSBpbnN0YWxsZWQgYW5kIGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBkZXZpY2UuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nW10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhdmFpbGFibGVBcHBzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIGFwcC5cclxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBnZXRBcHBEaXNwbGF5TmFtZShhcHA6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGxpc3Qgb2Ygc3VwcG9ydGVkIGFwcHMgb24gYSBnaXZlbiBwbGF0Zm9ybS5cclxuICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZ2V0QXBwc0ZvclBsYXRmb3JtKHBsYXRmb3JtOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgaWYgYW4gYXBwIG9uIGEgZ2l2ZW4gcGxhdGZvcm0gc3VwcG9ydHMgc3BlY2lmaWNhdGlvbiBvZiB0cmFuc3BvcnQgbW9kZS5cclxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9IHNwZWNpZmllZCBhcyBhIHN0cmluZywgeW91IGNhbiB1c2Ugb25lIG9mIHRoZSBjb25zdGFudHMsIGUuZyBgTGF1bmNoTmF2aWdhdG9yLkFQUC5HT09HTEVfTUFQU2BcclxuICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzdXBwb3J0c1RyYW5zcG9ydE1vZGUoYXBwOiBzdHJpbmcsIHBsYXRmb3JtOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgdHJhbnNwb3J0IG1vZGVzIHN1cHBvcnRlZCBieSBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybS5cclxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldFRyYW5zcG9ydE1vZGVzKGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGFwcCB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHN1cHBvcnRzRGVzdE5hbWUoYXBwOiBzdHJpbmcsIHBsYXRmb3JtOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybSBzdXBwb3J0cyBzcGVjaWZpY2F0aW9uIG9mIHN0YXJ0IGxvY2F0aW9uLlxyXG4gICAqIEBwYXJhbSBhcHAge3N0cmluZ31cclxuICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzdXBwb3J0c1N0YXJ0KGFwcDogc3RyaW5nLCBwbGF0Zm9ybTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3VwcG9ydHNTdGFydE5hbWUoYXBwOiBzdHJpbmcsIHBsYXRmb3JtOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyBpZiBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybSBzdXBwb3J0cyBzcGVjaWZpY2F0aW9uIG9mIGxhdW5jaCBtb2RlLlxyXG4gICAqIE5vdGUgdGhhdCBjdXJyZW50bHkgb25seSBHb29nbGUgTWFwcyBvbiBBbmRyb2lkIGRvZXMuXHJcbiAgICogQHBhcmFtIGFwcCB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHN1cHBvcnRzTGF1bmNoTW9kZShhcHA6IHN0cmluZywgcGxhdGZvcm06IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uIHtzdHJpbmcgfCBudW1iZXJbXX1cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TGF1bmNoTmF2aWdhdG9yT3B0aW9uc31cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICB1c2VyU2VsZWN0KGRlc3RpbmF0aW9uOiBzdHJpbmcgfCBudW1iZXJbXSwgb3B0aW9uczogTGF1bmNoTmF2aWdhdG9yT3B0aW9ucyk6IHZvaWQge31cclxufVxyXG4iXX0=