import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance, cordova, checkAvailability } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PushapePush = /** @class */ (function (_super) {
    __extends(PushapePush, _super);
    function PushapePush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Init push notifications
     * @param options {PushapeOptions}
     * @return {PushObject}
     */
    PushapePush.prototype.init = function (options) {
        return new PushObject(options);
    };
    PushapePush.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    PushapePush.prototype.createChannel = function (channel) { return cordova(this, "createChannel", { "callbackOrder": "reverse" }, arguments); };
    PushapePush.prototype.deleteChannel = function (id) { return cordova(this, "deleteChannel", { "callbackOrder": "reverse" }, arguments); };
    PushapePush.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    PushapePush.pluginName = "PushapePush";
    PushapePush.plugin = "pushape-cordova-push";
    PushapePush.pluginRef = "PushNotification";
    PushapePush.repo = "https://github.com/gluelabs/pushape-cordova-push";
    PushapePush.install = "ionic cordova plugin add pushape-cordova-push";
    PushapePush.platforms = ["Android", "Browser", "iOS"];
    PushapePush = __decorate([
        Injectable()
    ], PushapePush);
    return PushapePush;
}(IonicNativePlugin));
export { PushapePush };
var PushObject = /** @class */ (function () {
    function PushObject(options) {
        if (checkAvailability('PushNotification', 'init', 'PushNotification') === true) {
            if (typeof window !== 'undefined') {
                this._objectInstance = window.PushNotification.init(options);
            }
        }
    }
    PushObject.prototype.on = function (event) { return cordovaInstance(this, "on", { "observable": true, "clearFunction": "off", "clearWithArgs": true }, arguments); };
    PushObject.prototype.unregister = function () { return cordovaInstance(this, "unregister", {}, arguments); };
    PushObject.prototype.setApplicationIconBadgeNumber = function (count) { return cordovaInstance(this, "setApplicationIconBadgeNumber", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.getApplicationIconBadgeNumber = function () { return cordovaInstance(this, "getApplicationIconBadgeNumber", {}, arguments); };
    PushObject.prototype.finish = function (id) { return cordovaInstance(this, "finish", { "callbackOrder": "reverse" }, arguments); };
    PushObject.prototype.clearAllNotifications = function () { return cordovaInstance(this, "clearAllNotifications", {}, arguments); };
    PushObject.prototype.subscribe = function (topic) { return cordovaInstance(this, "subscribe", {}, arguments); };
    PushObject.prototype.unsubscribe = function (topic) { return cordovaInstance(this, "unsubscribe", {}, arguments); };
    var _a;
    PushObject.pluginName = "PushapePush";
    PushObject.plugin = "pushape-cordova-push";
    PushObject.pluginRef = "PushNotification";
    PushObject = __decorate([
        __metadata("design:paramtypes", [typeof (_a = typeof PushapeOptions !== "undefined" && PushapeOptions) === "function" ? _a : Object])
    ], PushObject);
    return PushObject;
}());
export { PushObject };
//# sourceMappingURL=data:application/json;base64,