var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var TouchIDOriginal = /** @class */ (function (_super) {
    __extends(TouchIDOriginal, _super);
    function TouchIDOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchIDOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprint = function (message) { return cordova(this, "verifyFingerprint", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprintWithCustomPasswordFallback = function (message) { return cordova(this, "verifyFingerprintWithCustomPasswordFallback", {}, arguments); };
    TouchIDOriginal.prototype.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) { return cordova(this, "verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel", {}, arguments); };
    TouchIDOriginal.prototype.didFingerprintDatabaseChange = function () { return cordova(this, "didFingerprintDatabaseChange", {}, arguments); };
    TouchIDOriginal.pluginName = "TouchID";
    TouchIDOriginal.plugin = "cordova-plugin-touch-id";
    TouchIDOriginal.pluginRef = "plugins.touchid";
    TouchIDOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-touch-id";
    TouchIDOriginal.platforms = ["iOS"];
    return TouchIDOriginal;
}(IonicNativePlugin));
var TouchID = new TouchIDOriginal();
export { TouchID };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RvdWNoLWlkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1EM0MsMkJBQWlCOzs7O0lBTzVDLDZCQUFXO0lBV1gsbUNBQWlCLGFBQUMsT0FBZTtJQVdqQyw2REFBMkMsYUFBQyxPQUFlO0lBWTNELGtGQUFnRSxhQUM5RCxPQUFlLEVBQ2Ysa0JBQTBCO0lBVzVCLDhDQUE0Qjs7Ozs7O2tCQTFHOUI7RUFvRDZCLGlCQUFpQjtTQUFqQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBUb3VjaCBJRFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU2NhbiB0aGUgZmluZ2VycHJpbnQgb2YgYSB1c2VyIHdpdGggdGhlIFRvdWNoSUQgc2Vuc29yLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXRvdWNoLWlkYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1RvdWNoSUQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCkuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFRvdWNoSUQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3RvdWNoLWlkL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdG91Y2hJZDogVG91Y2hJRCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnRvdWNoSWQuaXNBdmFpbGFibGUoKVxyXG4gKiAgIC50aGVuKFxyXG4gKiAgICAgcmVzID0+IGNvbnNvbGUubG9nKCdUb3VjaElEIGlzIGF2YWlsYWJsZSEnKSxcclxuICogICAgIGVyciA9PiBjb25zb2xlLmVycm9yKCdUb3VjaElEIGlzIG5vdCBhdmFpbGFibGUnLCBlcnIpXHJcbiAqICAgKTtcclxuICpcclxuICogdGhpcy50b3VjaElkLnZlcmlmeUZpbmdlcnByaW50KCdTY2FuIHlvdXIgZmluZ2VycHJpbnQgcGxlYXNlJylcclxuICogICAudGhlbihcclxuICogICAgIHJlcyA9PiBjb25zb2xlLmxvZygnT2snLCByZXMpLFxyXG4gKiAgICAgZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yJywgZXJyKVxyXG4gKiAgICk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiAjIyMgRXJyb3IgQ29kZXNcclxuICpcclxuICogVGhlIHBsdWdpbiB3aWxsIHJlamVjdCBmb3IgdmFyaW91cyByZWFzb25zLiBZb3VyIGFwcCB3aWxsIG1vc3QgbGlrZWx5IG5lZWQgdG8gcmVzcG9uZCB0byB0aGUgY2FzZXMgZGlmZmVyZW50bHkuXHJcbiAqXHJcbiAqIEhlcmUgaXMgYSBsaXN0IG9mIHNvbWUgb2YgdGhlIGVycm9yIGNvZGVzOlxyXG4gKlxyXG4gKiAgLSAgYC0xYCAtIEZpbmdlcnByaW50IHNjYW4gZmFpbGVkIG1vcmUgdGhhbiAzIHRpbWVzXHJcbiAqICAtICBgLTJgIG9yIGAtMTI4YCAtIFVzZXIgdGFwcGVkIHRoZSAnQ2FuY2VsJyBidXR0b25cclxuICogIC0gIGAtM2AgLSBVc2VyIHRhcHBlZCB0aGUgJ0VudGVyIFBhc3Njb2RlJyBvciAnRW50ZXIgUGFzc3dvcmQnIGJ1dHRvblxyXG4gKiAgLSAgYC00YCAtIFRoZSBzY2FuIHdhcyBjYW5jZWxsZWQgYnkgdGhlIHN5c3RlbSAoSG9tZSBidXR0b24gZm9yIGV4YW1wbGUpXHJcbiAqICAtICBgLTZgIC0gVG91Y2hJRCBpcyBub3QgQXZhaWxhYmxlXHJcbiAqICAtICBgLThgIC0gVG91Y2hJRCBpcyBsb2NrZWQgb3V0IGZyb20gdG9vIG1hbnkgdHJpZXNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdUb3VjaElEJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCcsXHJcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy50b3VjaGlkJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXRvdWNoLWlkJyxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRvdWNoSUQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIFdoZXRoZXIgVG91Y2hJRCBpcyBhdmFpbGFibGUgb3Igbm90LlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB5ZXMsIHJlamVjdHMgaWYgbm8uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIGFuZCB3YWl0IGZvciBhIGZpbmdlcnByaW50IHNjYW4uIElmIHVzZXIgdGFwcyAnRW50ZXIgUGFzc3dvcmQnIGJ1dHRvbiwgYnJpbmdzIHVwIHN0YW5kYXJkIHN5c3RlbSBwYXNzY29kZSBzY3JlZW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoZSByZXNvbHZlcyBpZiB0aGUgZmluZ2VycHJpbnQgc2NhbiB3YXMgc3VjY2Vzc2Z1bCwgcmVqZWN0cyB3aXRoIGFuIGVycm9yIGNvZGUgKHNlZSBhYm92ZSkuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHZlcmlmeUZpbmdlcnByaW50KG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIGFuZCB3YWl0IGZvciBhIGZpbmdlcnByaW50IHNjYW4uIElmIHVzZXIgdGFwcyAnRW50ZXIgUGFzc3dvcmQnIGJ1dHRvbiwgcmVqZWN0cyB3aXRoIGNvZGUgJy0zJyAoc2VlIGFib3ZlKS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICBUaGUgbWVzc2FnZSB0byBkaXNwbGF5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFjayhtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBUb3VjaElEIGRpYWxvZyB3aXRoIGN1c3RvbSAnRW50ZXIgUGFzc3dvcmQnIG1lc3NhZ2UgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCByZWplY3RzIHdpdGggY29kZSAnLTMnIChzZWUgYWJvdmUpLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZW50ZXJQYXNzd29yZExhYmVsICBDdXN0b20gdGV4dCBmb3IgdGhlICdFbnRlciBQYXNzd29yZCcgYnV0dG9uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFja0FuZEVudGVyUGFzc3dvcmRMYWJlbChcclxuICAgIG1lc3NhZ2U6IHN0cmluZyxcclxuICAgIGVudGVyUGFzc3dvcmRMYWJlbDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGUgZmluZ2VycHJpbnQgZGF0YWJhc2UgY2hhbmdlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgeWVzLCByZWplY3RzIGlmIG5vLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaWRGaW5nZXJwcmludERhdGFiYXNlQ2hhbmdlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==