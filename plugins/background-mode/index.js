var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BackgroundModeOriginal = /** @class */ (function (_super) {
    __extends(BackgroundModeOriginal, _super);
    function BackgroundModeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundModeOriginal.prototype.enable = function () { return cordova(this, "enable", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.disable = function () { return cordova(this, "disable", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.setEnabled = function (enable) { return cordova(this, "setEnabled", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.fireEvent = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return cordova(this, "fireEvent", { "sync": true }, arguments);
    };
    BackgroundModeOriginal.prototype.isEnabled = function () { return cordova(this, "isEnabled", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.isActive = function () { return cordova(this, "isActive", { "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.setDefaults = function (overrides) { return cordova(this, "setDefaults", { "platforms": ["Android"] }, arguments); };
    BackgroundModeOriginal.prototype.configure = function (options) { return cordova(this, "configure", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.on = function (event) { return cordova(this, "on", { "observable": true, "clearFunction": "un", "clearWithArgs": true }, arguments); };
    BackgroundModeOriginal.prototype.un = function (event, callback) { return cordova(this, "un", {}, arguments); };
    BackgroundModeOriginal.prototype.moveToBackground = function () { return cordova(this, "moveToBackground", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.disableWebViewOptimizations = function () { return cordova(this, "disableWebViewOptimizations", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.moveToForeground = function () { return cordova(this, "moveToForeground", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.overrideBackButton = function () { return cordova(this, "overrideBackButton", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.excludeFromTaskList = function () { return cordova(this, "excludeFromTaskList", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.isScreenOff = function (fn) { return cordova(this, "isScreenOff", { "platforms": ["Android"] }, arguments); };
    BackgroundModeOriginal.prototype.wakeUp = function () { return cordova(this, "wakeUp", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.unlock = function () { return cordova(this, "unlock", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.prototype.disableBatteryOptimizations = function () { return cordova(this, "disableBatteryOptimizations", { "platforms": ["Android"], "sync": true }, arguments); };
    BackgroundModeOriginal.pluginName = "BackgroundMode";
    BackgroundModeOriginal.plugin = "cordova-plugin-background-mode";
    BackgroundModeOriginal.pluginRef = "cordova.plugins.backgroundMode";
    BackgroundModeOriginal.repo = "https://github.com/katzer/cordova-plugin-background-mode";
    BackgroundModeOriginal.platforms = ["AmazonFire OS", "Android", "Browser", "iOS", "Windows"];
    return BackgroundModeOriginal;
}(IonicNativePlugin));
var BackgroundMode = new BackgroundModeOriginal();
export { BackgroundMode };
//# sourceMappingURL=data:application/json;base64,