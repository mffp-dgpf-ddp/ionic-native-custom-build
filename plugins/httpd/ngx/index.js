import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Httpd = /** @class */ (function (_super) {
    __extends(Httpd, _super);
    function Httpd() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Httpd.prototype.startServer = function (options) { return cordova(this, "startServer", { "observable": true, "clearFunction": "stopServer" }, arguments); };
    Httpd.prototype.getUrl = function () { return cordova(this, "getUrl", {}, arguments); };
    Httpd.prototype.getLocalPath = function () { return cordova(this, "getLocalPath", {}, arguments); };
    Httpd.pluginName = "Httpd";
    Httpd.plugin = "cordova-plugin-httpd";
    Httpd.pluginRef = "cordova.plugins.CorHttpd";
    Httpd.repo = "https://github.com/floatinghotpot/cordova-httpd";
    Httpd.platforms = ["Android", "iOS", "macOS"];
    Httpd = __decorate([
        Injectable()
    ], Httpd);
    return Httpd;
}(IonicNativePlugin));
export { Httpd };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2h0dHBkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBdURQLHlCQUFpQjs7OztJQVUxQywyQkFBVyxhQUFDLE9BQXNCO0lBU2xDLHNCQUFNO0lBU04sNEJBQVk7Ozs7OztJQTVCRCxLQUFLO1FBRGpCLFVBQVUsRUFBRTtPQUNBLEtBQUs7Z0JBekRsQjtFQXlEMkIsaUJBQWlCO1NBQS9CLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBkT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHB1YmxpYyByb290IGRpcmVjdG9yeSBmb3IgeW91ciB3ZWIgc2VydmVyLiBUaGlzIHBhdGggaXMgcmVsYXRpdmUgdG8geW91ciBhcHAncyB3d3cgZGlyZWN0b3J5LlxyXG4gICAqIERlZmF1bHQgaXMgY3VycmVudCBkaXJlY3RvcnkuXHJcbiAgICovXHJcbiAgd3d3X3Jvb3Q/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBvcnQgbnVtYmVyIHRvIHVzZS5cclxuICAgKiBEZWZhdWx0IGlzIDg4ODhcclxuICAgKi9cclxuICBwb3J0PzogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFNldHRpbmcgdGhpcyBvcHRpb24gdG8gZmFsc2Ugd2lsbCBhbGxvdyByZW1vdGUgYWNjZXNzIHRvIHlvdXIgd2ViIHNlcnZlciAob3ZlciBhbnkgSVApLlxyXG4gICAqIERlZmF1bHQgaXMgZmFsc2UuXHJcbiAgICovXHJcbiAgbG9jYWxob3N0X29ubHk/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgSHR0cGRcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEVtYmVkZGVkIGh0dHBkIGZvciBDb3Jkb3ZhIGFwcHMuIExpZ2h0IHdlaWdodCBIVFRQIHNlcnZlci5cclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSHR0cGQsIEh0dHBkT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaHR0cGQvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBodHRwZDogSHR0cGQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogbGV0IG9wdGlvbnM6IEh0dHBkT3B0aW9ucyA9IHtcclxuICogICAgICB3d3dfcm9vdDogJ2h0dHBkX3Jvb3QnLCAvLyByZWxhdGl2ZSBwYXRoIHRvIGFwcCdzIHd3dyBkaXJlY3RvcnlcclxuICogICAgICBwb3J0OiA4MCxcclxuICogICAgICBsb2NhbGhvc3Rfb25seTogZmFsc2VcclxuICogIH1cclxuICpcclxuICogdGhpcy5odHRwZC5zdGFydFNlcnZlcihvcHRpb25zKS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICogIGNvbnNvbGUubG9nKCdTZXJ2ZXIgaXMgbGl2ZScpO1xyXG4gKiB9KTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEh0dHBkT3B0aW9uc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0h0dHBkJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1odHRwZCcsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLkNvckh0dHBkJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5naG90cG90L2NvcmRvdmEtaHR0cGQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdtYWNPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBIdHRwZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTdGFydHMgYSB3ZWIgc2VydmVyLlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtIdHRwZE9wdGlvbnN9XHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlLiBTdWJzY3JpYmUgdG8gcmVjZWl2ZSB0aGUgVVJMIGZvciB5b3VyIHdlYiBzZXJ2ZXIgKGlmIHN1Y2NlZWRlZCkuIFVuc3Vic2NyaWJlIHRvIHN0b3AgdGhlIHNlcnZlci5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BTZXJ2ZXInLFxyXG4gIH0pXHJcbiAgc3RhcnRTZXJ2ZXIob3B0aW9ucz86IEh0dHBkT3B0aW9ucyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBVUkwgb2YgdGhlIHJ1bm5pbmcgc2VydmVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBVUkwgb2YgdGhlIHdlYiBzZXJ2ZXIuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFVybCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBsb2NhbCBwYXRoIG9mIHRoZSBydW5uaW5nIHdlYnNlcnZlclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbG9jYWwgcGF0aCBvZiB0aGUgd2ViIHNlcnZlci5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TG9jYWxQYXRoKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==