import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var LastCam = /** @class */ (function (_super) {
    __extends(LastCam, _super);
    function LastCam() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LastCam.prototype.startCamera = function (options) { return cordova(this, "startCamera", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    LastCam.prototype.stopCamera = function () { return cordova(this, "stopCamera", {}, arguments); };
    LastCam.prototype.switchCamera = function () { return cordova(this, "switchCamera", {}, arguments); };
    LastCam.prototype.switchFlash = function () { return cordova(this, "switchFlash", {}, arguments); };
    LastCam.prototype.takePicture = function () { return cordova(this, "takePicture", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.startVideoCapture = function () { return cordova(this, "startVideoCapture", {}, arguments); };
    LastCam.prototype.stopVideoCapture = function () { return cordova(this, "stopVideoCapture", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.recordingTimer = function () { return cordova(this, "recordingTimer", { "successIndex": 0, "errorIndex": 1 }, arguments); };
    LastCam.prototype.watchRecordingTimer = function () { return cordova(this, "watchRecordingTimer", { "successIndex": 0, "errorIndex": 1, "observable": true }, arguments); };
    LastCam.pluginName = "LastCam";
    LastCam.plugin = "cordova-plugin-last-cam";
    LastCam.pluginRef = "LastCam";
    LastCam.repo = "https://github.com/bengejd/cordova-plugin-last-cam";
    LastCam.platforms = ["iOS"];
    LastCam = __decorate([
        Injectable()
    ], LastCam);
    return LastCam;
}(IonicNativePlugin));
export { LastCam };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2xhc3QtY2FtL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBb0NMLDJCQUFpQjs7OztJQVU1Qyw2QkFBVyxhQUFDLE9BQThCO0lBUzFDLDRCQUFVO0lBU1YsOEJBQVk7SUFTWiw2QkFBVztJQVlYLDZCQUFXO0lBU1gsbUNBQWlCO0lBWWpCLGtDQUFnQjtJQVloQixnQ0FBYztJQWFkLHFDQUFtQjs7Ozs7O0lBL0ZSLE9BQU87UUFEbkIsVUFBVSxFQUFFO09BQ0EsT0FBTztrQkF0Q3BCO0VBc0M2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGFzdENhbVN0YXJ0dXBPcHRpb25zIHtcclxuICAvKiogVGhlIGxlZnQgZWRnZSBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xyXG4gIHg/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBUaGUgdG9wIGVkZ2UgaW4gcGl4ZWxzLCBkZWZhdWx0IDAgKi9cclxuICB5PzogbnVtYmVyO1xyXG5cclxuICAvKiogVGhlIHdpZHRoIGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLndpZHRoICovXHJcbiAgd2lkdGg/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBUaGUgaGVpZ2h0IGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLmhlaWdodCAqL1xyXG4gIGhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgLyoqIENob29zZSB0aGUgY2FtZXJhIHRvIHVzZSAnZnJvbnQnIG9yICdiYWNrJywgZGVmYXVsdCAnZnJvbnQnICovXHJcbiAgY2FtZXJhPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgTGFzdENhbVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogTGFzdCBDYW0gaXMgYSBDYW1lcmEgUHJldmlldyBwbHVnaW4gdGhhdCBhbGxvd3MgeW91IHRvIHRha2UgY2FwdHVyZSBib3RoIFZpZGVvcyBhbmQgaW1hZ2VzIGluIGFcclxuICogY3VzdG9tIGh0bWwgcHJldmlldyBvZiB5b3VyIGNob2ljZS5cclxuICpcclxuICogQGludGVyZmFjZXNcclxuICogTGFzdENhbVN0YXJ0dXBPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTGFzdENhbScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbGFzdC1jYW0nLFxyXG4gIHBsdWdpblJlZjogJ0xhc3RDYW0nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYmVuZ2VqZC9jb3Jkb3ZhLXBsdWdpbi1sYXN0LWNhbScsXHJcbiAgcGxhdGZvcm1zOiBbJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMYXN0Q2FtIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgY2FtZXJhIHByZXZpZXcgaW5zdGFuY2UuXHJcbiAgICogQHBhcmFtIHtMYXN0Q2FtU3RhcnR1cE9wdGlvbnN9IG9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogMixcclxuICB9KVxyXG4gIHN0YXJ0Q2FtZXJhKG9wdGlvbnM6IExhc3RDYW1TdGFydHVwT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wcyB0aGUgY2FtZXJhIHByZXZpZXcgaW5zdGFuY2UuIChpT1MpXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wQ2FtZXJhKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTd2l0Y2ggZnJvbSB0aGUgcmVhciBjYW1lcmEgYW5kIGZyb250IGNhbWVyYSwgaWYgYXZhaWxhYmxlLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3dpdGNoQ2FtZXJhKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTd2l0Y2ggdGhlIGZsYXNoIG1vZGUuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzd2l0Y2hGbGFzaCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGFrZSB0aGUgcGljdHVyZSAoYmFzZTY0KVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgdGFrZVBpY3R1cmUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IHRoZSB2aWRlbyBjYXB0dXJlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydFZpZGVvQ2FwdHVyZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgdGhlIHZpZGVvIGNhcHR1cmVcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAwLFxyXG4gICAgZXJyb3JJbmRleDogMSxcclxuICB9KVxyXG4gIHN0b3BWaWRlb0NhcHR1cmUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb21pc2Ugb2YgdGhlIHJlY29yZGluZ1RpbWVyLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gIH0pXHJcbiAgcmVjb3JkaW5nVGltZXIoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9ic2VydmFibGUgb2YgdGhlIHJlY29yZGluZ1RpbWVyLlxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDAsXHJcbiAgICBlcnJvckluZGV4OiAxLFxyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIHdhdGNoUmVjb3JkaW5nVGltZXIoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19