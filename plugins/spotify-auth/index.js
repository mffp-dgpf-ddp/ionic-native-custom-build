var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SpotifyAuthOriginal = /** @class */ (function (_super) {
    __extends(SpotifyAuthOriginal, _super);
    function SpotifyAuthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpotifyAuthOriginal.prototype.authorize = function (cfg) { return cordova(this, "authorize", { "sync": false }, arguments); };
    SpotifyAuthOriginal.prototype.forget = function () { return cordova(this, "forget", { "sync": true }, arguments); };
    SpotifyAuthOriginal.pluginName = "SpotifyAuth";
    SpotifyAuthOriginal.plugin = "cordova-spotify-oauth";
    SpotifyAuthOriginal.pluginRef = "cordova.plugins.spotifyAuth";
    SpotifyAuthOriginal.repo = "https://github.com/Festify/cordova-spotify-oauth";
    SpotifyAuthOriginal.install = "ionic cordova plugin add cordova-spotify-oauth --variable LOCAL_STORAGE_KEY=\"SpotifyOAuthData\"";
    SpotifyAuthOriginal.installVariables = ["LOCAL_STORAGE_KEY"];
    SpotifyAuthOriginal.platforms = ["Android", "iOS"];
    return SpotifyAuthOriginal;
}(IonicNativePlugin));
var SpotifyAuth = new SpotifyAuthOriginal();
export { SpotifyAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Nwb3RpZnktYXV0aC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrR3ZDLCtCQUFpQjs7OztJQXVCaEQsK0JBQVMsYUFBQyxHQUFXO0lBZXJCLDRCQUFNOzs7Ozs7OztzQkF6SVI7RUFtR2lDLGlCQUFpQjtTQUFyQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBPQXV0aCBjb25maWd1cmF0aW9uIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZyB7XHJcbiAgLyoqIFRoZSBjbGllbnQgSUQgYXMgcGVyIHRoZSBTcG90aWZ5IGRldiBjb25zb2xlLiAqL1xyXG4gIGNsaWVudElkOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBUaGUgcmVkaXJlY3QgVVJJIGFzIGVudGVyZWQgaW4gdGhlIFNwb3RpZnkgZGV2IGNvbnNvbGUuICovXHJcbiAgcmVkaXJlY3RVcmw6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2FmZXR5IG1hcmdpbiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIGZvciB0aGUgdG9rZW4gcmVmcmVzaC5cclxuICAgKlxyXG4gICAqIFRoZSBwbHVnaW4gYXBwbGllcyBhIHNhZmV0eSBtYXJnaW4gdG8gdGhlIHRva2VuIGxpZmV0aW1lIGluIG9yZGVyXHJcbiAgICogdG8gZ2l2ZSB0aGUgdG9rZW4gdXNlciBlbm91Z2ggdGltZSB0byBwZXJmb3JtIGFsbCBvcGVyYXRpb25zIG5lZWRlZC5cclxuICAgKlxyXG4gICAqIE90aGVyd2lzZSB0aGUgcGx1Z2luIG1pZ2h0IGhhbmQgb3V0IGEgdG9rZW4gdGhhdCBpcyBhbHJlYWR5IGV4cGlyZWRcclxuICAgKiBiZWZvcmUgaXQgY291bGQgZXZlciBiZSB1c2VkLlxyXG4gICAqXHJcbiAgICogVGhlIHNhZmV0eSBtYXJnaW4gZGVmYXVsdHMgdG8gMzBzLlxyXG4gICAqL1xyXG4gIHJlZnJlc2hTYWZldHlNYXJnaW4/OiBudW1iZXI7XHJcblxyXG4gIC8qKiBSZXF1ZXN0ZWQgT0F1dGggc2NvcGVzLiAqL1xyXG4gIHNjb3Blczogc3RyaW5nW107XHJcblxyXG4gIC8qKiBUaGUgdG9rZW4gZXhjaGFuZ2UgVVJMLiAqL1xyXG4gIHRva2VuRXhjaGFuZ2VVcmw6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSB0b2tlbiByZWZyZXNoIFVSTC4gKi9cclxuICB0b2tlblJlZnJlc2hVcmw6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBhdXRob3JpemF0aW9uIGRhdGEuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhvcml6YXRpb25EYXRhIHtcclxuICAvKiogQSB2YWxpZCBhY2Nlc3MgdG9rZW4uICovXHJcbiAgYWNjZXNzVG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBlbmNyeXB0ZWQgcmVmcmVzaCB0b2tlbi4gKi9cclxuICBlbmNyeXB0ZWRSZWZyZXNoVG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBkYXRlIChmcm9tIFVUQywgaW4gbWlsbGlzZWNvbmRzKSB3aGVuIHRoZSBnaXZlbiBhY2Nlc3MgdG9rZW4gZXhwaXJlcy4gKi9cclxuICBleHBpcmVzQXQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFNwb3RpZnkgQXV0aFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIGF1dGhlbnRpY2F0aW5nIHdpdGggU3BvdGlmeVxyXG4gKiA+IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXN0aWZ5L2NvcmRvdmEtc3BvdGlmeS1vYXV0aFxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTcG90aWZ5QXV0aCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3BvdGlmeS1hdXRoL25neCc7XHJcbiAqXHJcbiAqIC8vIFsuLi5dXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BvdGlmeUF1dGg6IFNwb3RpZnlBdXRoKSB7IH1cclxuICpcclxuICogLy8gWy4uLl1cclxuICpcclxuICogY29uc3QgY29uZmlnID0ge1xyXG4gKiAgIGNsaWVudElkOiBcIjxTUE9USUZZIENMSUVOVCBJRD5cIixcclxuICogICByZWRpcmVjdFVybDogXCI8UkVESVJFQ1QgVVJMLCBNVVNUIE1BVENIIFdJVEggQVVUSCBFTkRQT0lOVCBBTkQgU1BPVElGWSBERVYgQ09OU09MRT5cIixcclxuICogICBzY29wZXM6IFtcInN0cmVhbWluZ1wiXSwgLy8gc2VlIFNwb3RpZnkgRGV2IGNvbnNvbGUgZm9yIGFsbCBzY29wZXNcclxuICogICB0b2tlbkV4Y2hhbmdlVXJsOiBcIjxVUkwgT0YgVE9LRU4gRVhDSEFOR0UgSFRUUCBFTkRQT0lOVD5cIixcclxuICogICB0b2tlblJlZnJlc2hVcmw6IFwiPFVSTCBPRiBUT0tFTiBSRUZSRVNIIEhUVFAgRU5EUE9JTlQ+XCIsXHJcbiAqIH07XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmF1dGhvcml6ZShjb25maWcpXHJcbiAqICAgLnRoZW4oKHsgYWNjZXNzVG9rZW4sIGV4cGlyZXNBdCB9KSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhgR290IGFuIGFjY2VzcyB0b2tlbiwgaXRzICR7YWNjZXNzVG9rZW59IWApO1xyXG4gKiAgICAgY29uc29sZS5sb2coYEl0cyBnb2luZyB0byBleHBpcmUgaW4gJHtleHBpcmVzQXQgLSBEYXRlLm5vdygpfW1zLmApO1xyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiAvLyBbLi4uXVxyXG4gKlxyXG4gKiB0aGlzLnNwb3RpZnlBdXRoLmZvcmdldCgpO1xyXG4gKlxyXG4gKiAvLyBbLi4uXVxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTcG90aWZ5QXV0aCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1zcG90aWZ5LW9hdXRoJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3BvdGlmeUF1dGgnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRmVzdGlmeS9jb3Jkb3ZhLXNwb3RpZnktb2F1dGgnLFxyXG4gIGluc3RhbGw6ICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1zcG90aWZ5LW9hdXRoIC0tdmFyaWFibGUgTE9DQUxfU1RPUkFHRV9LRVk9XCJTcG90aWZ5T0F1dGhEYXRhXCInLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnTE9DQUxfU1RPUkFHRV9LRVknXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3BvdGlmeUF1dGggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogT2J0YWlucyB2YWxpZCBhdXRob3JpemF0aW9uIGRhdGEuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyB0aGUgbmVjZXNzYXJ5IHN0ZXBzIGluIG9yZGVyIHRvIG9idGFpbiBhIHZhbGlkXHJcbiAgICogYWNjZXNzIHRva2VuLiBJdCBwZXJmb3JtcyB0aGUgT0F1dGggZGFuY2UgcHJvbXB0aW5nIHRoZSB1c2VyIHRvIGxvZyBpbixcclxuICAgKiBleGNoYW5nZXMgdGhlIG9idGFpbmVkIGF1dGhvcml6YXRpb24gY29kZSBmb3IgYW4gYWNjZXNzIGFuZCBhIHJlZnJlc2hcclxuICAgKiB0b2tlbiwgY2FjaGVzIHRob3NlLCBhbmQgcmV0dXJucyBib3RoIHRvIHRoZSBkZXZlbG9wZXIuXHJcbiAgICpcclxuICAgKiBXaGVuIGl0IGlzIGludm9rZWQgYWdhaW4sIGl0IHdpbGwgZmlyc3QgY2hlY2sgd2hldGhlciB0aGUgY2FjaGVkIGFjY2Vzc1xyXG4gICAqIHRva2VuIGlzIHN0aWxsIHZhbGlkIChpbmNsdWRpbmcgYSBjb25maWd1cmFibGUgc2FmZXR5IG1hcmdpbikgYW5kIHRoZVxyXG4gICAqIHNjb3BlcyBlcXVhbCwgYW5kIHJldHVybiB0aGUgdG9rZW4gZGlyZWN0bHkgaWYgdGhhdCBpcyB0aGUgY2FzZS4gT3RoZXJ3aXNlLFxyXG4gICAqIHRoZSBtZXRob2Qgd2lsbCB0cmFuc3BhcmVudGx5IHJlZnJlc2ggdGhlIHRva2VuIChvciBvYnRhaW4gYSBuZXcgb25lIGlmXHJcbiAgICogdGhlIHNjb3BlcyBjaGFuZ2VkKSBhbmQgcmV0dXJuIHRoYXQuXHJcbiAgICpcclxuICAgKiBCb3R0b20gbGluZSAtIGFsd2F5cyBjYWxsIHRoaXMgaWYgeW91IG5lZWQgYSB2YWxpZCBhY2Nlc3MgdG9rZW4gaW4geW91ciBjb2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNmZyB7Q29uZmlnfSBjb25maWd1cmF0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxBdXRob3JpemF0aW9uRGF0YT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3luYzogZmFsc2UsXHJcbiAgfSlcclxuICBhdXRob3JpemUoY2ZnOiBDb25maWcpOiBQcm9taXNlPEF1dGhvcml6YXRpb25EYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGFsbCBjYWNoZWQgZGF0YSBzbyB0aGF0IGBhdXRob3JpemVgIHBlcmZvcm1zIHRoZSBmdWxsXHJcbiAgICogb2F1dGggZGFuY2UgYWdhaW4uXHJcbiAgICpcclxuICAgKiBUaGlzIGlzIGFraW4gdG8gYSBcImxvZ291dFwiLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7dm9pZH1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzeW5jOiB0cnVlLFxyXG4gIH0pXHJcbiAgZm9yZ2V0KCk6IHZvaWQge31cclxufVxyXG4iXX0=