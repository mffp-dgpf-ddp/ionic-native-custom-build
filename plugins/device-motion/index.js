var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var DeviceMotionOriginal = /** @class */ (function (_super) {
    __extends(DeviceMotionOriginal, _super);
    function DeviceMotionOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceMotionOriginal.prototype.getCurrentAcceleration = function () { return cordova(this, "getCurrentAcceleration", {}, arguments); };
    DeviceMotionOriginal.prototype.watchAcceleration = function (options) { return cordova(this, "watchAcceleration", { "callbackOrder": "reverse", "observable": true, "clearFunction": "clearWatch" }, arguments); };
    DeviceMotionOriginal.pluginName = "DeviceMotion";
    DeviceMotionOriginal.plugin = "cordova-plugin-device-motion";
    DeviceMotionOriginal.pluginRef = "navigator.accelerometer";
    DeviceMotionOriginal.repo = "https://github.com/apache/cordova-plugin-device-motion";
    DeviceMotionOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "Firefox OS", "iOS", "Tizen", "Ubuntu", "Windows", "Windows Phone 8"];
    return DeviceMotionOriginal;
}(IonicNativePlugin));
var DeviceMotion = new DeviceMotionOriginal();
export { DeviceMotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1tb3Rpb24vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFpRkEsZ0NBQWlCOzs7O0lBTWpELDZDQUFzQjtJQWN0Qix3Q0FBaUIsYUFBQyxPQUEwQzs7Ozs7O3VCQXZHOUQ7RUFtRmtDLGlCQUFpQjtTQUF0QyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhIHtcclxuICAvKipcclxuICAgKiBBbW91bnQgb2YgYWNjZWxlcmF0aW9uIG9uIHRoZSB4LWF4aXMuIChpbiBtL3NeMilcclxuICAgKi9cclxuICB4OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFtb3VudCBvZiBhY2NlbGVyYXRpb24gb24gdGhlIHktYXhpcy4gKGluIG0vc14yKVxyXG4gICAqL1xyXG4gIHk6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQW1vdW50IG9mIGFjY2VsZXJhdGlvbiBvbiB0aGUgei1heGlzLiAoaW4gbS9zXjIpXHJcbiAgICovXHJcbiAgejogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGlvbiB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAqL1xyXG4gIHRpbWVzdGFtcDogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERldmljZU1vdGlvbkFjY2VsZXJvbWV0ZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBSZXF1ZXN0ZWQgcGVyaW9kIG9mIGNhbGxzIHRvIGFjY2VsZXJvbWV0ZXJTdWNjZXNzIHdpdGggYWNjZWxlcmF0aW9uIGRhdGEgaW4gTWlsbGlzZWNvbmRzLiBEZWZhdWx0OiAxMDAwMFxyXG4gICAqL1xyXG4gIGZyZXF1ZW5jeT86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERldmljZSBNb3Rpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEZXZpY2UgTW90aW9uIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbikuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERldmljZU1vdGlvbiwgRGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGV2aWNlLW1vdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRldmljZU1vdGlvbjogRGV2aWNlTW90aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIC8vIEdldCB0aGUgZGV2aWNlIGN1cnJlbnQgYWNjZWxlcmF0aW9uXHJcbiAqIHRoaXMuZGV2aWNlTW90aW9uLmdldEN1cnJlbnRBY2NlbGVyYXRpb24oKS50aGVuKFxyXG4gKiAgIChhY2NlbGVyYXRpb246IERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGEpID0+IGNvbnNvbGUubG9nKGFjY2VsZXJhdGlvbiksXHJcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiApO1xyXG4gKlxyXG4gKiAvLyBXYXRjaCBkZXZpY2UgYWNjZWxlcmF0aW9uXHJcbiAqIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLmRldmljZU1vdGlvbi53YXRjaEFjY2VsZXJhdGlvbigpLnN1YnNjcmliZSgoYWNjZWxlcmF0aW9uOiBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhKSA9PiB7XHJcbiAqICAgY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKTtcclxuICogfSk7XHJcbiAqXHJcbiAqIC8vIFN0b3Agd2F0Y2hcclxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBEZXZpY2VNb3Rpb25BY2NlbGVyYXRpb25EYXRhXHJcbiAqIERldmljZU1vdGlvbkFjY2VsZXJvbWV0ZXJPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRGV2aWNlTW90aW9uJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uJyxcclxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuYWNjZWxlcm9tZXRlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbicsXHJcbiAgcGxhdGZvcm1zOiBbXHJcbiAgICAnQW5kcm9pZCcsXHJcbiAgICAnQmxhY2tCZXJyeSAxMCcsXHJcbiAgICAnQnJvd3NlcicsXHJcbiAgICAnRmlyZWZveCBPUycsXHJcbiAgICAnaU9TJyxcclxuICAgICdUaXplbicsXHJcbiAgICAnVWJ1bnR1JyxcclxuICAgICdXaW5kb3dzJyxcclxuICAgICdXaW5kb3dzIFBob25lIDgnLFxyXG4gIF0sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERldmljZU1vdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBHZXQgdGhlIGN1cnJlbnQgYWNjZWxlcmF0aW9uIGFsb25nIHRoZSB4LCB5LCBhbmQgeiBheGVzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+fSBSZXR1cm5zIG9iamVjdCB3aXRoIHgsIHksIHosIGFuZCB0aW1lc3RhbXAgcHJvcGVydGllc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDdXJyZW50QWNjZWxlcmF0aW9uKCk6IFByb21pc2U8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2F0Y2ggdGhlIGRldmljZSBhY2NlbGVyYXRpb24uIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGUuXHJcbiAgICogQHBhcmFtIHtBY2NlbGVyb21ldGVyT3B0aW9uc30gb3B0aW9ucyBsaXN0IG9mIG9wdGlvbnMgZm9yIHRoZSBhY2NlbGVyb21ldGVyLlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPERldmljZU1vdGlvbkFjY2VsZXJhdGlvbkRhdGE+fSBPYnNlcnZhYmxlIHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHlvdSBjYW4gc3Vic2NyaWJlIHRvXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICdjbGVhcldhdGNoJyxcclxuICB9KVxyXG4gIHdhdGNoQWNjZWxlcmF0aW9uKG9wdGlvbnM/OiBEZXZpY2VNb3Rpb25BY2NlbGVyb21ldGVyT3B0aW9ucyk6IE9ic2VydmFibGU8RGV2aWNlTW90aW9uQWNjZWxlcmF0aW9uRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=