import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var StreamingMedia = /** @class */ (function (_super) {
    __extends(StreamingMedia, _super);
    function StreamingMedia() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StreamingMedia.prototype.playVideo = function (videoUrl, options) { return cordova(this, "playVideo", { "sync": true }, arguments); };
    StreamingMedia.prototype.playAudio = function (audioUrl, options) { return cordova(this, "playAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.stopAudio = function () { return cordova(this, "stopAudio", { "sync": true }, arguments); };
    StreamingMedia.prototype.pauseAudio = function () { return cordova(this, "pauseAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.prototype.resumeAudio = function () { return cordova(this, "resumeAudio", { "sync": true, "platforms": ["iOS"] }, arguments); };
    StreamingMedia.pluginName = "StreamingMedia";
    StreamingMedia.plugin = "cordova-plugin-streaming-media";
    StreamingMedia.pluginRef = "plugins.streamingMedia";
    StreamingMedia.repo = "https://github.com/nchutchind/cordova-plugin-streaming-media";
    StreamingMedia.platforms = ["Amazon Fire OS", "Android", "iOS"];
    StreamingMedia = __decorate([
        Injectable()
    ], StreamingMedia);
    return StreamingMedia;
}(IonicNativePlugin));
export { StreamingMedia };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3N0cmVhbWluZy1tZWRpYS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFpRnBDLGtDQUFpQjs7OztJQU9uRCxrQ0FBUyxhQUFDLFFBQWdCLEVBQUUsT0FBK0I7SUFRM0Qsa0NBQVMsYUFBQyxRQUFnQixFQUFFLE9BQStCO0lBTTNELGtDQUFTO0lBTVQsbUNBQVU7SUFNVixvQ0FBVzs7Ozs7O0lBakNBLGNBQWM7UUFEMUIsVUFBVSxFQUFFO09BQ0EsY0FBYzt5QkFsRjNCO0VBa0ZvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogT2JqZWN0IG9mIG9wdGlvbnMgdG8gcGFzcyBpbnRvIHRoZSBwbGF5VmlkZW8gbWV0aG9kLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdHJlYW1pbmdWaWRlb09wdGlvbnMge1xyXG4gIC8qKiBFeGVjdXRlcyBhZnRlciBzdWNjZXNzIHBsYXlpbmcgYXVkaW8uICovXHJcbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XHJcbiAgLyoqIEV4ZWN1dGVzIGFmdGVyIGVycm9yIHBsYXlpbmcgdmlkZW8uICovXHJcbiAgZXJyb3JDYWxsYmFjaz86IEZ1bmN0aW9uO1xyXG4gIC8qKiBGb3JjZSBvbmUgb3JpZW50YXRpb24gZm9yIHBsYXlpbmcgdmlkZW8uICovXHJcbiAgb3JpZW50YXRpb24/OiBzdHJpbmc7XHJcbiAgLyoqIFNob3VsZCB0aGUgdmlkZW8gY2xvc2UgYWZ0ZXIgaXQncyBvdmVyLiBEZWZhdWx0cyB0byB0cnVlLiAqL1xyXG4gIHNob3VsZEF1dG9DbG9zZT86IGJvb2xlYW47XHJcbiAgLyoqIFNob3VsZCB0aGUgdmlkZW8gaGF2ZSBjb250cm9scy4gRGVmYXVsdHMgdG8gdHJ1ZS4gQW5kcm9pZCBvbmx5LiAqL1xyXG4gIGNvbnRyb2xzPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9iamVjdCBvZiBvcHRpb25zIHRvIHBhc3MgaW50byB0aGUgcGxheUF1ZGlvIG1ldGhvZC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtaW5nQXVkaW9PcHRpb25zIHtcclxuICAvKiogQmFja2dyb3VuZCBjb2xvciBmb3IgYXVkaW8gcGxheWVyLiAqL1xyXG4gIGJnQ29sb3I/OiBzdHJpbmc7XHJcbiAgLyoqIEJhY2tncm91bmQgaW1hZ2UgZm9yIGF1ZGlvIHBsYXllci4gKi9cclxuICBiZ0ltYWdlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEJhY2tncm91bmQgaW1hZ2Ugc2NhbGUgZm9yIGF1ZGlvIHBsYXllci5cclxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlOlxyXG4gICAqIGZpdFxyXG4gICAqIHN0cmV0Y2hcclxuICAgKiBhc3BlY3RTdHJldGNoLlxyXG4gICAqL1xyXG4gIGJnSW1hZ2VTY2FsZT86IHN0cmluZztcclxuICAvKiogU3RhcnQgYXVkaW8gcGxheWVyIGluIGZ1bGwgc2NyZWVuLiBpT1Mgb25seS4gKi9cclxuICBpbml0RnVsbHNjcmVlbj86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogS2VlcHMgdGhlIHNjcmVlbiBsaXQgYW5kIHN0b3BzIGl0IGZyb20gbG9ja2luZ1xyXG4gICAqIHdoaWxlIGF1ZGlvIGlzIHBsYXlpbmcuIEFuZHJvaWQgb25seS5cclxuICAgKi9cclxuICBrZWVwQXdha2U/OiBib29sZWFuO1xyXG4gIC8qKiBFeGVjdXRlcyBhZnRlciBzdWNjZXNzIHBsYXlpbmcgYXVkaW8uICovXHJcbiAgc3VjY2Vzc0NhbGxiYWNrPzogRnVuY3Rpb247XHJcbiAgLyoqIEV4ZWN1dGVzIGFmdGVyIGVycm9yIHBsYXlpbmcgYXVkaW8uICovXHJcbiAgZXJyb3JDYWxsYmFjaz86IEZ1bmN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgU3RyZWFtaW5nIE1lZGlhXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIHN0cmVhbSBhdWRpbyBhbmQgdmlkZW8gaW4gYSBmdWxsc2NyZWVuLCBuYXRpdmUgcGxheWVyIG9uIGlPUyBhbmQgQW5kcm9pZC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU3RyZWFtaW5nTWVkaWEsIFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3RyZWFtaW5nLW1lZGlhL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RyZWFtaW5nTWVkaWE6IFN0cmVhbWluZ01lZGlhKSB7IH1cclxuICpcclxuICogbGV0IG9wdGlvbnM6IFN0cmVhbWluZ1ZpZGVvT3B0aW9ucyA9IHtcclxuICogICBzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHsgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXllZCcpIH0sXHJcbiAqICAgZXJyb3JDYWxsYmFjazogKGUpID0+IHsgY29uc29sZS5sb2coJ0Vycm9yIHN0cmVhbWluZycpIH0sXHJcbiAqICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnLFxyXG4gKiAgIHNob3VsZEF1dG9DbG9zZTogdHJ1ZSxcclxuICogICBjb250cm9sczogZmFsc2VcclxuICogfTtcclxuICpcclxuICogdGhpcy5zdHJlYW1pbmdNZWRpYS5wbGF5VmlkZW8oJ2h0dHBzOi8vcGF0aC90by92aWRlby9zdHJlYW0nLCBvcHRpb25zKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFN0cmVhbWluZ1ZpZGVvT3B0aW9uc1xyXG4gKiBTdHJlYW1pbmdBdWRpb09wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTdHJlYW1pbmdNZWRpYScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcclxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnN0cmVhbWluZ01lZGlhJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL25jaHV0Y2hpbmQvY29yZG92YS1wbHVnaW4tc3RyZWFtaW5nLW1lZGlhJyxcclxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU3RyZWFtaW5nTWVkaWEgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU3RyZWFtcyBhIHZpZGVvXHJcbiAgICogQHBhcmFtIHZpZGVvVXJsIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIHZpZGVvXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge1N0cmVhbWluZ1ZpZGVvT3B0aW9uc30gT3B0aW9uc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHBsYXlWaWRlbyh2aWRlb1VybDogc3RyaW5nLCBvcHRpb25zPzogU3RyZWFtaW5nVmlkZW9PcHRpb25zKTogdm9pZCB7fVxyXG5cclxuICAvKipcclxuICAgKiBTdHJlYW1zIGFuIGF1ZGlvXHJcbiAgICogQHBhcmFtIGF1ZGlvVXJsIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIGF1ZGlvIHN0cmVhbVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTdHJlYW1pbmdBdWRpb09wdGlvbnN9IE9wdGlvbnNcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBwbGF5QXVkaW8oYXVkaW9Vcmw6IHN0cmluZywgb3B0aW9ucz86IFN0cmVhbWluZ0F1ZGlvT3B0aW9ucyk6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgc3RyZWFtaW5nIGF1ZGlvXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3RvcEF1ZGlvKCk6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogUGF1c2VzIHN0cmVhbWluZyBhdWRpb1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSwgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXHJcbiAgcGF1c2VBdWRpbygpOiB2b2lkIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc3VtZXMgc3RyZWFtaW5nIGF1ZGlvXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlLCBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcclxuICByZXN1bWVBdWRpbygpOiB2b2lkIHt9XHJcbn1cclxuIl19