var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ForegroundServiceOriginal = /** @class */ (function (_super) {
    __extends(ForegroundServiceOriginal, _super);
    function ForegroundServiceOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ForegroundServiceOriginal.prototype.start = function (title, text, icon, importance, id) {
        if (importance === void 0) { importance = 1; }
        if (id === void 0) { id = 0; }
        return cordova(this, "start", { "sync": true }, arguments);
    };
    ForegroundServiceOriginal.prototype.stop = function () { return cordova(this, "stop", { "sync": true }, arguments); };
    ForegroundServiceOriginal.pluginName = "ForegroundService";
    ForegroundServiceOriginal.plugin = "cordova-plugin-foreground-service";
    ForegroundServiceOriginal.pluginRef = "cordova.plugins.foregroundService";
    ForegroundServiceOriginal.repo = "https://github.com/DavidBriglio/cordova-plugin-foreground-service";
    ForegroundServiceOriginal.platforms = ["Android"];
    return ForegroundServiceOriginal;
}(IonicNativePlugin));
var ForegroundService = new ForegroundServiceOriginal();
export { ForegroundService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZvcmVncm91bmQtc2VydmljZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnRGpDLHFDQUFpQjs7OztJQThCdEQsaUNBQUssYUFBQyxLQUFhLEVBQUUsSUFBWSxFQUFFLElBQWEsRUFBRSxVQUF5QixFQUFFLEVBQU07UUFBakMsMkJBQUEsRUFBQSxjQUF5QjtRQUFFLG1CQUFBLEVBQUEsTUFBTTs7O0lBVW5GLGdDQUFJOzs7Ozs7NEJBekZOO0VBaUR1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBGb3JlZ3JvdW5kIFNlcnZpY2VcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGFsbG93cyBmb3IgYW5kcm9pZCBkZXZpY2VzIHRvIGNvbnRpbnVlIHJ1bm5pbmcgc2VydmljZXMgaW4gdGhlIGJhY2tncm91bmQsIHVzaW5nIGFcclxuICogZm9yZWdyb3VuZCBvbmdvaW5nIG5vdGlmaWNhdGlvbi4gVGhpcyBpcyB0YXJnZXRlZCB0b3dhcmRzIHVzZSB3aXRoIHBsdWdpbnMgc3VjaCBhc1xyXG4gKiAnY29yZG92YS1nZW9sb2NhdGlvbicgdGhhdCB3aWxsIG5vdCBydW4gd2hpbGUgdGhlIGFwcCBpcyBpbiB0aGUgYmFja2dyb3VuZCBvbiBhbmRyb2lkIEFQSSAyNisuXHJcbiAqXHJcbiAqIEZvciBhbmRyb2lkIEFQSSAyOCssIHRoZSBmb2xsb3dpbmcgeG1sIHNuaXBwZXQgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGBgY29uZmlnLnhtbGBgYDpcclxuICpcclxuICogYGBgXHJcbiAqIC4uLlxyXG4gKiA8cGxhdGZvcm0gbmFtZT1cImFuZHJvaWRcIj5cclxuICogICA8Y29uZmlnLWZpbGUgcGFyZW50PVwiLypcIiB0YXJnZXQ9XCJBbmRyb2lkTWFuaWZlc3QueG1sXCI+XHJcbiAqICAgICA8dXNlcy1wZXJtaXNzaW9uIGFuZHJvaWQ6bmFtZT1cImFuZHJvaWQucGVybWlzc2lvbi5GT1JFR1JPVU5EX1NFUlZJQ0VcIiAvPlxyXG4gKiAgIDwvY29uZmlnLWZpbGU+XHJcbiAqICAgLi4uXHJcbiAqIGBgYFxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGb3JlZ3JvdW5kU2VydmljZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZm9yZWdyb3VuZC1zZXJ2aWNlL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHB1YmxpYyBmb3JlZ3JvdW5kU2VydmljZTogRm9yZWdyb3VuZFNlcnZpY2UpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogc3RhcnRTZXJ2aWNlKCkge1xyXG4gKiAgLy8gTm90aWZpY2F0aW9uIGltcG9ydGFuY2UgaXMgb3B0aW9uYWwsIHRoZSBkZWZhdWx0IGlzIDEgLSBMb3cgKG5vIHNvdW5kIG9yIHZpYnJhdGlvbilcclxuICogIHRoaXMuZm9yZWdyb3VuZFNlcnZpY2Uuc3RhcnQoJ0dQUyBSdW5uaW5nJywgJ0JhY2tncm91bmQgU2VydmljZScsICdkcmF3YWJsZS9mc2ljb24nKTtcclxuICogfVxyXG4gKlxyXG4gKiBzdG9wU2VydmljZSgpIHtcclxuICogIC8vIERpc2FibGUgdGhlIGZvcmVncm91bmQgc2VydmljZVxyXG4gKiAgdGhpcy5mb3JlZ3JvdW5kU2VydmljZS5zdG9wKCk7XHJcbiAqIH1cclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRm9yZWdyb3VuZFNlcnZpY2UnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZvcmVncm91bmQtc2VydmljZScsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmZvcmVncm91bmRTZXJ2aWNlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJpZ2xpby9jb3Jkb3ZhLXBsdWdpbi1mb3JlZ3JvdW5kLXNlcnZpY2UnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcmVncm91bmRTZXJ2aWNlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEVuYWJsZXMgdGhlIGZvcmVncm91bmQgc2VydmljZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlIChjb250ZW50IHRpdGxlKSBBIGJyaWVmIGhlYWRsaW5lIGZvciB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgKGNvbnRlbnQgdGV4dCkgU3VwcG9ydGluZyBpbmZvcm1hdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpY29uIFRoZSBkcmF3YWJsZSBpY29uIGNhbiBiZSBhbnkgZHJhd2FibGUgaW1hZ2UgdGhhdCBleGlzdHMgaW4gdGhlIHJlc291cmNlIGZvbGRlci4gVGhpcyBtZWFucyB5b3UgbXVzdCBjb3B5IHRoZSBpY29uIHlvdSB3YW50IHRvIHVzZSBpbnRvIHRoZSBwbGF0Zm9ybXMvYW5kcm9pZC9hcHAvc3JjL21haW4vcmVzL2RyYXdhYmxlIGZvbGRlciBzZXQuIElmIG5vIGljb24gY2FuIGJlIGZvdW5kIHVzaW5nIHRoZSBpY29uIG5hbWUgcGFyYW1ldGVyLCBhIGRlZmF1bHQgc3RhciBpY29uIHdpbGwgYmUgdXNlZC5cclxuICAgKlxyXG4gICAqIEZvciBhbiBleGFtcGxlLCBpZiB0aGUgYGZzaWNvbi5wbmdgIChzZWUgeG1sIGJlbG93KSByZXNpZGVzIGhlcmU6IGBgYHNyYy9hc3NldHMvaWNvbi9mc2ljb24ucG5nYGBgLiBUaGVuIGBgYGljb25gYGAgcGFyYW1ldGVyIHZhbHVlIHdvdWxkIGJlIGBgYCdkcmF3YWJsZS9mc2ljb24nYGBgLiBJbiBvcmRlciBmb3IgdGhpcyBleGFtcGxlIHRvIHdvcmssIHRoZSBmb2xsb3dpbmcgeG1sIHNuaXBwZXQgbXVzdCBiZSBpbiBgYGBjb25maWcueG1sYGBgLlxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICogPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XHJcbiAgICogICA8cmVzb3VyY2UtZmlsZSBzcmM9XCJ3d3cvYXNzZXRzL2ljb24vZnNpY29uLnBuZ1wiIHRhcmdldD1cImFwcC9zcmMvbWFpbi9yZXMvZHJhd2FibGUvZnNpY29uLnBuZ1wiIC8+XHJcbiAgICogICAuLi5cclxuICAgKiBgYGBcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW1wb3J0YW5jZSBOb3RpZmljYXRpb24gaW1wb3J0YW5jZSBkaWN0YXRlcyBob3cgdGhlIG5vdGlmaWNhdGlvbiBpcyBpbml0aWFsbHkgcHJlc2VudGVkOlxyXG4gICAqXHJcbiAgICogVmFsdWUgfCBJbXBvcnRhbmNlIHwgRGVzY3JpcHRpb24gfCBFeGFtcGxlc1xyXG4gICAqIC0tLSB8IC0tLSB8IC0tLSB8IC0tLVxyXG4gICAqIDF8SU1QT1JUQU5DRV9MT1d8RG9lcyBub3QgbWFrZSBhIHNvdW5kIG9yIGhlYWRzLXVwIGRpc3BsYXkgKHBsdWdpbidzIGRlZmF1bHQpfE5ldyBjb250ZW50IHRoZSB1c2VyIGhhcyBzdWJzY3JpYmVkIHRvLCBzb2NpYWwgbmV0d29yayBpbnZpdGF0aW9uc1xyXG4gICAqIDJ8SU1QT1JUQU5DRV9ERUZBVUxUfE1ha2VzIGEgc291bmQsIGJ1dCBubyBoZWFkcy11cCBkaXNwbGF5fFRyYWZmaWMgYWxlcnRzLCB0YXNrIHJlbWluZGVyc1xyXG4gICAqIDN8SU1QT1JUQU5DRV9ISUdIfE1ha2VzIGEgc291bmQgYW5kIGhlYWRzLXVwIGRpc3BsYXl8VGV4dCBtZXNzYWdlcywgYWxhcm1zLCBwaG9uZSBjYWxsc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGlkIFRoZSBub3RpZmljYXRpb24gaWQgaXMgYSBjdXN0b21pemFibGUgaW50ZWdlciB0aGF0IGlzIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSBub3RpZmljYXRpb24gdGhhdCB3aWxsIGJlIGxhdW5jaGVkLiBUaGlzIGlzIGN1c3RvbWl6YWJsZSB0byBhdm9pZCBjb25mbGljdGluZyB3aXRoIGFueSBvdGhlciBub3RpZmljYXRpb25zLiBJZiB0aGlzIGlzIG5vdCBpbmNsdWRlZCwgYSBbKnVuaXF1ZSpdIGRlZmF1bHQgaWQgd2lsbCBiZSB1c2VkLlxyXG4gICAqXHJcbiAgICogQHNlZSBodHRwczovL21hdGVyaWFsLmlvL2Rlc2lnbi9wbGF0Zm9ybS1ndWlkYW5jZS9hbmRyb2lkLW5vdGlmaWNhdGlvbnMuaHRtbFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBzdGFydCh0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIGljb24/OiBzdHJpbmcsIGltcG9ydGFuY2U6IDEgfCAyIHwgMyA9IDEsIGlkID0gMCk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzYWJsZXMgdGhlIGZvcmVncm91bmQgc2VydmljZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBzdG9wKCk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=