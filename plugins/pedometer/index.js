var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PedometerOriginal = /** @class */ (function (_super) {
    __extends(PedometerOriginal, _super);
    function PedometerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PedometerOriginal.prototype.isStepCountingAvailable = function () { return cordova(this, "isStepCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.isDistanceAvailable = function () { return cordova(this, "isDistanceAvailable", {}, arguments); };
    PedometerOriginal.prototype.isFloorCountingAvailable = function () { return cordova(this, "isFloorCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.startPedometerUpdates = function () { return cordova(this, "startPedometerUpdates", { "observable": true, "clearFunction": "stopPedometerUpdates" }, arguments); };
    PedometerOriginal.prototype.stopPedometerUpdates = function () { return cordova(this, "stopPedometerUpdates", {}, arguments); };
    PedometerOriginal.prototype.queryData = function (options) { return cordova(this, "queryData", { "callbackOrder": "reverse" }, arguments); };
    PedometerOriginal.pluginName = "Pedometer";
    PedometerOriginal.plugin = "cordova-plugin-pedometer";
    PedometerOriginal.pluginRef = "pedometer";
    PedometerOriginal.repo = "https://github.com/leecrossley/cordova-plugin-pedometer";
    PedometerOriginal.platforms = ["Android", "iOS"];
    return PedometerOriginal;
}(IonicNativePlugin));
var Pedometer = new PedometerOriginal();
export { Pedometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BlZG9tZXRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJDSCw2QkFBaUI7Ozs7SUFNOUMsMkNBQXVCO0lBV3ZCLHVDQUFtQjtJQVduQiw0Q0FBd0I7SUFleEIseUNBQXFCO0lBU3JCLHdDQUFvQjtJQWVwQiw2QkFBUyxhQUFDLE9BQTJDOzs7Ozs7b0JBL0d2RDtFQTRDK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIG9mIGEgcGVkb21ldGVyIGRhdGEgb2JqZWN0IHdoaWNoIGlzIHJldHVybmVkIGJ5IHdhdGNoaW5nIGZvciBuZXcgZGF0YSBvciBieSByZWNpZXZpbmcgaGlzdG9yaWNhbCBkYXRhXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQZWRvbWV0ZXJEYXRhIHtcclxuICBzdGFydERhdGU/OiBudW1iZXI7XHJcbiAgZW5kRGF0ZT86IG51bWJlcjtcclxuICBudW1iZXJPZlN0ZXBzOiBudW1iZXI7XHJcbiAgZGlzdGFuY2U6IG51bWJlcjtcclxuICBmbG9vcnNBc2NlbmRlZDogbnVtYmVyO1xyXG4gIGZsb29yc0Rlc2NlbmRlZDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgUGVkb21ldGVyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGZXRjaCBwZWRlc3RyaWFuLXJlbGF0ZWQgcGVkb21ldGVyIGRhdGEsXHJcbiAqIHN1Y2ggYXMgc3RlcCBjb3VudHMgYW5kIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkaXN0YW5jZSB0cmF2ZWxsZWQuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFBlZG9tZXRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcGVkb21ldGVyL25neCc7XHJcbiAqXHJcbiAqIFBlZG9tZXRlci5pc0Rpc3RhbmNlQXZhaWxhYmxlKClcclxuICogICAudGhlbigoYXZhaWxhYmxlOiBib29sZWFuKSA9PiBjb25zb2xlLmxvZyhhdmFpbGFibGUpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcclxuICpcclxuICogUGVkb21ldGVyLnN0YXJ0UGVkb21ldGVyVXBkYXRlcygpXHJcbiAqICAgIC5zdWJzY3JpYmUoKGRhdGE6IElQZWRvbWV0ZXJEYXRhKSA9PiB7XHJcbiAqICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAqICAgIH0pO1xyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdQZWRvbWV0ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXBlZG9tZXRlcicsXHJcbiAgcGx1Z2luUmVmOiAncGVkb21ldGVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2xlZWNyb3NzbGV5L2NvcmRvdmEtcGx1Z2luLXBlZG9tZXRlcicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBlZG9tZXRlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgc3RlcCBjb3VudGluZyBpcyBhdmFpbGFibGUuIE9ubHkgd29ya3Mgb24gaU9TLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZCAodHJ1ZSkgb3Igbm90IHN1cHBvcnRlZCAoZmFsc2UpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzU3RlcENvdW50aW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzdGFuY2UgZXN0aW1hdGlvbiBpbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gdXNlIHN0ZXAgaW5mb3JtYXRpb24gdG8gc3VwcGx5IHRoZSBhcHByb3hpbWF0ZSBkaXN0YW5jZSB0cmF2ZWxsZWQgYnkgdGhlIHVzZXIuXHJcbiAgICogVGhpcyBjYXBhYmlsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGRldmljZXMsIGV2ZW4gd2l0aCBpT1MgOC5cclxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgKHRydWUpIG9yIG5vdCBzdXBwb3J0ZWQgKGZhbHNlKVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0Rpc3RhbmNlQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmxvb3IgY291bnRpbmcgaW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIGNvdW50IHRoZSBudW1iZXIgb2YgZmxvb3JzIHRoZSB1c2VyIHdhbGtzIHVwIG9yIGRvd24gdXNpbmcgc3RhaXJzLlxyXG4gICAqIFRoaXMgY2FwYWJpbGl0eSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBkZXZpY2VzLCBldmVuIHdpdGggaU9TIDguXHJcbiAgICogT25seSB3b3JrcyBvbiBpT1MuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNGbG9vckNvdW50aW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHRoZSBkZWxpdmVyeSBvZiByZWNlbnQgcGVkZXN0cmlhbi1yZWxhdGVkIGRhdGEgdG8geW91ciBDb3Jkb3ZhIGFwcC5cclxuICAgKlxyXG4gICAqIFdoZW4gdGhlIGFwcCBpcyBzdXNwZW5kZWQsIHRoZSBkZWxpdmVyeSBvZiB1cGRhdGVzIHN0b3BzIHRlbXBvcmFyaWx5LlxyXG4gICAqIFVwb24gcmV0dXJuaW5nIHRvIGZvcmVncm91bmQgb3IgYmFja2dyb3VuZCBleGVjdXRpb24sIHRoZSBwZWRvbWV0ZXIgb2JqZWN0IGJlZ2lucyB1cGRhdGVzIGFnYWluLlxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgT2JzZXJ2YWJsZSB0aGF0IHJlY2lldmVzIHJlcGVhdGx5IGRhdGEgZnJvbSBwZWRvbWV0ZXIgaW4gYmFja2dyb3VuZC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BQZWRvbWV0ZXJVcGRhdGVzJyxcclxuICB9KVxyXG4gIHN0YXJ0UGVkb21ldGVyVXBkYXRlcygpOiBPYnNlcnZhYmxlPElQZWRvbWV0ZXJEYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wcyB0aGUgZGVsaXZlcnkgb2YgcmVjZW50IHBlZGVzdHJpYW4gZGF0YSB1cGRhdGVzIHRvIHlvdXIgQ29yZG92YSBhcHAuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHBlZG9tZXRlciB3YXRjaGluZyB3YXMgc3RvcHBlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wUGVkb21ldGVyVXBkYXRlcygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIHRoZSBkYXRhIGJldHdlZW4gdGhlIHNwZWNpZmllZCBzdGFydCBhbmQgZW5kIGRhdGVzLlxyXG4gICAqIFRoZSBzdGFydERhdGUgYW5kIGVuZERhdGUgb3B0aW9ucyBhcmUgcmVxdWlyZWQgYW5kIGNhbiBiZSBjb25zdHJ1Y3RlZCBpbiBhbnkgdmFsaWQgSmF2YVNjcmlwdCB3YXlcclxuICAgKiAoZS5nLiBuZXcgRGF0ZSgyMDE1LCA0LCAxLCAxNSwgMjAsIDAwKSBpcyBhbHNvIHZhbGlkLCBhcyBpcyBtaWxsaXNlY29uZHMpLlxyXG4gICAqIE9ubHkgd29ya3Mgb24gaU9TLlxyXG4gICAqIEBwYXJhbSB7YW55fSBvcHRpb25zICBzdGFydCBkYXRlIGFuZCBlbiBkYXRlIHdoZXJlIHlvdSB3YW50IHRvIGdldCBwZWRvbWV0ZXIgZGF0YVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIGRhdGEgZm91bmRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBxdWVyeURhdGEob3B0aW9uczogeyBzdGFydERhdGU6IERhdGU7IGVuZERhdGU6IERhdGUgfSk6IFByb21pc2U8SVBlZG9tZXRlckRhdGE+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19