import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var Pedometer = /** @class */ (function (_super) {
    __extends(Pedometer, _super);
    function Pedometer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pedometer.prototype.isStepCountingAvailable = function () { return cordova(this, "isStepCountingAvailable", {}, arguments); };
    Pedometer.prototype.isDistanceAvailable = function () { return cordova(this, "isDistanceAvailable", {}, arguments); };
    Pedometer.prototype.isFloorCountingAvailable = function () { return cordova(this, "isFloorCountingAvailable", {}, arguments); };
    Pedometer.prototype.startPedometerUpdates = function () { return cordova(this, "startPedometerUpdates", { "observable": true, "clearFunction": "stopPedometerUpdates" }, arguments); };
    Pedometer.prototype.stopPedometerUpdates = function () { return cordova(this, "stopPedometerUpdates", {}, arguments); };
    Pedometer.prototype.queryData = function (options) { return cordova(this, "queryData", { "callbackOrder": "reverse" }, arguments); };
    Pedometer.pluginName = "Pedometer";
    Pedometer.plugin = "cordova-plugin-pedometer";
    Pedometer.pluginRef = "pedometer";
    Pedometer.repo = "https://github.com/leecrossley/cordova-plugin-pedometer";
    Pedometer.platforms = ["Android", "iOS"];
    Pedometer = __decorate([
        Injectable()
    ], Pedometer);
    return Pedometer;
}(IonicNativePlugin));
export { Pedometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BlZG9tZXRlci9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQTBDWiw2QkFBaUI7Ozs7SUFNOUMsMkNBQXVCO0lBV3ZCLHVDQUFtQjtJQVduQiw0Q0FBd0I7SUFleEIseUNBQXFCO0lBU3JCLHdDQUFvQjtJQWVwQiw2QkFBUyxhQUFDLE9BQTJDOzs7Ozs7SUFuRTFDLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUztvQkE1Q3RCO0VBNEMrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2Ugb2YgYSBwZWRvbWV0ZXIgZGF0YSBvYmplY3Qgd2hpY2ggaXMgcmV0dXJuZWQgYnkgd2F0Y2hpbmcgZm9yIG5ldyBkYXRhIG9yIGJ5IHJlY2lldmluZyBoaXN0b3JpY2FsIGRhdGFcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBlZG9tZXRlckRhdGEge1xyXG4gIHN0YXJ0RGF0ZT86IG51bWJlcjtcclxuICBlbmREYXRlPzogbnVtYmVyO1xyXG4gIG51bWJlck9mU3RlcHM6IG51bWJlcjtcclxuICBkaXN0YW5jZTogbnVtYmVyO1xyXG4gIGZsb29yc0FzY2VuZGVkOiBudW1iZXI7XHJcbiAgZmxvb3JzRGVzY2VuZGVkOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBQZWRvbWV0ZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEZldGNoIHBlZGVzdHJpYW4tcmVsYXRlZCBwZWRvbWV0ZXIgZGF0YSxcclxuICogc3VjaCBhcyBzdGVwIGNvdW50cyBhbmQgb3RoZXIgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRpc3RhbmNlIHRyYXZlbGxlZC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgUGVkb21ldGVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9wZWRvbWV0ZXIvbmd4JztcclxuICpcclxuICogUGVkb21ldGVyLmlzRGlzdGFuY2VBdmFpbGFibGUoKVxyXG4gKiAgIC50aGVuKChhdmFpbGFibGU6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKGF2YWlsYWJsZSkpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xyXG4gKlxyXG4gKiBQZWRvbWV0ZXIuc3RhcnRQZWRvbWV0ZXJVcGRhdGVzKClcclxuICogICAgLnN1YnNjcmliZSgoZGF0YTogSVBlZG9tZXRlckRhdGEpID0+IHtcclxuICogICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICogICAgfSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1BlZG9tZXRlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcGVkb21ldGVyJyxcclxuICBwbHVnaW5SZWY6ICdwZWRvbWV0ZXInLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbGVlY3Jvc3NsZXkvY29yZG92YS1wbHVnaW4tcGVkb21ldGVyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUGVkb21ldGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiBzdGVwIGNvdW50aW5nIGlzIGF2YWlsYWJsZS4gT25seSB3b3JrcyBvbiBpT1MuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNTdGVwQ291bnRpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXN0YW5jZSBlc3RpbWF0aW9uIGluZGljYXRlcyB0aGUgYWJpbGl0eSB0byB1c2Ugc3RlcCBpbmZvcm1hdGlvbiB0byBzdXBwbHkgdGhlIGFwcHJveGltYXRlIGRpc3RhbmNlIHRyYXZlbGxlZCBieSB0aGUgdXNlci5cclxuICAgKiBUaGlzIGNhcGFiaWxpdHkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgZGV2aWNlcywgZXZlbiB3aXRoIGlPUyA4LlxyXG4gICAqIE9ubHkgd29ya3Mgb24gaU9TLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBmZWF0dXJlIGlzIHN1cHBvcnRlZCAodHJ1ZSkgb3Igbm90IHN1cHBvcnRlZCAoZmFsc2UpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRGlzdGFuY2VBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGbG9vciBjb3VudGluZyBpbmRpY2F0ZXMgdGhlIGFiaWxpdHkgdG8gY291bnQgdGhlIG51bWJlciBvZiBmbG9vcnMgdGhlIHVzZXIgd2Fsa3MgdXAgb3IgZG93biB1c2luZyBzdGFpcnMuXHJcbiAgICogVGhpcyBjYXBhYmlsaXR5IGlzIG5vdCBzdXBwb3J0ZWQgb24gYWxsIGRldmljZXMsIGV2ZW4gd2l0aCBpT1MgOC5cclxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZmVhdHVyZSBpcyBzdXBwb3J0ZWQgKHRydWUpIG9yIG5vdCBzdXBwb3J0ZWQgKGZhbHNlKVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0Zsb29yQ291bnRpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgdGhlIGRlbGl2ZXJ5IG9mIHJlY2VudCBwZWRlc3RyaWFuLXJlbGF0ZWQgZGF0YSB0byB5b3VyIENvcmRvdmEgYXBwLlxyXG4gICAqXHJcbiAgICogV2hlbiB0aGUgYXBwIGlzIHN1c3BlbmRlZCwgdGhlIGRlbGl2ZXJ5IG9mIHVwZGF0ZXMgc3RvcHMgdGVtcG9yYXJpbHkuXHJcbiAgICogVXBvbiByZXR1cm5pbmcgdG8gZm9yZWdyb3VuZCBvciBiYWNrZ3JvdW5kIGV4ZWN1dGlvbiwgdGhlIHBlZG9tZXRlciBvYmplY3QgYmVnaW5zIHVwZGF0ZXMgYWdhaW4uXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxJUGVkb21ldGVyRGF0YT59IFJldHVybnMgYSBPYnNlcnZhYmxlIHRoYXQgcmVjaWV2ZXMgcmVwZWF0bHkgZGF0YSBmcm9tIHBlZG9tZXRlciBpbiBiYWNrZ3JvdW5kLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcFBlZG9tZXRlclVwZGF0ZXMnLFxyXG4gIH0pXHJcbiAgc3RhcnRQZWRvbWV0ZXJVcGRhdGVzKCk6IE9ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHRoZSBkZWxpdmVyeSBvZiByZWNlbnQgcGVkZXN0cmlhbiBkYXRhIHVwZGF0ZXMgdG8geW91ciBDb3Jkb3ZhIGFwcC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIHdhdGNoaW5nIHdhcyBzdG9wcGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BQZWRvbWV0ZXJVcGRhdGVzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXRyaWV2ZXMgdGhlIGRhdGEgYmV0d2VlbiB0aGUgc3BlY2lmaWVkIHN0YXJ0IGFuZCBlbmQgZGF0ZXMuXHJcbiAgICogVGhlIHN0YXJ0RGF0ZSBhbmQgZW5kRGF0ZSBvcHRpb25zIGFyZSByZXF1aXJlZCBhbmQgY2FuIGJlIGNvbnN0cnVjdGVkIGluIGFueSB2YWxpZCBKYXZhU2NyaXB0IHdheVxyXG4gICAqIChlLmcuIG5ldyBEYXRlKDIwMTUsIDQsIDEsIDE1LCAyMCwgMDApIGlzIGFsc28gdmFsaWQsIGFzIGlzIG1pbGxpc2Vjb25kcykuXHJcbiAgICogT25seSB3b3JrcyBvbiBpT1MuXHJcbiAgICogQHBhcmFtIHthbnl9IG9wdGlvbnMgIHN0YXJ0IGRhdGUgYW5kIGVuIGRhdGUgd2hlcmUgeW91IHdhbnQgdG8gZ2V0IHBlZG9tZXRlciBkYXRhXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxJUGVkb21ldGVyRGF0YT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBwZWRvbWV0ZXIgZGF0YSBmb3VuZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHF1ZXJ5RGF0YShvcHRpb25zOiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9KTogUHJvbWlzZTxJUGVkb21ldGVyRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=