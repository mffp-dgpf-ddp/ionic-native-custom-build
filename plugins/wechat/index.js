var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.prototype.openMiniProgram = function (params) { return cordova(this, "openMiniProgram", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(IonicNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlY2hhdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFpQzVDLDBCQUFpQjs7OztJQXdCM0MsNEJBQVc7SUE4Qlgsc0JBQUssYUFBQyxNQUFXO0lBYWpCLHFCQUFJLGFBQUMsS0FBVSxFQUFFLEtBQVU7SUF5QjNCLG1DQUFrQixhQUFDLE1BQVc7SUE0QjlCLDZCQUFZLGFBQUMsR0FBVztJQWtCeEIsb0NBQW1CLGFBQUMsTUFBVztJQWtCL0IsZ0NBQWUsYUFBQyxNQUFXOzs7Ozs7OztpQkE5TDdCO0VBa0M0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgV2VjaGF0XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNvcmRvdmEgcGx1Z2luLCBhIEpTIHZlcnNpb24gb2YgV2VjaGF0IFNES1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBXZWNoYXQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3dlY2hhdC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHdlY2hhdDogV2VjaGF0KSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMud2VjaGF0LmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXZWNoYXQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlY2hhdCcsXHJcbiAgcGx1Z2luUmVmOiAnV2VjaGF0JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3h1LWxpL2NvcmRvdmEtcGx1Z2luLXdlY2hhdC5naXQnLFxyXG4gIGluc3RhbGw6ICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4td2VjaGF0IC0tdmFyaWFibGUgd2VjaGF0YXBwaWQ9WU9VUl9XRUNIQVRfQVBQSUQnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnd2VjaGF0YXBwaWQnXSxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2VjaGF0IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIFNjZW5lOiB7XHJcbiAgICBTRVNTSU9OOiAwOyAvLyDogYrlpKnnlYzpnaJcclxuICAgIFRJTUVMSU5FOiAxOyAvLyDmnIvlj4vlnIhcclxuICAgIEZBVk9SSVRFOiAyOyAvLyDmlLbol49cclxuICB9O1xyXG5cclxuICBUeXBlOiB7XHJcbiAgICBBUFA6IDE7XHJcbiAgICBFTU9USU9OOiAyO1xyXG4gICAgRklMRTogMztcclxuICAgIElNQUdFOiA0O1xyXG4gICAgTVVTSUM6IDU7XHJcbiAgICBWSURFTzogNjtcclxuICAgIFdFQlBBR0U6IDc7XHJcbiAgfTtcclxuXHJcbiAgTWluaToge1xyXG4gICAgUkVMRUFTRTogMDsgLy8g5q2j5byP54mIXHJcbiAgICBURVNUOiAxOyAvLyDmtYvor5XniYhcclxuICAgIFBSRVZJRVc6IDI7IC8vIOS9k+mqjOeJiFxyXG4gIH07XHJcblxyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0luc3RhbGxlZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hhcmUgYSBtZXNzYWdlIHRvIHdlY2hhdCBhcHBcclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogPGNvZGU+XHJcbiAgICogdGhpcy53ZWNoYXQuc2hhcmUoe1xyXG4gICAqICAgICBtZXNzYWdlOiB7XHJcbiAgICogICAgICAgIHRpdGxlOiBcIk1lc3NhZ2UgVGl0bGVcIixcclxuICAgKiAgICAgICAgZGVzY3JpcHRpb246IFwiTWVzc2FnZSBEZXNjcmlwdGlvbihvcHRpb25hbClcIixcclxuICAgKiAgICAgICAgbWVkaWFUYWdOYW1lOiBcIk1lZGlhIFRhZyBOYW1lKG9wdGlvbmFsKVwiLFxyXG4gICAqICAgICAgICB0aHVtYjogXCJodHRwOi8vWU9VUl9USFVNQk5BSUxfSU1BR0VcIixcclxuICAgKiAgICAgICAgbWVkaWE6IHtcclxuICAgKiAgICAgICAgICAgIHR5cGU6IFdlY2hhdC5UeXBlLldFQlBBR0UsICAgLy8gd2VicGFnZVxyXG4gICAqICAgICAgICAgICAgd2VicGFnZVVybDogXCJodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0XCIgICAgLy8gd2VicGFnZVxyXG4gICAqICAgICAgICB9XHJcbiAgICogICAgfSxcclxuICAgKiAgICBzY2VuZTogdGhpcy53ZWNoYXQuU2NlbmUuVElNRUxJTkUgICAvLyBzaGFyZSB0byBUaW1lbGluZVxyXG4gICAqIH0udGhlbigoKSA9PiB7XHJcbiAgICogICAgICAgY29uc29sZS5sb2coJ3NoYXJlIHN1Y2Nlc3MnKTtcclxuICAgKiAgICB9KVxyXG4gICAqICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAqICAgIH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hhcmUocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZGluZyBhbiBhdXRoIHJlcXVlc3QgdG8gV2VjaGF0XHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHRoaXMud2VjaGF0LmF1dGgudGhlbigocmVzKSA9PiB7IGFsZXJ0KHJlcy5jb2RlKTsgfSk7XHJcbiAgICogPC9jb2RlPlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhdXRoKHNjb3BlOiBhbnksIHN0YXRlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZCBhIHBheW1lbnQgcmVxdWVzdFxyXG4gICAqXHJcbiAgICogQGxpbmsgaHR0cHM6Ly9wYXkud2VpeGluLnFxLmNvbS93aWtpL2RvYy9hcGkvYXBwLnBocD9jaGFwdGVyPTlfMVxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogPGNvZGU+XHJcbiAgICogdmFyIHBhcmFtcyA9IHtcclxuICAgKiAgICAgbWNoX2lkOiAnMTAwMDAxMDAnLCAvLyBtZXJjaGFudCBpZFxyXG4gICAqICAgICBwcmVwYXlfaWQ6ICd3eDIwMTQxMTEwMTYzOTUwN2NiZjZmZmQ4YjA3Nzk5NTA4NzQnLCAvLyBwcmVwYXkgaWQgcmV0dXJuZWQgZnJvbSBzZXJ2ZXJcclxuICAgKiAgICAgbm9uY2U6ICcxYWRkMWEzMGFjODdhYTJkYjcyZjU3YTIzNzVkOGZlYycsIC8vIG5vbmNlIHN0cmluZyByZXR1cm5lZCBmcm9tIHNlcnZlclxyXG4gICAqICAgICB0aW1lc3RhbXA6ICcxNDM5NTMxMzY0JywgLy8gdGltZXN0YW1wXHJcbiAgICogICAgIHNpZ246ICcwQ0IwMTUzM0I4QzFFRjEwMzA2NTE3NEY1MEJDQTAwMScsIC8vIHNpZ25lZCBzdHJpbmdcclxuICAgKiB9O1xyXG4gICAqIHRoaXMud2VjaGF0LnNlbmRQYXltZW50UmVxdWVzdChwYXJhbXMpLnRoZW4oKCkgPT4ge1xyXG4gICAqICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIik7XHJcbiAgICogfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICogfSk7XHJcbiAgICogPC9jb2RlPlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZW5kUGF5bWVudFJlcXVlc3QocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICoganVtcFRvQml6UHJvZmlsZSDvvIjot7PovazliLDmn5DkuKrlvq7kv6HlhazkvJflj7fvvIkyMDE2LTExLTExIOa1i+ivleaYr+WkseaViOeahO+8jOWbp1xyXG4gICAqXHJcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzIwNDYyNFxyXG4gICAqIEBsaW5rIGh0dHBzOi8vc2VnbWVudGZhdWx0LmNvbS9xLzEwMTAwMDAwMDM5MDc3OTZcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHZhciBwYXJhbXMgPSB7XHJcbiAgICogICAgIGluZm86ICdnaF94eHh4eHh4JywgLy8g5YWs5LyX5biQ5Y+35Y6f5aeLSURcclxuICAgKiAgICAgdHlwZTogICdOb3JtYWwnIC8vIOaZrumAmuWPt1xyXG4gICAqIH1cclxuICAgKiBvclxyXG4gICAqIHZhciBwYXJhbXMgPSB7XHJcbiAgICogICAgIGluZm86ICdleHRNc2cnLCAvLyDnm7jlhbPnmoTnoazku7bkuoznu7TnoIHkuLJcclxuICAgKiAgICAgdHlwZTogICdEZXZpY2UnIC8vIOehrOS7tuWPt1xyXG4gICAqIH07XHJcbiAgICogdGhpcy53ZWNoYXQuanVtcFRvQml6UHJvZmlsZShwYXJhbXMpLnRoZW4oKCk9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGp1bXBUb1dlY2hhdCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjaG9vc2VJbnZvaWNlRnJvbVdYIGV4cTpjaG9vc2UgaW52b2ljZXMgZnJvbSBXZWNoYXQgY2FyZCBsaXN0XHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIDxjb2RlPlxyXG4gICAqIHBhcmFtczogc2lnblR5cGUsIGNhcmRTaWduLCBub25jZVN0ciwgdGltZVN0YW1wICBhbGwgcmVxdWlyZWRcclxuICAgKiB0aGlzLndlY2hhdC5jaG9vc2VJbnZvaWNlRnJvbVdYKHBhcmFtcykudGhlbigoKSA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICogICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgKiB9KTtcclxuICAgKiA8L2NvZGU+XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNob29zZUludm9pY2VGcm9tV1gocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb3Blbk1pbmlQcm9ncmFtIGV4cTphcHAgb3BlbnMgd2VjaGF0IG1pbmkgcHJvZ3JhbVxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiA8Y29kZT5cclxuICAgKiBwYXJhbXM6IHVzZXJOYW1lLCBwYXRoLCBtaW5pcHJvZ3JhbVR5cGUgIGFsbCByZXF1aXJlZFxyXG4gICAqIFdlY2hhdC5vcGVuTWluaVByb2dyYW0ocGFyYW1zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAqICAgICBhbGVydChkYXRhLmV4dE1zZyk7XHJcbiAgICogfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAqICAgICBhbGVydChcIkZhaWxlZDogXCIgKyByZWFzb24pO1xyXG4gICAqIH0pO1xyXG4gICAqIDwvY29kZT5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgb3Blbk1pbmlQcm9ncmFtKHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19