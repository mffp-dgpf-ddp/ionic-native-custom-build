import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HCE = /** @class */ (function (_super) {
    __extends(HCE, _super);
    function HCE() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HCE.prototype.registerCommandCallback = function (onCommand, fail) { return cordova(this, "registerCommandCallback", {}, arguments); };
    HCE.prototype.registerDeactivatedCallback = function (ok, fail) { return cordova(this, "registerDeactivatedCallback", {}, arguments); };
    HCE.prototype.sendResponse = function (response, success, failure) { return cordova(this, "sendResponse", {}, arguments); };
    HCE.pluginName = "hce";
    HCE.plugin = "cordova-plugin-hce";
    HCE.pluginRef = "hce";
    HCE.repo = "https://github.com/don/cordova-plugin-hce";
    HCE.install = "";
    HCE.installVariables = ["AID_FILTER"];
    HCE.platforms = ["Android"];
    HCE = __decorate([
        Injectable()
    ], HCE);
    return HCE;
}(IonicNativePlugin));
export { HCE };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2hjZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF1Qy9DLHVCQUFpQjs7OztJQVF4QyxxQ0FBdUIsYUFBQyxTQUEwQixFQUFFLElBQWU7SUFVbkUseUNBQTJCLGFBQUMsRUFBdUIsRUFBRSxJQUFlO0lBWXBFLDBCQUFZLGFBQUMsUUFBb0IsRUFBRSxPQUFrQixFQUFFLE9BQWtCOzs7Ozs7OztJQTlCOUQsR0FBRztRQURmLFVBQVUsRUFBRTtPQUNBLEdBQUc7Y0F4Q2hCO0VBd0N5QixpQkFBaUI7U0FBN0IsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgaGNlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBIQ0UgQ29yZG92YSBXcmFwcGVyXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IGhjZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaGNlL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaGNlOiBoY2UpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogZnVuY3Rpb24gb25Db21tYW5kKGNvbW1hbmQpe1xyXG4gKiAgIHZhciBjb21tYW5kQXNCeXRlcyA9IG5ldyBVaW50OEFycmF5KGNvbW1hbmQpO1xyXG4gKiAgIHZhciBjb21tYW5kQXNTdHJpbmcgPSBoY2UudXRpbC5ieXRlQXJyYXlUb0hleFN0cmluZyhjb21tYW5kQXNCeXRlcyk7XHJcbiAqXHJcbiAqICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIGNvbW1hbmRcclxuICpcclxuICogICAvLyBzZW5kIHRoZSByZXNwb25zZVxyXG4gKiAgIGhjZS5zZW5kUmVwb25zZShjb21tYW5kUmVzcG9uc2UpO1xyXG4gKiB9XHJcbiAqIHRoaXMuaGNlLnJlZ2lzdGVyQ29tbWFuZENhbGxiYWNrKCkudGhlbihvbkNvbW1hbmQpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdoY2UnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWhjZScsXHJcbiAgcGx1Z2luUmVmOiAnaGNlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Rvbi9jb3Jkb3ZhLXBsdWdpbi1oY2UnLFxyXG4gIGluc3RhbGw6ICcnLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQUlEX0ZJTFRFUiddLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEhDRSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBSZWdpc3RlcnMgY29tbWFuZCByZWNlaXZlci5cclxuICAgKiBAcGFyYW0gb25Db21tYW5kIHtIQ0VDb21tYW5kRXZlbnR9IFRoZSBldmVudCBoYW5kbGVyLlxyXG4gICAqIEBwYXJhbSBmYWlsIHtGdW5jdGlvbn0gRXJyb3IgZXZlbnQgaGFuZGxlci5cclxuICAgKlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWdpc3RlckNvbW1hbmRDYWxsYmFjayhvbkNvbW1hbmQ6IEhDRUNvbW1hbmRFdmVudCwgZmFpbD86IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZWdpc3RlcnMgRGVhY3RpdmF0ZWQgcmVjZWl2ZXIuXHJcbiAgICogQHBhcmFtIG9rIHtIQ0VEZWFjdGl2YXRlZEV2ZW50fSBTdWNjZXNzIGV2ZW50IGhhbmRsZXIuXHJcbiAgICogQHBhcmFtIGZhaWwge0Z1bmN0aW9ufSBFcnJvciBldmVudCBoYW5kbGVyLlxyXG4gICAqXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyRGVhY3RpdmF0ZWRDYWxsYmFjayhvazogSENFRGVhY3RpdmF0ZWRFdmVudCwgZmFpbD86IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VuZHMgcmVzcG9uc2UgQVBEVS5cclxuICAgKiBAcGFyYW0gcmVzcG9uc2Uge1VpbnQ4QXJyYXl9IFJlc3BvbnNlXHJcbiAgICogQHBhcmFtIHN1Y2Nlc3Mge3N0cmluZ30gU3VjY2VzcyBDYWxsYmFjay5cclxuICAgKiBAcGFyYW0gc3VjY2VzcyB7c3RyaW5nfSBGYWlsdXJlIENhbGxiYWNrLlxyXG4gICAqXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNlbmRSZXNwb25zZShyZXNwb25zZTogVWludDhBcnJheSwgc3VjY2Vzcz86IEZ1bmN0aW9uLCBmYWlsdXJlPzogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBIQ0VDb21tYW5kRXZlbnQgPSAoY29tbWFuZDogVWludDhBcnJheSkgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgSENFRGVhY3RpdmF0ZWRFdmVudCA9IChjb21tYW5kOiBudW1iZXIpID0+IHZvaWQ7XHJcbiJdfQ==