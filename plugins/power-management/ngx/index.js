import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PowerManagement = /** @class */ (function (_super) {
    __extends(PowerManagement, _super);
    function PowerManagement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowerManagement.prototype.acquire = function () { return cordova(this, "acquire", {}, arguments); };
    PowerManagement.prototype.dim = function () { return cordova(this, "dim", {}, arguments); };
    PowerManagement.prototype.release = function () { return cordova(this, "release", {}, arguments); };
    PowerManagement.prototype.setReleaseOnPause = function (set) { return cordova(this, "setReleaseOnPause", {}, arguments); };
    PowerManagement.pluginName = "PowerManagement";
    PowerManagement.plugin = "cordova-plugin-powermanagement-orig";
    PowerManagement.pluginRef = "powerManagement";
    PowerManagement.repo = "https://github.com/Viras-/cordova-plugin-powermanagement";
    PowerManagement.platforms = ["Android", "iOS", "Windows", "Windows Phone"];
    PowerManagement = __decorate([
        Injectable()
    ], PowerManagement);
    return PowerManagement;
}(IonicNativePlugin));
export { PowerManagement };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Bvd2VyLW1hbmFnZW1lbnQvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBNkJuQyxtQ0FBaUI7Ozs7SUFNcEQsaUNBQU87SUFTUCw2QkFBRztJQVNILGlDQUFPO0lBV1AsMkNBQWlCLGFBQUMsR0FBWTs7Ozs7O0lBbkNuQixlQUFlO1FBRDNCLFVBQVUsRUFBRTtPQUNBLGVBQWU7MEJBOUI1QjtFQThCcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG4vKipcclxuICogQG5hbWUgUG93ZXIgTWFuYWdlbWVudFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIFBvd2VyTWFuYWdlbWVudCBwbHVnaW4gb2ZmZXJzIGFjY2VzcyB0byB0aGUgZGV2aWNlcyBwb3dlci1tYW5hZ2VtZW50IGZ1bmN0aW9uYWxpdHkuXHJcbiAqIEl0IHNob3VsZCBiZSB1c2VkIGZvciBhcHBsaWNhdGlvbnMgd2hpY2gga2VlcCBydW5uaW5nIGZvciBhIGxvbmcgdGltZSB3aXRob3V0IGFueSB1c2VyIGludGVyYWN0aW9uLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBQb3dlck1hbmFnZW1lbnQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3Bvd2VyLW1hbmFnZW1lbnQvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBwb3dlck1hbmFnZW1lbnQ6IFBvd2VyTWFuYWdlbWVudCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnBvd2VyTWFuYWdlbWVudC5hY3F1aXJlKClcclxuICogICAudGhlbihvblN1Y2Nlc3MpXHJcbiAqICAgLmNhdGNoKG9uRXJyb3IpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdQb3dlck1hbmFnZW1lbnQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXBvd2VybWFuYWdlbWVudC1vcmlnJyxcclxuICBwbHVnaW5SZWY6ICdwb3dlck1hbmFnZW1lbnQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVmlyYXMtL2NvcmRvdmEtcGx1Z2luLXBvd2VybWFuYWdlbWVudCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnLCAnV2luZG93cyBQaG9uZSddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb3dlck1hbmFnZW1lbnQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQWNxdWlyZSBhIHdha2Vsb2NrIGJ5IGNhbGxpbmcgdGhpcy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhY3F1aXJlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGFjcXVpcmVzIGEgcGFydGlhbCB3YWtlbG9jaywgYWxsb3dpbmcgdGhlIHNjcmVlbiB0byBiZSBkaW1tZWQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGltKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxlYXNlIHRoZSB3YWtlbG9jay4gSXQncyBpbXBvcnRhbnQgdG8gZG8gdGhpcyB3aGVuIHlvdSdyZSBmaW5pc2hlZCB3aXRoIHRoZSB3YWtlbG9jaywgdG8gYXZvaWQgdW5uZWNlc3NhcnkgYmF0dGVyeSBkcmFpbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWxlYXNlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCeSBkZWZhdWx0LCB0aGUgcGx1Z2luIHdpbGwgYXV0b21hdGljYWxseSByZWxlYXNlIGEgd2FrZWxvY2sgd2hlbiB5b3VyIGFwcCBpcyBwYXVzZWQgKGUuZy4gd2hlbiB0aGUgc2NyZWVuIGlzIHR1cm5lZCBvZmYsIG9yIHRoZSB1c2VyIHN3aXRjaGVzIHRvIGFub3RoZXIgYXBwKS5cclxuICAgKiBJdCB3aWxsIHJlYWNxdWlyZSB0aGUgd2FrZWxvY2sgdXBvbiBhcHAgcmVzdW1lLiBJZiB5b3Ugd291bGQgcHJlZmVyIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvdXIsIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb24uXHJcbiAgICogQHBhcmFtIHNldCB7Ym9vbGVhbn1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRSZWxlYXNlT25QYXVzZShzZXQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=