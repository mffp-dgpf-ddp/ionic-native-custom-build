import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PSPDFKit = /** @class */ (function (_super) {
    __extends(PSPDFKit, _super);
    function PSPDFKit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PSPDFKit.prototype.setLicenseKey = function (licenseKey) { return cordova(this, "setLicenseKey", {}, arguments); };
    PSPDFKit.prototype.present = function (path, options) { return cordova(this, "present", {}, arguments); };
    PSPDFKit.prototype.presentFromAssets = function (assetFile, options) { return cordova(this, "presentFromAssets", {}, arguments); };
    PSPDFKit.prototype.presentWithXFDF = function (path, xfdfPath, options) { return cordova(this, "presentWithXFDF", {}, arguments); };
    PSPDFKit.prototype.dismiss = function () { return cordova(this, "dismiss", {}, arguments); };
    PSPDFKit.prototype.reload = function () { return cordova(this, "reload", {}, arguments); };
    PSPDFKit.prototype.saveDocument = function () { return cordova(this, "saveDocument", {}, arguments); };
    PSPDFKit.prototype.saveAnnotations = function () { return cordova(this, "saveAnnotations", {}, arguments); };
    PSPDFKit.prototype.getHasDirtyAnnotations = function () { return cordova(this, "getHasDirtyAnnotations", {}, arguments); };
    PSPDFKit.prototype.search = function (query, animated, headless) { return cordova(this, "search", {}, arguments); };
    PSPDFKit.prototype.setOptions = function (options, animated) { return cordova(this, "setOptions", {}, arguments); };
    PSPDFKit.prototype.getOptions = function (names) { return cordova(this, "getOptions", {}, arguments); };
    PSPDFKit.prototype.setOption = function (name, value, animated) { return cordova(this, "setOption", {}, arguments); };
    PSPDFKit.prototype.getOption = function (name) { return cordova(this, "getOption", {}, arguments); };
    PSPDFKit.prototype.setPage = function (page, animated) { return cordova(this, "setPage", {}, arguments); };
    PSPDFKit.prototype.getPage = function () { return cordova(this, "getPage", {}, arguments); };
    PSPDFKit.prototype.getPageCount = function () { return cordova(this, "getPageCount", {}, arguments); };
    PSPDFKit.prototype.scrollToNextPage = function (animated) { return cordova(this, "scrollToNextPage", {}, arguments); };
    PSPDFKit.prototype.scrollToPreviousPage = function (animated) { return cordova(this, "scrollToPreviousPage", {}, arguments); };
    PSPDFKit.prototype.setAppearanceMode = function (appearanceMode) { return cordova(this, "setAppearanceMode", {}, arguments); };
    PSPDFKit.prototype.clearCache = function (clearDiskCache) { return cordova(this, "clearCache", {}, arguments); };
    PSPDFKit.prototype.removeCacheForPresentedDocument = function () { return cordova(this, "removeCacheForPresentedDocument", {}, arguments); };
    PSPDFKit.prototype.clearCacheForPage = function (pageIndex) { return cordova(this, "clearCacheForPage", {}, arguments); };
    PSPDFKit.prototype.hideAnnotationToolbar = function () { return cordova(this, "hideAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.showAnnotationToolbar = function () { return cordova(this, "showAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.toggleAnnotationToolbar = function () { return cordova(this, "toggleAnnotationToolbar", {}, arguments); };
    PSPDFKit.prototype.applyInstantJSON = function (jsonValue) { return cordova(this, "applyInstantJSON", {}, arguments); };
    PSPDFKit.prototype.addAnnotation = function (jsonAnnotation) { return cordova(this, "addAnnotation", {}, arguments); };
    PSPDFKit.prototype.removeAnnotation = function (jsonAnnotation) { return cordova(this, "removeAnnotation", {}, arguments); };
    PSPDFKit.prototype.getAnnotations = function (pageIndex, type) { return cordova(this, "getAnnotations", {}, arguments); };
    PSPDFKit.prototype.getAllUnsavedAnnotations = function () { return cordova(this, "getAllUnsavedAnnotations", {}, arguments); };
    PSPDFKit.prototype.setFormFieldValue = function (value, fullyQualifiedName) { return cordova(this, "setFormFieldValue", {}, arguments); };
    PSPDFKit.prototype.getFormFieldValue = function (fullyQualifiedName) { return cordova(this, "getFormFieldValue", {}, arguments); };
    PSPDFKit.prototype.importXFDF = function (xfdfPath) { return cordova(this, "importXFDF", {}, arguments); };
    PSPDFKit.prototype.exportXFDF = function (xfdfPath) { return cordova(this, "exportXFDF", {}, arguments); };
    PSPDFKit.prototype.processAnnotations = function (annotationChange, processedDocumentPath, annotationType) { return cordova(this, "processAnnotations", {}, arguments); };
    PSPDFKit.prototype.convertPDFFromHTMLString = function (html, fileName, options) { return cordova(this, "convertPDFFromHTMLString", {}, arguments); };
    PSPDFKit.pluginName = "PSPDFKit";
    PSPDFKit.plugin = "pspdfkit-cordova";
    PSPDFKit.pluginRef = "PSPDFKit";
    PSPDFKit.repo = "https://github.com/PSPDFKit/PSPDFKit-Cordova";
    PSPDFKit.install = "ionic cordova plugin add pspdfkit-cordova";
    PSPDFKit.platforms = ["Android", "iOS"];
    PSPDFKit = __decorate([
        Injectable()
    ], PSPDFKit);
    return PSPDFKit;
}(IonicNativePlugin));
export { PSPDFKit };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BzcGRma2l0LWNvcmRvdmEvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBT04sTUFBTSxvQkFBb0IsQ0FBQzs7SUE0Q0UsNEJBQWlCOzs7O0lBWTdDLGdDQUFhLGFBQUMsVUFBa0I7SUFrQmhDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE9BQWE7SUFnQm5DLG9DQUFpQixhQUFDLFNBQWlCLEVBQUUsT0FBYTtJQWlCbEQsa0NBQWUsYUFBQyxJQUFZLEVBQUUsUUFBZ0IsRUFBRSxPQUFhO0lBZ0I3RCwwQkFBTztJQWNQLHlCQUFNO0lBZ0JOLCtCQUFZO0lBY1osa0NBQWU7SUFlZix5Q0FBc0I7SUFpQnRCLHlCQUFNLGFBQUMsS0FBYSxFQUFFLFFBQWtCLEVBQUUsUUFBa0I7SUFnQjVELDZCQUFVLGFBQUMsT0FBWSxFQUFFLFFBQWlCO0lBZTFDLDZCQUFVLGFBQUMsS0FBVTtJQWlCckIsNEJBQVMsYUFBQyxJQUFZLEVBQUUsS0FBVSxFQUFFLFFBQWlCO0lBZXJELDRCQUFTLGFBQUMsSUFBWTtJQWdCdEIsMEJBQU8sYUFBQyxJQUFZLEVBQUUsUUFBa0I7SUFjeEMsMEJBQU87SUFjUCwrQkFBWTtJQWVaLG1DQUFnQixhQUFDLFFBQWtCO0lBZW5DLHVDQUFvQixhQUFDLFFBQWtCO0lBZXZDLG9DQUFpQixhQUFDLGNBQXNCO0lBa0J4Qyw2QkFBVSxhQUFDLGNBQXdCO0lBZW5DLGtEQUErQjtJQWUvQixvQ0FBaUIsYUFBQyxTQUFpQjtJQWNuQyx3Q0FBcUI7SUFjckIsd0NBQXFCO0lBY3JCLDBDQUF1QjtJQWdCdkIsbUNBQWdCLGFBQUMsU0FBaUI7SUFpQmxDLGdDQUFhLGFBQUMsY0FBc0I7SUFpQnBDLG1DQUFnQixhQUFDLGNBQXNCO0lBaUJ2QyxpQ0FBYyxhQUFDLFNBQWlCLEVBQUUsSUFBYTtJQWUvQywyQ0FBd0I7SUFpQnhCLG9DQUFpQixhQUFDLEtBQWEsRUFBRSxrQkFBMEI7SUFnQjNELG9DQUFpQixhQUFDLGtCQUEwQjtJQWdCNUMsNkJBQVUsYUFBQyxRQUFnQjtJQWdCM0IsNkJBQVUsYUFBQyxRQUFnQjtJQWtCM0IscUNBQWtCLGFBQUMsZ0JBQXdCLEVBQUUscUJBQTZCLEVBQUUsY0FBc0I7SUFpQmxHLDJDQUF3QixhQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLE9BQWU7Ozs7Ozs7SUFua0I3RCxRQUFRO1FBRHBCLFVBQVUsRUFBRTtPQUNBLFFBQVE7bUJBcERyQjtFQW9EOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgUGx1Z2luLFxyXG4gIENvcmRvdmEsXHJcbiAgQ29yZG92YVByb3BlcnR5LFxyXG4gIENvcmRvdmFJbnN0YW5jZSxcclxuICBJbnN0YW5jZVByb3BlcnR5LFxyXG4gIElvbmljTmF0aXZlUGx1Z2luLFxyXG59IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBQU1BERktpdC1Db3Jkb3ZhXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgb2ZmaWNpYWwgcGx1Z2luIHRvIHVzZSBQU1BERktpdCB3aXRoIENvcmRvdmEgYW5kIElvbmljLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBQU1BERktpdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcHNwZGZraXQtY29yZG92YS9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHBzcGRma2l0OiBQU1BERktpdCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyBTZXQgeW91ciBsaWNlbnNlIGtleSBoZXJlLlxyXG4gKiB0aGlzLnBzcGRma2l0LnNldExpY2Vuc2VLZXkoXCJZT1VSIEtFWVwiKTtcclxuICpcclxuICogLy8gU2hvdyBhIFBERiBpbiBzaW5nbGUgcGFnZSBtb2RlLCB3aXRoIGEgYmxhY2sgYmFja2dyb3VuZC5cclxuICogdGhpcy5wc3BkZmtpdC5wcmVzZW50KCdkb2N1bWVudC5wZGYnLCB7cGFnZU1vZGU6ICdzaW5nbGUnLCBiYWNrZ3JvdW5kQ29sb3I6IFwiYmxhY2tcIn0pXHJcbiAqICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICogICAgICBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBTdWNjZXNzXHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gKiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsgLy8gRmFpbGVkXHJcbiAqICAgfSk7XHJcbiAqIH1cclxuICpcclxuICogLy8gU2Nyb2xsIHRvIHBhZ2UgYXQgaW5kZXggMS5cclxuICogdGhpcy5wc3BkZmtpdC5zZXRQYWdlKDEsIHRydWUpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdQU1BERktpdCcsXHJcbiAgcGx1Z2luOiAncHNwZGZraXQtY29yZG92YScsXHJcbiAgcGx1Z2luUmVmOiAnUFNQREZLaXQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vUFNQREZLaXQvUFNQREZLaXQtQ29yZG92YScsXHJcbiAgaW5zdGFsbDogJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBwc3BkZmtpdC1jb3Jkb3ZhJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUFNQREZLaXQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQWN0aXZhdGVzIFBTUERGS2l0IHdpdGggeW91ciBsaWNlbnNlIGtleSBmcm9tIGh0dHBzOi8vY3VzdG9tZXJzLnBzcGRma2l0LmNvbS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gVGhlIGxpY2Vuc2Uga2V5LlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gU3VjY2VzcyBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRMaWNlbnNlS2V5KGxpY2Vuc2VLZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBpT1M6IERpc3BsYXlzIGEgUERGIGluIGEgZnVsbC1zY3JlZW4gbW9kYWwuXHJcbiAgICogQW5kcm9pZDogT3BlbnMgdGhlIFBTUERGQWN0aXZpdHkgdG8gc2hvdyBhIGRvY3VtZW50IGZyb20gdGhlIGxvY2FsIGRldmljZSBmaWxlIHN5c3RlbS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXRoIHtzdHJpbmd9IFRoZSBwYXRoIHNob3VsZCBiZSBhIHN0cmluZyBjb250YWluaW5nIHRoZSBmaWxlIHBhdGggKG5vdCBVUkwpIGZvciB0aGUgUERGLiBSZWxhdGl2ZSBwYXRocyBhcmUgYXNzdW1lZCB0byBiZSByZWxhdGl2ZSB0byB0aGUgd3d3IGRpcmVjdG9yeSAoaWYgdGhlIHBhdGggaGFzIGEgZGlmZmVyZW50IGJhc2UgVVJMIHNldCwgdGhpcyB3aWxsIGJlIGlnbm9yZWQpLiBUbyBzcGVjaWZ5IGEgcGF0aCBpbnNpZGUgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50cyBvciBsaWJyYXJ5IGRpcmVjdG9yeSwgdXNlIGEgYH5gLCBlLmcuIGBcIn4vRG9jdW1lbnRzL215cGRmLnBkZlwiYCBvciBgXCJ+L0xpYnJhcnkvQXBwbGljYXRpb24gU3VwcG9ydC9teXBkZi5wZGZcImAuIFBhdGggY2FuIGJlIG51bGwsIGJ1dCBtdXN0IG5vdCBiZSBvbWl0dGVkXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gVGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgaXMgYW4gb3B0aW9uYWwgb2JqZWN0IGNvbnRhaW5pbmcgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGZvciB0aGUgUERGIGRvY3VtZW50IGFuZC9vciB2aWV3IGNvbnRyb2xsZXIuIEFsbCBjdXJyZW50bHkgc3VwcG9ydGVkIHZhbHVlcyBhcmUgbGlzdGVkIGJlbG93IHVuZGVyIE9wdGlvbnMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJlc2VudChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbnMgdGhlIFBTUERGQWN0aXZpdHkgdG8gc2hvdyBhIGRvY3VtZW50IGZyb20gdGhlIGFwcCdzIGFzc2V0cyBmb2xkZXIuIFRoaXMgbWV0aG9kIGNvcGllcyB0aGVcclxuICAgKiBmaWxlIHRvIHRoZSBpbnRlcm5hbCBhcHAgZGlyZWN0b3J5IG9uIHRoZSBkZXZpY2UgYmVmb3JlIHNob3dpbmcgaXQuXHJcbiAgICogQHBhcmFtIGFzc2V0RmlsZSB7c3RyaW5nfSBSZWxhdGl2ZSBwYXRoIHdpdGhpbiB0aGUgYXBwJ3MgYXNzZXRzIGZvbGRlci5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7YW55fSBQU1BERktpdCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcmVzZW50RnJvbUFzc2V0cyhhc3NldEZpbGU6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEaXNwbGF5cyBhIFBERiBpbiBhIGZ1bGwtc2NyZWVuIG1vZGFsIGFuZCBpbXBvcnRzIGFubm90YXRpb25zIGZyb20gYSBnaXZlbiBYRkRGIGZpbGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGF0aCB7c3RyaW5nfSBTaG91bGQgYmUgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgZmlsZSBwYXRoIChub3QgVVJMKSBmb3IgdGhlIFBERi4gUmVsYXRpdmUgcGF0aHMgYXJlIGFzc3VtZWQgdG8gYmUgcmVsYXRpdmUgdG8gdGhlIHd3dyBkaXJlY3RvcnkgKGlmIHRoZSBwYXRoIGhhcyBhIGRpZmZlcmVudCBiYXNlIFVSTCBzZXQsIHRoaXMgd2lsbCBiZSBpZ25vcmVkKS4gVG8gc3BlY2lmeSBhIHBhdGggaW5zaWRlIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudHMgb3IgbGlicmFyeSBkaXJlY3RvcnksIHVzZSBhIGB+YCwgZS5nLiBgXCJ+L0RvY3VtZW50cy9teXBkZi5wZGZcImAgb3IgYFwifi9MaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcnQvbXlwZGYucGRmXCJgLiBQYXRoIGNhbiBiZSBudWxsLCBidXQgbXVzdCBub3QgYmUgb21pdHRlZFxyXG4gICAqIEBwYXJhbSB4ZmRmUGF0aCB7c3RyaW5nfSBzaG91bGQgYmUgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgZmlsZSBwYXRoIChub3QgVVJMKSBmb3IgdGhlIFhGREYgZmlsZSBiYWNraW5nIHRoZSBQREYgZG9jdW1lbnQuIFJlbGF0aXZlIHBhdGhzIGFyZSBhc3N1bWVkIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSB3d3cgZGlyZWN0b3J5IChpZiB0aGUgeGZkZiBwYXRoIGhhcyBhIGRpZmZlcmVudCBiYXNlIFVSTCBzZXQsIHdlIHdpbGwgY3JlYXRlIGFuIFhGREYgZmlsZSBpbiBgJ1wifi9Eb2N1bWVudHMvXCIgKyB4ZmRmUGF0aCdgKS4gVG8gc3BlY2lmeSBhIHBhdGggaW5zaWRlIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudHMgb3IgbGlicmFyeSBkaXJlY3RvcnksIHVzZSBhIH4sIGUuZy4gYFwifi9Eb2N1bWVudHMvbXlYRkRGLnhmZGZcImAgb3IgYFwifi9MaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcnQvbXlYRkRGLnhmZGZcImAuIFRoZSB4ZmRmUGF0aCBjYW5ub3QgYmUgbnVsbCBhbmQgbXVzdCBub3QgYmUgb21pdHRlZC5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7YW55fSBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBpcyBhbiBvcHRpb25hbCBvYmplY3QgY29udGFpbmluZyBjb25maWd1cmF0aW9uIHByb3BlcnRpZXMgZm9yIHRoZSBQREYgZG9jdW1lbnQgYW5kL29yIHZpZXcgY29udHJvbGxlci4gQWxsIGN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzIGFyZSBsaXN0ZWQgYmVsb3cgdW5kZXIgT3B0aW9ucy5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJlc2VudFdpdGhYRkRGKHBhdGg6IHN0cmluZywgeGZkZlBhdGg6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBpT1M6IERpc21pc3NlcyB0aGUgbW9kYWxseSBwcmVzZW50ZWQgUERGIHZpZXcuXHJcbiAgICogQW5kcm9pZDogRGlzbWlzc2VzIGFueSBwcmV2aW91c2x5IGxhdW5jaGVkIFBERiBhY3Rpdml0eS4gQ2FsbHMgdGhlIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIGFmdGVyIGFsbCBhY3Rpdml0aWVzIGhhdmUgYmVlbiBkaXNtaXNzZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaXNtaXNzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxvYWRzIHRoZSBjdXJyZW50IFBERi5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWxvYWQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogU2F2ZXMgdGhlIGRvY3VtZW50IHRvIG9yaWdpbmFsIGxvY2F0aW9uIGlmIGl0IGhhcyBiZWVuIGNoYW5nZWQuIElmIHRoZXJlIHdlcmUgbm8gY2hhbmdlcyB0byB0aGVcclxuICAgKiBkb2N1bWVudCwgdGhlIGRvY3VtZW50IGZpbGUgd2lsbCBub3QgYmUgbW9kaWZpZWQuXHJcbiAgICogUHJvdmlkZXMgXCJ3YXNNb2RpZmllZFwiIGFzIGEgcGFydCBvZiBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2Ugd2hpY2ggd2lsbCBiZSBlcXVhbCB0byB0cnVlIGlmXHJcbiAgICogdGhlIGZpbGUgd2FzIG1vZGlmaWVkIGFuZCBjaGFuZ2VzIHdlcmUgc2F2ZWQuIGZhbHNlIGlmIHRoZXJlIHdhcyBub3RoaW5nIHRvIHNhdmUuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1BbmRyb2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNhdmVEb2N1bWVudCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2F2ZXMgYW55IGNoYW5nZWQgYW5ub3RhdGlvbnMgaW4gdGhlIGN1cnJlbnQgZG9jdW1lbnQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2F2ZUFubm90YXRpb25zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gdHJ1ZSBpbiB0aGUgc3VjY2VzcyAob3IgcmVzdWx0KSBjYWxsYmFjayBpZiB0aGUgZG9jdW1lbnQgaGFzIHVuc2F2ZWQgYW5ub3RhdGlvbi4gUmV0dXJucyBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRIYXNEaXJ0eUFubm90YXRpb25zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmlnZ2VycyBhIHNlYXJjaCBmb3IgdGhlIHNwZWNpZmllZCBxdWVyeS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBxdWVyeSB7c3RyaW5nfSBTZWFyY2ggVGVybSB0byBxdWVyeVxyXG4gICAqIEBwYXJhbSBhbmltYXRlZCB7Ym9vbGVhbn0gRGV0ZXJtaW5lcyBpZiB0aGUgc2VhcmNoIHNob3VsZCBiZSBhbmltYXRlZCAoaWYgb21pdHRlZCwgdGhlIHNlYXJjaCB3aWxsIG5vdCBiZSBhbmltYXRlZCkuIFRoZSBvcHRpb25hbCBoZWFkbGVzcyBhcmd1bWVudCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNlYXJjaCBVSSBzaG91bGQgYmUgZGlzYXBseWVkIChpZiBvbWl0dGVkLCB0aGUgc2VhcmNoIFVJICp3aWxsKiBiZSBkaXNwbGF5ZWQpLlxyXG4gICAqIEBwYXJhbSBoZWFkbGVzcyB7Ym9vbGVhbn0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzZWFyY2ggVUkgc2hvdWxkIGJlIGRpc2FwbHllZCAoaWYgb21pdHRlZCwgdGhlIHNlYXJjaCBVSSAqd2lsbCogYmUgZGlzcGxheWVkKS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2VhcmNoKHF1ZXJ5OiBzdHJpbmcsIGFuaW1hdGVkPzogYm9vbGVhbiwgaGVhZGxlc3M/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgbXVsdGlwbGUgZG9jdW1lbnQgYW5kIHZpZXcgY29udHJvbGxlciBzZXR0aW5ncyBhdCBvbmNlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gVGhlIG9wdGlvbnMgc2V0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY3VycmVudCBkb2N1bWVudCAoaWYgdGhlcmUgaXMgb25lKSBhcyB3ZWxsIGFzIGFsbCBzdWJzZXF1ZW50bHkgZGlzcGxheWVkIGRvY3VtZW50cy4gQWxsIGN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzIGFyZSBsaXN0ZWQgYmVsb3cgdW5kZXIgT3B0aW9ucy5cclxuICAgKiBAcGFyYW0gYW5pbWF0ZWQge2Jvb2xlYW59IGRldGVybWluZXMgaWYgdGhlIHByb3BlcnR5IHNob3VsZCBiZSBhbmltYXRlZC4gTm90IGFsbCBwcm9wZXJ0eSBjaGFuZ2VzIGNhbiBiZSBhbmltYXRlZCwgc28gaWYgdGhlIHByb3BlcnR5IGRvZXMgbm90IHN1cHBvcnQgYW5pbWF0aW9uIHRoZSBhbmltYXRlZCBhcmd1bWVudCB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldE9wdGlvbnMob3B0aW9uczogYW55LCBhbmltYXRlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHNldmVyYWwgZG9jdW1lbnQgb3IgdmlldyBjb250cm9sbGVyIG9wdGlvbnMgaW4gYSBzaW5nbGUgY2FsbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBuYW1lcyB7YW55fSBhcnJheSBvZiBvcHRpb24gbmFtZXNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0T3B0aW9ucyhuYW1lczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgYSBzaW5nbGUgZG9jdW1lbnQgb3IgdmlldyBjb250cm9sbGVyIHNldHRpbmdzIGF0IG9uY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSB0aGUgb3B0aW9uIG5hbWVcclxuICAgKiBAcGFyYW0gdmFsdWUge2FueX0gdGhlIG9wdGlvbiB2YWx1ZVxyXG4gICAqIEBwYXJhbSBhbmltYXRlZCB7Ym9vbGVhbn0gZGV0ZXJtaW5lcyBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIGJlIGFuaW1hdGVkLiBOb3QgYWxsIHByb3BlcnR5IGNoYW5nZXMgY2FuIGJlIGFuaW1hdGVkLCBzbyBpZiB0aGUgcHJvcGVydHkgZG9lcyBub3Qgc3VwcG9ydCBhbmltYXRpb24gdGhlIGFuaW1hdGVkIGFyZ3VtZW50IHdpbGwgYmUgaWdub3JlZC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgYW5pbWF0ZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIHNpbmdsZSBkb2N1bWVudCBvciB2aWV3IGNvbnRyb2xsZXIgc2V0dGluZ3MgYXQgb25jZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IHRoZSBvcHRpb24gbmFtZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRPcHRpb24obmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgdmlzaWJsZSBwYWdlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhZ2Uge251bWJlcn0gdGhlIHBhZ2UgaW5kZXhcclxuICAgKiBAcGFyYW0gYW5pbWF0ZWQge2Jvb2xlYW59IE9wdGlvbmFsIGFyZ3VtZW50LiBEZXRlcm1pbmVzIGlmIHRoZSBwYWdlIGNoYW5nZSBzaG91bGQgYmUgYW5pbWF0ZWQgKGlmIG9taXR0ZWQsIHRoZSBzZWFyY2ggd2lsbCBub3QgYmUgYW5pbWF0ZWQpLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRQYWdlKHBhZ2U6IG51bWJlciwgYW5pbWF0ZWQ/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGN1cnJlbnRseSB2aXNpYmxlIHBhZ2UuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UGFnZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgcGFnZSBjb3VudCBvZiB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQYWdlQ291bnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbHMgdG8gdGhlIG5leHQgcGFnZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBhbmltYXRlZCB7Ym9vbGVhbn0gT3B0aW9uYWwgYXJndW1lbnQuIERldGVybWluZXMgaWYgdGhlIHBhZ2UgY2hhbmdlIHNob3VsZCBiZSBhbmltYXRlZCAoaWYgb21pdHRlZCwgdGhlIHNlYXJjaCB3aWxsIG5vdCBiZSBhbmltYXRlZCkuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNjcm9sbFRvTmV4dFBhZ2UoYW5pbWF0ZWQ/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbHMgdG8gdGhlIHByZXZpb3VzIHBhZ2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYW5pbWF0ZWQge2Jvb2xlYW59IE9wdGlvbmFsIGFyZ3VtZW50LiBEZXRlcm1pbmVzIGlmIHRoZSBwYWdlIGNoYW5nZSBzaG91bGQgYmUgYW5pbWF0ZWQgKGlmIG9taXR0ZWQsIHRoZSBzZWFyY2ggd2lsbCBub3QgYmUgYW5pbWF0ZWQpLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzY3JvbGxUb1ByZXZpb3VzUGFnZShhbmltYXRlZD86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgYXBwZWFyYW5jZSBtb2RlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGFwcGVhcmFuY2VNb2RlIHtzdHJpbmd9IHRoZSBhcHBlYXJhbmNlIG1vZGUuIENhbiBiZSAnZGVmYXVsdCcsICdzZXBpYScsIG9yICduaWdodCdcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0QXBwZWFyYW5jZU1vZGUoYXBwZWFyYW5jZU1vZGU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgdGhlIGVudGlyZSByZW5kZXIgY2FjaGUuIFRoaXMgaW52YWxpZGF0ZXMgcmVuZGVyIGNhY2hlcyBmb3IgYWxsIHByZXZpb3VzbHkgcmVuZGVyZWQgZG9jdW1lbnRzLlxyXG4gICAqIENvbnNpZGVyIHVzaW5nIGByZW1vdmVDYWNoZUZvclByZXNlbnRlZERvY3VtZW50KClgIG9yIGBjbGVhckNhY2hlRm9yUGFnZSgpYCBpbnN0ZWFkIG9mIHRoaXMsXHJcbiAgICogc2luY2UgaW52YWxpZGF0aW5nIHNpbmdsZSBkb2N1bWVudHMgb3Igc3BlY2lmaWMgcGFnZSBjYWNoZXMgc2luY2UgZXhjZXNzaXZlIGNhY2hlIGludmFsaWRhdGlvbiBtYXkgZGVjcmVhc2UgcGVyZm9ybWFuY2UuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY2xlYXJEaXNrQ2FjaGUge2Jvb2xlYW59IG9wdGlvbmFsIHBhcmFtZXRlci4gQW5kcm9pZDogaWYgc2V0IHRvIHRydWUgY2xlYXJzIGRpc2sgY2FjaGUgYXMgd2VsbC4gaU9TOiBoYXMgbm8gZWZmZWN0LlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqIC1BbmRyb2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFyQ2FjaGUoY2xlYXJEaXNrQ2FjaGU/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsZWFycyB0aGUgY2FjaGUgZnJvbSB0aGUgY3VycmVudGx5IHByZXNlbnRlZCBkb2N1bWVudC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqIC1BbmRyb2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZUNhY2hlRm9yUHJlc2VudGVkRG9jdW1lbnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludmFsaWRhdGVzIHRoZSByZW5kZXIgY2FjaGUgZm9yIHRoZSBzcGVjaWZpZWQgcGFnZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYWdlSW5kZXgge251bWJlcn0gMC1iYXNlZCBpbmRleCBvZiB0aGUgcGFnZSB3aG9zZSByZW5kZXIgY2FjaGUgc2hvdWxkIGJlIGludmFsaWRhdGVkLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xlYXJDYWNoZUZvclBhZ2UocGFnZUluZGV4OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZXMgdGhlIGFubm90YXRpb24gdG9vbGJhclxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhpZGVBbm5vdGF0aW9uVG9vbGJhcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIGFubm90YXRpb24gdG9vbGJhclxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dBbm5vdGF0aW9uVG9vbGJhcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVG9nZ2xlcyB0aGUgYW5ub3RhdGlvbiB0b29sYmFyXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdG9nZ2xlQW5ub3RhdGlvblRvb2xiYXIoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGxpZXMgdGhlIHBhc3NlZCBpbiBkb2N1bWVudCBJbnN0YW50IEpTT04uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ganNvblZhbHVlIHtzdHJpbmd9IFRoZSBkb2N1bWVudCBJbnN0YW50IEpTT04gdG8gYXBwbHkuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYXBwbHlJbnN0YW50SlNPTihqc29uVmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgbmV3IGFubm90YXRpb24gdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQgdXNpbmcgdGhlIEluc3RhbnQgSlNPTiBBbm5vdGF0aW9uXHJcbiAgICogcGF5bG9hZCAtIGh0dHBzOi8vcHNwZGZraXQuY29tL2d1aWRlcy9pb3MvY3VycmVudC9pbXBvcnRpbmctZXhwb3J0aW5nL2luc3RhbnQtanNvbi8jaW5zdGFudC1hbm5vdGF0aW9uLWpzb24tYXBpXHJcbiAgICpcclxuICAgKiBAcGFyYW0ganNvbkFubm90YXRpb24ge3N0cmluZ30gSW5zdGFudCBKU09OIG9mIHRoZSBhbm5vdGF0aW9uIHRvIGFkZC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhZGRBbm5vdGF0aW9uKGpzb25Bbm5vdGF0aW9uOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhIGdpdmVuIGFubm90YXRpb24gZnJvbSB0aGUgY3VycmVudCBkb2N1bWVudC4gIFRoZSBhbm5vdGFpb24gaXMgZXhwZWN0ZWQgdG8gYmUgaW4gSW5zdGFudFxyXG4gICAqIEpTT04gZm9ybWF0IC0gaHR0cHM6Ly9wc3BkZmtpdC5jb20vZ3VpZGVzL2lvcy9jdXJyZW50L2ltcG9ydGluZy1leHBvcnRpbmcvaW5zdGFudC1qc29uLyNpbnN0YW50LWFubm90YXRpb24tanNvbi1hcGlcclxuICAgKlxyXG4gICAqIEBwYXJhbSBqc29uQW5ub3RhdGlvbiB7c3RyaW5nfSBJbnN0YW50IEpTT04gb2YgdGhlIGFubm90YXRpb24gdG8gcmVtb3ZlLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqIC1BbmRyb2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZUFubm90YXRpb24oanNvbkFubm90YXRpb246IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGFsbCBhbm5vdGF0aW9ucyBvZiB0aGUgZ2l2ZW4gdHlwZSBmcm9tIHRoZSBwYWdlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhZ2VJbmRleCB7bnVtYmVyfSBUaGUgcGFnZSB0byBnZXQgdGhlIGFubm90YXRpb25zIGZvci5cclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBUaGUgdHlwZSBvZiBhbm5vdGF0aW9ucyB0byBnZXQgKFNlZSBoZXJlIGZvciB0eXBlcyBodHRwczovL3BzcGRma2l0LmNvbS9ndWlkZXMvc2VydmVyL2N1cnJlbnQvYXBpL2pzb24tZm9ybWF0Lykgb3IgYG51bGxgIHRvIGdldCBhbGwgYW5ub3RhdGlvbnMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QW5ub3RhdGlvbnMocGFnZUluZGV4OiBudW1iZXIsIHR5cGU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhbGwgdW5zYXZlZCBjaGFuZ2VzIHRvIGFubm90YXRpb25zLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QWxsVW5zYXZlZEFubm90YXRpb25zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBlbGVtZW50IG9mIHRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB2YWx1ZSB7c3RyaW5nfSB0aGUgdmFsdWUuXHJcbiAgICogQHBhcmFtIGZ1bGx5UXVhbGlmaWVkTmFtZSB7c3RyaW5nfSB0aGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUgb2YgdGhlIGZvcm0gZWxlbWVudC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRGb3JtRmllbGRWYWx1ZSh2YWx1ZTogc3RyaW5nLCBmdWxseVF1YWxpZmllZE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBlbGVtZW50IG9mIHRoZSBmdWxseSBxdWFsaWZpZWQgbmFtZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBmdWxseVF1YWxpZmllZE5hbWUge3N0cmluZ30gZGVzY3JpcHRpb24uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChyZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Rm9ybUZpZWxkVmFsdWUoZnVsbHlRdWFsaWZpZWROYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0cyBhbGwgYW5ub3RhdGlvbnMgZnJvbSB0aGUgc3BlY2lmaWVkIFhGREYgZmlsZSB0byB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB4ZmRmUGF0aCB7c3RyaW5nfSBYRkRGIGZpbGUgcGF0aCB0byBpbXBvcnQgYW5ub3RhdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKiAtQW5kcm9pZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbXBvcnRYRkRGKHhmZGZQYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXhwb3J0cyBhbGwgYW5ub3RhdGlvbnMgZnJvbSB0aGUgY3VycmVudCBkb2N1bWVudCB0byB0aGUgc3BlY2lmaWVkIFhGREYgZmlsZSBwYXRoLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHhmZGZQYXRoIHtzdHJpbmd9IFhGREYgZmlsZSBwYXRoIHRvIGV4cG9ydCBhbm5vdGF0aW9uc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gY2FsbGJhY2sgU3VjY2VzcyAob3IgcmVzdWx0KSBhbmQgZXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBfX1N1cHBvcnRlZCBQbGF0Zm9ybXNfX1xyXG4gICAqXHJcbiAgICogLWlPU1xyXG4gICAqIC1BbmRyb2lkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV4cG9ydFhGREYoeGZkZlBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcm9jZXNzZXMgYW5ub3RhdGlvbnMgKGVtYmVkLCByZW1vdmUsIGZsYXR0ZW4sIG9yIHByaW50KSBhbmQgc2F2ZXMgdGhlIHByb2Nlc3NlZCBkb2N1bWVudCB0byB0aGUgZ2l2ZW4gZG9jdW1lbnQgcGF0aC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBhbm5vdGF0aW9uQ2hhbmdlIHtzdHJpbmd9IHRoZSBhbm5vdGF0aW9uIGNoYW5nZS4gQ2FuIGJlICdmbGF0dGVuJywgJ3JlbW92ZScsICdlbWJlZCcgb3IgJ3ByaW50J1xyXG4gICAqIEBwYXJhbSBwcm9jZXNzZWREb2N1bWVudFBhdGgge3N0cmluZ30gZGVzY3JpcHRpb24uXHJcbiAgICogQHBhcmFtIGFubm90YXRpb25UeXBlIHtzdHJpbmd9IFRoZSBvcHRpb25hbCBzdHJpbmcgYW5ub3RhdGlvblR5cGUgYXJndW1lbnQuIElmIG9taXR0ZWQsIHdlIHByb2Nlc3MgJ0FsbCcgYW5ub3RhdGlvbnMuIFRoZSBhbm5vdGF0aW9uIHR5cGUgY2FuIGhhdmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiBOb25lLCBVbmRlZmluZWQsIExpbmssIEhpZ2hsaWdodCwgU3RyaWtlT3V0LCBVbmRlcmxpbmUsIFNxdWlnZ2x5LCBGcmVlVGV4dCwgSW5rLCBTcXVhcmUsIENpcmNsZSwgTGluZSwgVGV4dCwgU3RhbXAsIENhcmV0LCBSaWNoTWVkaWEsIFNjcmVlbiwgV2lkZ2V0LCBTb3VuZCwgRmlsZUF0dGFjaG1lbnQsIFBvbHlnb24sIFBvbHlMaW5lLCBQb3B1cCwgV2F0ZXJtYXJrLCBUcmFwTmV0LCAzRCwgUmVkYWN0LCBBbGwuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBjYWxsYmFjayBTdWNjZXNzIChvciByZXN1bHQpIGFuZCBlcnJvciBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgKlxyXG4gICAqIF9fU3VwcG9ydGVkIFBsYXRmb3Jtc19fXHJcbiAgICpcclxuICAgKiAtaU9TXHJcbiAgICogLUFuZHJvaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvY2Vzc0Fubm90YXRpb25zKGFubm90YXRpb25DaGFuZ2U6IHN0cmluZywgcHJvY2Vzc2VkRG9jdW1lbnRQYXRoOiBzdHJpbmcsIGFubm90YXRpb25UeXBlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIGEgUERGIGRvY3VtZW50IGZyb20gSFRNTCBzdHJpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaHRtbCB7c3RyaW5nfSBIVE1MIHN0cmluZy5cclxuICAgKiBAcGFyYW0gZmlsZU5hbWUge3N0cmluZ30gRmlsZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgUERGLlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtzdHJpbmd9IE9wdGlvbnMgdG8gYmUgY29uc2lkZXJlZCB3aGVuIGNvbnZlcnRpbmcgdGhlIEhUTUwgc3RyaW5nIHRvIFBERi5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGNhbGxiYWNrIFN1Y2Nlc3MgKG9yIHJlc3VsdCkgYW5kIGVycm9yIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogX19TdXBwb3J0ZWQgUGxhdGZvcm1zX19cclxuICAgKlxyXG4gICAqIC1pT1NcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY29udmVydFBERkZyb21IVE1MU3RyaW5nKGh0bWw6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgb3B0aW9uczogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19