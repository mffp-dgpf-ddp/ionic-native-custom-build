import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance, instancePropertyGet, instancePropertySet, checkAvailability } from '@ionic-native/core';
var MSAdal = /** @class */ (function (_super) {
    __extends(MSAdal, _super);
    function MSAdal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MSAdal.prototype.createAuthenticationContext = function (authority, validateAuthority) {
        if (validateAuthority === void 0) { validateAuthority = true; }
        var authContext;
        if (checkAvailability(MSAdal.getPluginRef(), null, MSAdal.getPluginName()) === true) {
            authContext = new (MSAdal.getPlugin().AuthenticationContext)(authority, validateAuthority);
        }
        return new AuthenticationContext(authContext);
    };
    MSAdal.pluginName = "MSADAL";
    MSAdal.plugin = "cordova-plugin-ms-adal";
    MSAdal.pluginRef = "Microsoft.ADAL";
    MSAdal.repo = "https://github.com/AzureAD/azure-activedirectory-library-for-cordova";
    MSAdal.platforms = ["Android", "iOS", "Windows"];
    MSAdal = __decorate([
        Injectable()
    ], MSAdal);
    return MSAdal;
}(IonicNativePlugin));
export { MSAdal };
var AuthenticationContext = /** @class */ (function () {
    function AuthenticationContext(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    AuthenticationContext.prototype.acquireTokenAsync = function (resourceUrl, clientId, redirectUrl, userId, extraQueryParameters, claims) { return cordovaInstance(this, "acquireTokenAsync", { "otherPromise": true }, arguments); };
    AuthenticationContext.prototype.acquireTokenSilentAsync = function (resourceUrl, clientId, userId) { return cordovaInstance(this, "acquireTokenSilentAsync", { "otherPromise": true }, arguments); };
    Object.defineProperty(AuthenticationContext.prototype, "authority", {
        get: function () { return instancePropertyGet(this, "authority"); },
        set: function (value) { instancePropertySet(this, "authority", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthenticationContext.prototype, "validateAuthority", {
        get: function () { return instancePropertyGet(this, "validateAuthority"); },
        set: function (value) { instancePropertySet(this, "validateAuthority", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthenticationContext.prototype, "tokenCache", {
        get: function () { return instancePropertyGet(this, "tokenCache"); },
        set: function (value) { instancePropertySet(this, "tokenCache", value); },
        enumerable: true,
        configurable: true
    });
    return AuthenticationContext;
}());
export { AuthenticationContext };
var AuthenticationSettings = /** @class */ (function () {
    function AuthenticationSettings() {
    }
    AuthenticationSettings.prototype.setUseBroker = function (useBroker) { return cordovaInstance(this, "setUseBroker", { "otherPromise": true }, arguments); };
    return AuthenticationSettings;
}());
export { AuthenticationSettings };
//# sourceMappingURL=data:application/json;base64,