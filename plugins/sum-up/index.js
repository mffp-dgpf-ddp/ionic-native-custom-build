var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SumUpKeys = /** @class */ (function () {
    function SumUpKeys() {
        this.accessToken = '';
        this.affiliateKey = '';
    }
    return SumUpKeys;
}());
export { SumUpKeys };
var SumUpOriginal = /** @class */ (function (_super) {
    __extends(SumUpOriginal, _super);
    function SumUpOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SumUpOriginal.prototype.login = function (sumUpKeys) { return cordova(this, "login", {}, arguments); };
    SumUpOriginal.prototype.auth = function (accessToken) { return cordova(this, "auth", {}, arguments); };
    SumUpOriginal.prototype.getSettings = function () { return cordova(this, "getSettings", {}, arguments); };
    SumUpOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    SumUpOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    SumUpOriginal.prototype.prepare = function () { return cordova(this, "prepare", {}, arguments); };
    SumUpOriginal.prototype.closeConnection = function () { return cordova(this, "closeConnection", {}, arguments); };
    SumUpOriginal.prototype.pay = function (amount, currencycode) { return cordova(this, "pay", {}, arguments); };
    SumUpOriginal.pluginName = "SumUp";
    SumUpOriginal.plugin = "cordova-sumup-plugin";
    SumUpOriginal.pluginRef = "window.SumUp";
    SumUpOriginal.repo = "https://github.com/mariusbackes/cordova-plugin-sumup";
    SumUpOriginal.install = "cordova plugin add cordova-sumup-plugin --variable SUMUP_API_KEY=INSERT_YOUR_KEY";
    SumUpOriginal.installVariables = ["SUMUP_API_KEY"];
    SumUpOriginal.platforms = ["Android", "iOS"];
    return SumUpOriginal;
}(IonicNativePlugin));
var SumUp = new SumUpOriginal();
export { SumUp };
//# sourceMappingURL=data:application/json;base64,