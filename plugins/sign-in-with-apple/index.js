var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ASAuthorizationAppleIDRequest = /** @class */ (function () {
    function ASAuthorizationAppleIDRequest() {
    }
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeFullName = 0;
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeEmail = 1;
    return ASAuthorizationAppleIDRequest;
}());
export { ASAuthorizationAppleIDRequest };
var SignInWithAppleOriginal = /** @class */ (function (_super) {
    __extends(SignInWithAppleOriginal, _super);
    function SignInWithAppleOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SignInWithAppleOriginal.prototype.signin = function (options) {
        if (options === void 0) { options = {}; }
        return cordova(this, "signin", {}, arguments);
    };
    SignInWithAppleOriginal.pluginName = "Sign in with Apple";
    SignInWithAppleOriginal.plugin = "cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.pluginRef = "cordova.plugins.SignInWithApple";
    SignInWithAppleOriginal.repo = "https://github.com/twogate/cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.platforms = ["iOS"];
    return SignInWithAppleOriginal;
}(IonicNativePlugin));
var SignInWithApple = new SignInWithAppleOriginal();
export { SignInWithApple };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NpZ24taW4td2l0aC1hcHBsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7OztJQU10RCwwREFBNEIsR0FBRyxDQUFDLENBQUM7SUFDakMsdURBQXlCLEdBQUcsQ0FBQyxDQUFDO3dDQVJoRDs7U0FNYSw2QkFBNkI7O0lBNEpMLG1DQUFpQjs7OztJQVNwRCxnQ0FBTSxhQUFDLE9BQTJDO1FBQTNDLHdCQUFBLEVBQUEsWUFBMkM7Ozs7Ozs7OzBCQTNLcEQ7RUFrS3FDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2F1dGhlbnRpY2F0aW9uc2VydmljZXMvYXNhdXRob3JpemF0aW9uYXBwbGVpZHJlcXVlc3RcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdCB7XHJcbiAgc3RhdGljIHJlYWRvbmx5IEFTQXV0aG9yaXphdGlvblNjb3BlRnVsbE5hbWUgPSAwO1xyXG4gIHN0YXRpYyByZWFkb25seSBBU0F1dGhvcml6YXRpb25TY29wZUVtYWlsID0gMTtcclxuXHJcbiAgcmVxdWVzdGVkU2NvcGVzPzogbnVtYmVyW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2ZvdW5kYXRpb24vbnNwZXJzb25uYW1lY29tcG9uZW50cy8xNDEyMTkzLXBob25ldGljcmVwcmVzZW50YXRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTlNQZXJzb25OYW1lQ29tcG9uZW50cyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHBvcnRpb24gb2YgYSBuYW1l4oCZcyBmdWxsIGZvcm0gb2YgYWRkcmVzcyB0aGF0IHByZWNlZGVzIHRoZSBuYW1lIGl0c2VsZiAoZm9yIGV4YW1wbGUsIFwiRHIuLFwiIFwiTXIuLFwiIFwiTXMuXCIpXHJcbiAgICovXHJcbiAgbmFtZVByZWZpeD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTmFtZSBiZXN0b3dlZCB1cG9uIGFuIGluZGl2aWR1YWwgdG8gZGlmZmVyZW50aWF0ZSB0aGVtIGZyb20gb3RoZXIgbWVtYmVycyBvZiBhIGdyb3VwIHRoYXQgc2hhcmUgYSBmYW1pbHkgbmFtZSAoZm9yIGV4YW1wbGUsIFwiSm9obmF0aGFuXCIpXHJcbiAgICovXHJcbiAgZ2l2ZW5OYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBTZWNvbmRhcnkgbmFtZSBiZXN0b3dlZCB1cG9uIGFuIGluZGl2aWR1YWwgdG8gZGlmZmVyZW50aWF0ZSB0aGVtIGZyb20gb3RoZXJzIHRoYXQgaGF2ZSB0aGUgc2FtZSBnaXZlbiBuYW1lIChmb3IgZXhhbXBsZSwgXCJNYXBsZVwiKVxyXG4gICAqL1xyXG4gIG1pZGRsZU5hbWU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5hbWUgYmVzdG93ZWQgdXBvbiBhbiBpbmRpdmlkdWFsIHRvIGRlbm90ZSBtZW1iZXJzaGlwIGluIGEgZ3JvdXAgb3IgZmFtaWx5LiAoZm9yIGV4YW1wbGUsIFwiQXBwbGVzZWVkXCIpXHJcbiAgICovXHJcbiAgZmFtaWx5TmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHBvcnRpb24gb2YgYSBuYW1l4oCZcyBmdWxsIGZvcm0gb2YgYWRkcmVzcyB0aGF0IGZvbGxvd3MgdGhlIG5hbWUgaXRzZWxmIChmb3IgZXhhbXBsZSwgXCJFc3EuLFwiIFwiSnIuLFwiIFwiUGguRC5cIilcclxuICAgKi9cclxuICBuYW1lU3VmZml4Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBOYW1lIHN1YnN0aXR1dGVkIGZvciB0aGUgcHVycG9zZXMgb2YgZmFtaWxpYXJpdHkgKGZvciBleGFtcGxlLCBcIkpvaG5ueVwiKVxyXG4gICAqL1xyXG4gIG5pY2tuYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcGhvbmV0aWMgcmVwcmVzZW50YXRpb24gbmFtZSBjb21wb25lbnRzIG9mIHRoZSByZWNlaXZlclxyXG4gICAqL1xyXG4gIHBob25ldGljUmVwcmVzZW50YXRpb24/OiBOU1BlcnNvbk5hbWVDb21wb25lbnRzO1xyXG59XHJcblxyXG4vKipcclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hdXRoZW50aWNhdGlvbnNlcnZpY2VzL2FzYXV0aG9yaXphdGlvbmFwcGxlaWRjcmVkZW50aWFsXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxlU2lnbkluUmVzcG9uc2Uge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1c2Vy4oCZcyBlbWFpbCBhZGRyZXNzIGkuZS4gYWJjQHByaXZhdGVyZWxheS5hcHBsZWlkLmNvbVxyXG4gICAqL1xyXG4gIGVtYWlsPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBBbiBhcmJpdHJhcnkgc3RyaW5nIHRoYXQgeW91ciBhcHAgcHJvdmlkZWQgdG8gdGhlIHJlcXVlc3QgdGhhdCBnZW5lcmF0ZWQgdGhlIGNyZWRlbnRpYWxcclxuICAgKi9cclxuICBzdGF0ZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBKU09OIFdlYiBUb2tlbiAoSldUKSB0aGF0IHNlY3VyZWx5IGNvbW11bmljYXRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciB0byB5b3VyIGFwcFxyXG4gICAqL1xyXG4gIGlkZW50aXR5VG9rZW46IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBzaG9ydC1saXZlZCB0b2tlbiB1c2VkIGJ5IHlvdXIgYXBwIGZvciBwcm9vZiBvZiBhdXRob3JpemF0aW9uIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgYXBwJ3Mgc2VydmVyIGNvdW50ZXJwYXJ0XHJcbiAgICovXHJcbiAgYXV0aG9yaXphdGlvbkNvZGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHVzZXIncyBuYW1lXHJcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9mb3VuZGF0aW9uL25zcGVyc29ubmFtZWNvbXBvbmVudHM/bGFuZ3VhZ2U9b2JqY1xyXG4gICAqL1xyXG4gIGZ1bGxOYW1lPzogTlNQZXJzb25OYW1lQ29tcG9uZW50cztcclxuXHJcbiAgLyoqXHJcbiAgICogQW4gaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxyXG4gICAqL1xyXG4gIHVzZXI/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2ZvdW5kYXRpb24vbnNlcnJvclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOU0Vycm9yIHtcclxuICAvKipcclxuICAgKiBUaGUgZXJyb3IgY29kZVxyXG4gICAqL1xyXG4gIGNvZGU/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGxvY2FsaXplZCBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcclxuICAgKi9cclxuICBsb2NhbGl6ZWREZXNjcmlwdGlvbj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbG9jYWxpemVkIGV4cGxhbmF0aW9uIG9mIHRoZSByZWFzb24gZm9yIHRoZSBlcnJvclxyXG4gICAqL1xyXG4gIGxvY2FsaXplZEZhaWx1cmVSZWFzb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlIGV4dGVuZHMgTlNFcnJvciB7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVycm9yIGkuZS4gXCJBU0FVVEhPUklaQVRJT05fRVJST1JcIlxyXG4gICAqL1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgU2lnbiBJbiBXaXRoIEFwcGxlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTaWduIGluIHdpdGggQXBwbGUgbWFrZXMgaXQgZWFzeSBmb3IgdXNlcnMgdG8gc2lnbiBpbiB0byB5b3VyIGFwcHMgYW5kIHdlYnNpdGVzIHVzaW5nIHRoZWlyIEFwcGxlIElELlxyXG4gKiBJbnN0ZWFkIG9mIGZpbGxpbmcgb3V0IGZvcm1zLCB2ZXJpZnlpbmcgZW1haWwgYWRkcmVzc2VzLCBhbmQgY2hvb3NpbmcgbmV3IHBhc3N3b3JkcyxcclxuICogdGhleSBjYW4gdXNlIFNpZ24gaW4gd2l0aCBBcHBsZSB0byBzZXQgdXAgYW4gYWNjb3VudCBhbmQgc3RhcnQgdXNpbmcgeW91ciBhcHAgcmlnaHQgYXdheS5cclxuICogQWxsIGFjY291bnRzIGFyZSBwcm90ZWN0ZWQgd2l0aCB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIGZvciBzdXBlcmlvciBzZWN1cml0eSxcclxuICogYW5kIEFwcGxlIHdpbGwgbm90IHRyYWNrIHVzZXJz4oCZIGFjdGl2aXR5IGluIHlvdXIgYXBwIG9yIHdlYnNpdGUuXHJcbiAqICpTb3VyY2U6KiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vc2lnbi1pbi13aXRoLWFwcGxlL1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTaWduSW5XaXRoQXBwbGUsIEFwcGxlU2lnbkluUmVzcG9uc2UsIEFwcGxlU2lnbkluRXJyb3JSZXNwb25zZSwgQVNBdXRob3JpemF0aW9uQXBwbGVJRFJlcXVlc3QgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NpZ24taW4td2l0aC1hcHBsZS9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNpZ25JbldpdGhBcHBsZTogU2lnbkluV2l0aEFwcGxlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqICAgdGhpcy5zaWduSW5XaXRoQXBwbGUuc2lnbmluKHtcclxuICogICAgIHJlcXVlc3RlZFNjb3BlczogW1xyXG4gKiAgICAgICBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdC5BU0F1dGhvcml6YXRpb25TY29wZUZ1bGxOYW1lLFxyXG4gKiAgICAgICBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdC5BU0F1dGhvcml6YXRpb25TY29wZUVtYWlsXHJcbiAqICAgICBdXHJcbiAqICAgfSlcclxuICogICAudGhlbigocmVzOiBBcHBsZVNpZ25JblJlc3BvbnNlKSA9PiB7XHJcbiAqICAgICAvLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9zaWduaW53aXRoYXBwbGVyZXN0YXBpL3ZlcmlmeWluZ19hX3VzZXJcclxuICogICAgIGFsZXJ0KCdTZW5kIHRva2VuIHRvIGFwcGxlIGZvciB2ZXJpZmljYXRpb246ICcgKyByZXMuaWRlbnRpdHlUb2tlbik7XHJcbiAqICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gKiAgIH0pXHJcbiAqICAgLmNhdGNoKChlcnJvcjogQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlKSA9PiB7XHJcbiAqICAgICBhbGVydChlcnJvci5jb2RlICsgJyAnICsgZXJyb3IubG9jYWxpemVkRGVzY3JpcHRpb24pO1xyXG4gKiAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1NpZ24gaW4gd2l0aCBBcHBsZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2lnbi1pbi13aXRoLWFwcGxlJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuU2lnbkluV2l0aEFwcGxlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3R3b2dhdGUvY29yZG92YS1wbHVnaW4tc2lnbi1pbi13aXRoLWFwcGxlJyxcclxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNpZ25JbldpdGhBcHBsZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTdGFydHMgdGhlIGF1dGhvcml6YXRpb24gZmxvd3MgbmFtZWQgZHVyaW5nIGNvbnRyb2xsZXIgaW5pdGlhbGl6YXRpb25cclxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2F1dGhlbnRpY2F0aW9uc2VydmljZXMvYXNhdXRob3JpemF0aW9uY29udHJvbGxlci8zMTUzMDQ3LXBlcmZvcm1yZXF1ZXN0c1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QXBwbGVTaWduSW5SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHdoZW4gYXV0aG9yaXphdGlvbiBzdWNjZWVkc1xyXG4gICAqIEBwYXJhbSB7QVNBdXRob3JpemF0aW9uQXBwbGVJRFJlcXVlc3R9IG9wdGlvbnNcclxuICAgKiBAdGhyb3dzIEFwcGxlU2lnbkluRXJyb3JSZXNwb25zZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaWduaW4ob3B0aW9uczogQVNBdXRob3JpemF0aW9uQXBwbGVJRFJlcXVlc3QgPSB7fSk6IFByb21pc2U8QXBwbGVTaWduSW5SZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=