import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var TealiumInstallReferrer = /** @class */ (function (_super) {
    __extends(TealiumInstallReferrer, _super);
    function TealiumInstallReferrer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TealiumInstallReferrer.prototype.setPersistent = function (instanceName) { return cordova(this, "setPersistent", {}, arguments); };
    TealiumInstallReferrer.prototype.setVolatile = function (instanceName) { return cordova(this, "setVolatile", {}, arguments); };
    TealiumInstallReferrer.pluginName = "TealiumInstallReferrer";
    TealiumInstallReferrer.plugin = "tealium-cordova-installreferrer";
    TealiumInstallReferrer.pluginRef = "window.tealiumInstallReferrer";
    TealiumInstallReferrer.repo = "https://github.com/Tealium/cordova-plugin";
    TealiumInstallReferrer.platforms = ["Android"];
    TealiumInstallReferrer.install = "";
    TealiumInstallReferrer = __decorate([
        Injectable()
    ], TealiumInstallReferrer);
    return TealiumInstallReferrer;
}(IonicNativePlugin));
export { TealiumInstallReferrer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3RlYWxpdW0taW5zdGFsbHJlZmVycmVyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQWtDQywwQ0FBaUI7Ozs7SUFPM0QsOENBQWEsYUFBQyxZQUFvQjtJQVVsQyw0Q0FBVyxhQUFDLFlBQW9COzs7Ozs7O0lBakJyQixzQkFBc0I7UUFEbEMsVUFBVSxFQUFFO09BQ0Esc0JBQXNCO2lDQW5DbkM7RUFtQzRDLGlCQUFpQjtTQUFoRCxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBwYWlkXHJcbiAqIEBuYW1lIFRlYWxpdW1JbnN0YWxsUmVmZXJyZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgbW9kdWxlIGRlcGVuZHMgb24gdGhlIFtUZWFsaXVtIENvcmRvdmEgUGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vdGVhbGl1bS9jb3Jkb3ZhLXBsdWdpbikuIFdpdGhvdXQgaXQsIHRoaXMgbW9kdWxlIHdpbGwgbm90IGRvIGFueXRoaW5nLlxyXG4gKiBJbXBsZW1lbnRzIGEgQnJvYWRjYXN0IFJlY2VpdmVyIGZvciB0aGUgSU5TVEFMTF9SRUZFUlJFUiBpbnRlbnQuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGBcclxuICogaW1wb3J0IHsgVGVhbGl1bUluc3RhbGxSZWZlcnJlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvdGVhbGl1bS1pbnN0YWxscmVmZXJyZXIvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbnN0YWxsUmVmZXJyZXI6IFRlYWxpdW1JbnN0YWxsUmVmZXJyZXIpIHsgfVxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmluc3RhbGxSZWZlcnJlci5zZXRQZXJzaXN0ZW50KFwibWFpblwiKTtcclxuICogdGhpcy5pbnN0YWxsUmVmZXJyZXIuc2V0Vm9sYXRpbGUoXCJtYWluXCIpO1xyXG4gKlxyXG4gKlxyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcblxyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnVGVhbGl1bUluc3RhbGxSZWZlcnJlcicsXHJcbiAgcGx1Z2luOiAndGVhbGl1bS1jb3Jkb3ZhLWluc3RhbGxyZWZlcnJlcicsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy50ZWFsaXVtSW5zdGFsbFJlZmVycmVyJywgLy8gdGhlIHZhcmlhYmxlIHJlZmVyZW5jZSB0byBjYWxsIHRoZSBwbHVnaW4sIGV4YW1wbGU6IG5hdmlnYXRvci5nZW9sb2NhdGlvblxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVGVhbGl1bS9jb3Jkb3ZhLXBsdWdpbicsIC8vIHRoZSBnaXRodWIgcmVwb3NpdG9yeSBVUkwgZm9yIHRoZSBwbHVnaW5cclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLCAvLyBBcnJheSBvZiBwbGF0Zm9ybXMgc3VwcG9ydGVkLCBleGFtcGxlOiBbJ0FuZHJvaWQnLCAnaU9TJ11cclxuICBpbnN0YWxsOiAnJywgLy8gT1BUSU9OQUwgaW5zdGFsbCBjb21tYW5kLCBpbiBjYXNlIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRlYWxpdW1JbnN0YWxsUmVmZXJyZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBzdG9yZXMgdGhlIGluc3RhbGwgcmVmZXJyZXIgaW5mb3JtYXRpb24gYXMgcGVyc2lzdGVudCBkYXRhXHJcbiAgICogQHBhcmFtIGluc3RhbmNlTmFtZSB7c3RyaW5nfSBZb3VyIGFyYml0cmFyeSBUZWFsaXVtIGluc3RhbmNlIG5hbWUgcHJvdmlkZWQgYXQgaW5pdCB0aW1lXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0UGVyc2lzdGVudChpbnN0YW5jZU5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHN0b3JlcyB0aGUgaW5zdGFsbCByZWZlcnJlciBpbmZvcm1hdGlvbiBhcyB2b2xhdGlsZSBkYXRhXHJcbiAgICogQHBhcmFtIGluc3RhbmNlTmFtZSB7c3RyaW5nfSBZb3VyIGFyYml0cmFyeSBUZWFsaXVtIGluc3RhbmNlIG5hbWUgcHJvdmlkZWQgYXQgaW5pdCB0aW1lXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0Vm9sYXRpbGUoaW5zdGFuY2VOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=