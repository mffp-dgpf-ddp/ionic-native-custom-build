var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BarcodeScannerOriginal = /** @class */ (function (_super) {
    __extends(BarcodeScannerOriginal, _super);
    function BarcodeScannerOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.Encode = {
            TEXT_TYPE: 'TEXT_TYPE',
            EMAIL_TYPE: 'EMAIL_TYPE',
            PHONE_TYPE: 'PHONE_TYPE',
            SMS_TYPE: 'SMS_TYPE',
        };
        return _this;
    }
    BarcodeScannerOriginal.prototype.scan = function (options) { return cordova(this, "scan", { "callbackOrder": "reverse" }, arguments); };
    BarcodeScannerOriginal.prototype.encode = function (type, data) { return cordova(this, "encode", {}, arguments); };
    BarcodeScannerOriginal.pluginName = "BarcodeScanner";
    BarcodeScannerOriginal.plugin = "phonegap-plugin-barcodescanner";
    BarcodeScannerOriginal.pluginRef = "cordova.plugins.barcodeScanner";
    BarcodeScannerOriginal.repo = "https://github.com/phonegap/phonegap-plugin-barcodescanner";
    BarcodeScannerOriginal.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "Windows"];
    return BarcodeScannerOriginal;
}(IonicNativePlugin));
var BarcodeScanner = new BarcodeScannerOriginal();
export { BarcodeScanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhcmNvZGUtc2Nhbm5lci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE4R3BDLGtDQUFpQjs7O1FBQ25ELFlBQU0sR0FLRjtZQUNGLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFFBQVEsRUFBRSxVQUFVO1NBQ3JCLENBQUM7OztJQVVGLDZCQUFJLGFBQUMsT0FBK0I7SUFZcEMsK0JBQU0sYUFBQyxJQUFZLEVBQUUsSUFBUzs7Ozs7O3lCQWhKaEM7RUErR29DLGlCQUFpQjtTQUF4QyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFyY29kZVNjYW5uZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBQcmVmZXIgZnJvbnQgY2FtZXJhLiBTdXBwb3J0ZWQgb24gaU9TIGFuZCBBbmRyb2lkLlxyXG4gICAqL1xyXG4gIHByZWZlckZyb250Q2FtZXJhPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBmbGlwIGNhbWVyYSBidXR0b24uIFN1cHBvcnRlZCBvbiBpT1MgYW5kIEFuZHJvaWQuXHJcbiAgICovXHJcbiAgc2hvd0ZsaXBDYW1lcmFCdXR0b24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBTaG93IHRvcmNoIGJ1dHRvbi4gU3VwcG9ydGVkIG9uIGlPUyBhbmQgQW5kcm9pZC5cclxuICAgKi9cclxuICBzaG93VG9yY2hCdXR0b24/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBEaXNhYmxlIGFuaW1hdGlvbnMuIFN1cHBvcnRlZCBvbiBpT1Mgb25seS5cclxuICAgKi9cclxuICBkaXNhYmxlQW5pbWF0aW9ucz86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIERpc2FibGUgc3VjY2VzcyBiZWVwLiBTdXBwb3J0ZWQgb24gaU9TIG9ubHkuXHJcbiAgICovXHJcbiAgZGlzYWJsZVN1Y2Nlc3NCZWVwPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvbXB0IHRleHQuIFN1cHBvcnRlZCBvbiBBbmRyb2lkIG9ubHkuXHJcbiAgICovXHJcbiAgcHJvbXB0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXRzIHNlcGFyYXRlZCBieSBjb21tYXMuIERlZmF1bHRzIHRvIGFsbCBmb3JtYXRzIGV4Y2VwdCBgUERGXzQxN2AgYW5kIGBSU1NfRVhQQU5ERURgLlxyXG4gICAqL1xyXG4gIGZvcm1hdHM/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9yaWVudGF0aW9uLiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LiBDYW4gYmUgc2V0IHRvIGBwb3J0cmFpdGAgb3IgYGxhbmRzY2FwZWAuIERlZmF1bHRzIHRvIG5vbmUgc28gdGhlIHVzZXIgY2FuIHJvdGF0ZSB0aGUgcGhvbmUgYW5kIHBpY2sgYW4gb3JpZW50YXRpb24uXHJcbiAgICovXHJcbiAgb3JpZW50YXRpb24/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhdW5jaCB3aXRoIHRoZSB0b3JjaCBzd2l0Y2hlZCBvbiAoaWYgYXZhaWxhYmxlKS4gU3VwcG9ydGVkIG9uIEFuZHJvaWQgb25seS5cclxuICAgKi9cclxuICB0b3JjaE9uPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheSBzY2FubmVkIHRleHQgZm9yIFggbXMuIDAgc3VwcHJlc3NlcyBpdCBlbnRpcmVseSwgZGVmYXVsdCAxNTAwLiBTdXBwb3J0ZWQgb24gQW5kcm9pZCBvbmx5LlxyXG4gICAqL1xyXG4gIHJlc3VsdERpc3BsYXlEdXJhdGlvbj86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYXJjb2RlU2NhblJlc3VsdCB7XHJcbiAgZm9ybWF0OlxyXG4gICAgfCAnUVJfQ09ERSdcclxuICAgIHwgJ0RBVEFfTUFUUklYJ1xyXG4gICAgfCAnVVBDX0UnXHJcbiAgICB8ICdVUENfQSdcclxuICAgIHwgJ0VBTl84J1xyXG4gICAgfCAnRUFOXzEzJ1xyXG4gICAgfCAnQ09ERV8xMjgnXHJcbiAgICB8ICdDT0RFXzM5J1xyXG4gICAgfCAnQ09ERV85MydcclxuICAgIHwgJ0NPREFCQVInXHJcbiAgICB8ICdJVEYnXHJcbiAgICB8ICdSU1MxNCdcclxuICAgIHwgJ1JTU19FWFBBTkRFRCdcclxuICAgIHwgJ1BERl80MTcnXHJcbiAgICB8ICdBWlRFQydcclxuICAgIHwgJ01TSSc7XHJcbiAgY2FuY2VsbGVkOiBib29sZWFuO1xyXG4gIHRleHQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEJhcmNvZGUgU2Nhbm5lclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIEJhcmNvZGUgU2Nhbm5lciBQbHVnaW4gb3BlbnMgYSBjYW1lcmEgdmlldyBhbmQgYXV0b21hdGljYWxseSBzY2FucyBhIGJhcmNvZGUsIHJldHVybmluZyB0aGUgZGF0YSBiYWNrIHRvIHlvdS5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQmFyY29kZVNjYW5uZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXIpLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBCYXJjb2RlU2Nhbm5lciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmFyY29kZS1zY2FubmVyL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFyY29kZVNjYW5uZXI6IEJhcmNvZGVTY2FubmVyKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuYmFyY29kZVNjYW5uZXIuc2NhbigpLnRoZW4oYmFyY29kZURhdGEgPT4ge1xyXG4gKiAgY29uc29sZS5sb2coJ0JhcmNvZGUgZGF0YScsIGJhcmNvZGVEYXRhKTtcclxuICogfSkuY2F0Y2goZXJyID0+IHtcclxuICogXHRjb25zb2xlLmxvZygnRXJyb3InLCBlcnIpO1xyXG4gKiB9KTtcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEJhcmNvZGVTY2FubmVyT3B0aW9uc1xyXG4gKiBCYXJjb2RlU2NhblJlc3VsdFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0JhcmNvZGVTY2FubmVyJyxcclxuICBwbHVnaW46ICdwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXInLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5iYXJjb2RlU2Nhbm5lcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXInLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXJjb2RlU2Nhbm5lciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICBFbmNvZGU6IHtcclxuICAgIFRFWFRfVFlQRTogc3RyaW5nO1xyXG4gICAgRU1BSUxfVFlQRTogc3RyaW5nO1xyXG4gICAgUEhPTkVfVFlQRTogc3RyaW5nO1xyXG4gICAgU01TX1RZUEU6IHN0cmluZztcclxuICB9ID0ge1xyXG4gICAgVEVYVF9UWVBFOiAnVEVYVF9UWVBFJyxcclxuICAgIEVNQUlMX1RZUEU6ICdFTUFJTF9UWVBFJyxcclxuICAgIFBIT05FX1RZUEU6ICdQSE9ORV9UWVBFJyxcclxuICAgIFNNU19UWVBFOiAnU01TX1RZUEUnLFxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4gdGhlIGJhcmNvZGUgc2Nhbm5lci5cclxuICAgKiBAcGFyYW0ge0JhcmNvZGVTY2FubmVyT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgc2Nhbm5lclxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBzY2FubmVyIGRhdGEsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBzY2FuKG9wdGlvbnM/OiBCYXJjb2RlU2Nhbm5lck9wdGlvbnMpOiBQcm9taXNlPEJhcmNvZGVTY2FuUmVzdWx0PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmNvZGVzIGRhdGEgaW50byBhIGJhcmNvZGUuXHJcbiAgICogTk9URTogbm90IHdlbGwgc3VwcG9ydGVkIG9uIEFuZHJvaWRcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIGVuY29kaW5nXHJcbiAgICogQHBhcmFtIHthbnl9IGRhdGEgRGF0YSB0byBlbmNvZGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmNvZGUodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=