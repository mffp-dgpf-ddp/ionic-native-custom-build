var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IntercomOriginal = /** @class */ (function (_super) {
    __extends(IntercomOriginal, _super);
    function IntercomOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntercomOriginal.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    IntercomOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    IntercomOriginal.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    IntercomOriginal.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    IntercomOriginal.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    IntercomOriginal.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    IntercomOriginal.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    IntercomOriginal.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    IntercomOriginal.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    IntercomOriginal.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    IntercomOriginal.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    IntercomOriginal.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    IntercomOriginal.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    IntercomOriginal.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    IntercomOriginal.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    IntercomOriginal.pluginName = "Intercom";
    IntercomOriginal.plugin = "cordova-plugin-intercom";
    IntercomOriginal.pluginRef = "intercom";
    IntercomOriginal.repo = "https://github.com/intercom/intercom-cordova";
    IntercomOriginal.platforms = ["Android", "iOS"];
    return IntercomOriginal;
}(IonicNativePlugin));
var Intercom = new IntercomOriginal();
export { Intercom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ludGVyY29tL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWdDMUMsNEJBQWlCOzs7O0lBTzdDLHlDQUFzQixhQUFDLE9BQVk7SUFVbkMsMkNBQXdCLGFBQUMsT0FBWTtJQVNyQyx3QkFBSztJQVNMLHlCQUFNO0lBWU4sZ0NBQWEsYUFBQyxVQUFrQixFQUFFLFVBQWU7SUFVakQsOEJBQVcsYUFBQyxVQUFrQjtJQVU5Qiw2QkFBVSxhQUFDLFVBQWU7SUFXMUIsMkJBQVEsYUFBQyxTQUFpQixFQUFFLFFBQWE7SUFTekMsbUNBQWdCO0lBU2hCLHlDQUFzQjtJQVV0QiwyREFBd0MsYUFBQyxjQUFzQjtJQVMvRCwyQ0FBd0I7SUFTeEIsb0NBQWlCO0lBU2pCLDBDQUF1QjtJQVV2Qix3Q0FBcUIsYUFBQyxVQUFrQjtJQVV4Qyw0Q0FBeUIsYUFBQyxVQUFrQjtJQVM1QyxnQ0FBYTtJQVNiLGtDQUFlO0lBVWYsMENBQXVCLGFBQUMsS0FBYTs7Ozs7O21CQXJOdkM7RUFnQzhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBJbnRlcmNvbVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBpcyBhIHBsdWdpbiB0aGF0IGFsbG93cyB5b3VyIElvbmljIGFwcCB0byB1c2UgSW50ZXJjb20gZm9yIGlPUyBhbmQvb3IgSW50ZXJjb20gZm9yIEFuZHJvaWQuXHJcbiAqIEZvbGxvdyB0aGUgb2ZmaWNhbCBkb2N1bWVudGF0aW9uIHRvIHNldHVwIHRoaXMgcGx1Z2luIGNvcnJlY3RseTogaHR0cHM6Ly9kZXZlbG9wZXJzLmludGVyY29tLmNvbS9kb2NzL2NvcmRvdmEtcGhvbmVnYXAtY29uZmlndXJhdGlvblxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBJbnRlcmNvbSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW50ZXJjb20vbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpbnRlcmNvbTogSW50ZXJjb20pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5pbnRlcmNvbS5yZWdpc3RlclVuaWRlbnRpZmllZFVzZXIoKTtcclxuICogLi4uXHJcbiAqIHRoaXMuaW50ZXJjb20ucmVnaXN0ZXJGb3JQdXNoKCk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0ludGVyY29tJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbnRlcmNvbScsXHJcbiAgcGx1Z2luUmVmOiAnaW50ZXJjb20nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW50ZXJjb20vaW50ZXJjb20tY29yZG92YScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEludGVyY29tIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVyIGEgaWRlbnRpZmllZCB1c2VyXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJJZGVudGlmaWVkVXNlcihvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgYSB1bmlkZW50aWZpZWQgdXNlclxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHthbnl9IE9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyVW5pZGVudGlmaWVkVXNlcihvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyByZXNldHMgdGhlIEludGVyY29tIGludGVncmF0aW9uJ3MgY2FjaGUgb2YgeW91ciB1c2VyJ3MgaWRlbnRpdHkgYW5kIHdpcGVzIHRoZSBzbGF0ZSBjbGVhbi5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlc2V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzZWN1cmVIYXNoIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHNlY3VyZURhdGEge2FueX1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHNldFVzZXJIYXNoIGluc3RlYWQgYXMgb2YgSW50ZXJjb20gQ29yZG92YSA0LjAuMCBhbmQgaGlnaGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9pbnRlcmNvbS9pbnRlcmNvbS1jb3Jkb3ZhL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCM0MDAtMjAxNy0wOC0yOVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRTZWN1cmVNb2RlKHNlY3VyZUhhc2g6IHN0cmluZywgc2VjdXJlRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHNlY3VyZUhhc2gge3N0cmluZ31cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFVzZXJIYXNoKHNlY3VyZUhhc2g6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIHthbnl9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1cGRhdGVVc2VyKGF0dHJpYnV0ZXM6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gbWV0YURhdGEge2FueX1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGxvZ0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBtZXRhRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaXNwbGF5TWVzc2VuZ2VyKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGlzcGxheU1lc3NhZ2VDb21wb3NlcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gaW5pdGlhbE1lc3NhZ2Uge3N0cmluZ31cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRpc3BsYXlNZXNzYWdlQ29tcG9zZXJXaXRoSW5pdGlhbE1lc3NhZ2UoaW5pdGlhbE1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGlzcGxheUNvbnZlcnNhdGlvbnNMaXN0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGlzcGxheUhlbHBDZW50ZXIoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1bnJlYWRDb252ZXJzYXRpb25Db3VudCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdmlzaWJpbGl0eSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0TGF1bmNoZXJWaXNpYmlsaXR5KHZpc2liaWxpdHk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB2aXNpYmlsaXR5IHtzdHJpbmd9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRJbkFwcE1lc3NhZ2VWaXNpYmlsaXR5KHZpc2liaWxpdHk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGlkZU1lc3NlbmdlcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyRm9yUHVzaCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ31cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNlbmRQdXNoVG9rZW5Ub0ludGVyY29tKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=