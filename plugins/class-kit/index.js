var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var CCKContextType;
(function (CCKContextType) {
    CCKContextType[CCKContextType["none"] = 0] = "none";
    CCKContextType[CCKContextType["app"] = 1] = "app";
    CCKContextType[CCKContextType["chapter"] = 2] = "chapter";
    CCKContextType[CCKContextType["section"] = 3] = "section";
    CCKContextType[CCKContextType["level"] = 4] = "level";
    CCKContextType[CCKContextType["page"] = 5] = "page";
    CCKContextType[CCKContextType["task"] = 6] = "task";
    CCKContextType[CCKContextType["challenge"] = 7] = "challenge";
    CCKContextType[CCKContextType["quiz"] = 8] = "quiz";
    CCKContextType[CCKContextType["exercise"] = 9] = "exercise";
    CCKContextType[CCKContextType["lesson"] = 10] = "lesson";
    CCKContextType[CCKContextType["book"] = 11] = "book";
    CCKContextType[CCKContextType["game"] = 12] = "game";
    CCKContextType[CCKContextType["document"] = 13] = "document";
    CCKContextType[CCKContextType["audio"] = 14] = "audio";
    CCKContextType[CCKContextType["video"] = 15] = "video";
})(CCKContextType || (CCKContextType = {}));
export var CCKContextTopic;
(function (CCKContextTopic) {
    CCKContextTopic["math"] = "math";
    CCKContextTopic["science"] = "science";
    CCKContextTopic["literacyAndWriting"] = "literacyAndWriting";
    CCKContextTopic["worldLanguage"] = "worldLanguage";
    CCKContextTopic["socialScience"] = "socialScience";
    CCKContextTopic["computerScienceAndEngineering"] = "computerScienceAndEngineering";
    CCKContextTopic["artsAndMusic"] = "artsAndMusic";
    CCKContextTopic["healthAndFitness"] = "healthAndFitness";
})(CCKContextTopic || (CCKContextTopic = {}));
export var CCKBinaryType;
(function (CCKBinaryType) {
    CCKBinaryType[CCKBinaryType["trueFalse"] = 0] = "trueFalse";
    CCKBinaryType[CCKBinaryType["passFail"] = 1] = "passFail";
    CCKBinaryType[CCKBinaryType["yesNo"] = 2] = "yesNo";
})(CCKBinaryType || (CCKBinaryType = {}));
var ClassKitOriginal = /** @class */ (function (_super) {
    __extends(ClassKitOriginal, _super);
    function ClassKitOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClassKitOriginal.prototype.initContextsFromXml = function (urlPrefix) { return cordova(this, "initContextsFromXml", {}, arguments); };
    ClassKitOriginal.prototype.addContext = function (urlPrefix, context) { return cordova(this, "addContext", {}, arguments); };
    ClassKitOriginal.prototype.removeContexts = function () { return cordova(this, "removeContexts", {}, arguments); };
    ClassKitOriginal.prototype.removeContext = function (identifierPath) { return cordova(this, "removeContext", {}, arguments); };
    ClassKitOriginal.prototype.beginActivity = function (identifierPath, asNew) { return cordova(this, "beginActivity", {}, arguments); };
    ClassKitOriginal.prototype.endActivity = function () { return cordova(this, "endActivity", {}, arguments); };
    ClassKitOriginal.prototype.setProgressRange = function (fromStart, toEnd) { return cordova(this, "setProgressRange", {}, arguments); };
    ClassKitOriginal.prototype.setProgress = function (progress) { return cordova(this, "setProgress", {}, arguments); };
    ClassKitOriginal.prototype.setBinaryItem = function (binaryItem) { return cordova(this, "setBinaryItem", {}, arguments); };
    ClassKitOriginal.prototype.setScoreItem = function (scoreItem) { return cordova(this, "setScoreItem", {}, arguments); };
    ClassKitOriginal.prototype.setQuantityItem = function (quantityItem) { return cordova(this, "setQuantityItem", {}, arguments); };
    ClassKitOriginal.pluginName = "ClassKit";
    ClassKitOriginal.plugin = "cordova-plugin-classkit";
    ClassKitOriginal.pluginRef = "CordovaClassKit";
    ClassKitOriginal.repo = "https://github.com/sebastianbaar/cordova-plugin-classkit.git";
    ClassKitOriginal.platforms = ["iOS"];
    return ClassKitOriginal;
}(IonicNativePlugin));
var ClassKit = new ClassKitOriginal();
export { ClassKit };
//# sourceMappingURL=data:application/json;base64,