import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var CCKContextType;
(function (CCKContextType) {
    CCKContextType[CCKContextType["none"] = 0] = "none";
    CCKContextType[CCKContextType["app"] = 1] = "app";
    CCKContextType[CCKContextType["chapter"] = 2] = "chapter";
    CCKContextType[CCKContextType["section"] = 3] = "section";
    CCKContextType[CCKContextType["level"] = 4] = "level";
    CCKContextType[CCKContextType["page"] = 5] = "page";
    CCKContextType[CCKContextType["task"] = 6] = "task";
    CCKContextType[CCKContextType["challenge"] = 7] = "challenge";
    CCKContextType[CCKContextType["quiz"] = 8] = "quiz";
    CCKContextType[CCKContextType["exercise"] = 9] = "exercise";
    CCKContextType[CCKContextType["lesson"] = 10] = "lesson";
    CCKContextType[CCKContextType["book"] = 11] = "book";
    CCKContextType[CCKContextType["game"] = 12] = "game";
    CCKContextType[CCKContextType["document"] = 13] = "document";
    CCKContextType[CCKContextType["audio"] = 14] = "audio";
    CCKContextType[CCKContextType["video"] = 15] = "video";
})(CCKContextType || (CCKContextType = {}));
export var CCKContextTopic;
(function (CCKContextTopic) {
    CCKContextTopic["math"] = "math";
    CCKContextTopic["science"] = "science";
    CCKContextTopic["literacyAndWriting"] = "literacyAndWriting";
    CCKContextTopic["worldLanguage"] = "worldLanguage";
    CCKContextTopic["socialScience"] = "socialScience";
    CCKContextTopic["computerScienceAndEngineering"] = "computerScienceAndEngineering";
    CCKContextTopic["artsAndMusic"] = "artsAndMusic";
    CCKContextTopic["healthAndFitness"] = "healthAndFitness";
})(CCKContextTopic || (CCKContextTopic = {}));
export var CCKBinaryType;
(function (CCKBinaryType) {
    CCKBinaryType[CCKBinaryType["trueFalse"] = 0] = "trueFalse";
    CCKBinaryType[CCKBinaryType["passFail"] = 1] = "passFail";
    CCKBinaryType[CCKBinaryType["yesNo"] = 2] = "yesNo";
})(CCKBinaryType || (CCKBinaryType = {}));
var ClassKit = /** @class */ (function (_super) {
    __extends(ClassKit, _super);
    function ClassKit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClassKit.prototype.initContextsFromXml = function (urlPrefix) { return cordova(this, "initContextsFromXml", {}, arguments); };
    ClassKit.prototype.addContext = function (urlPrefix, context) { return cordova(this, "addContext", {}, arguments); };
    ClassKit.prototype.removeContexts = function () { return cordova(this, "removeContexts", {}, arguments); };
    ClassKit.prototype.removeContext = function (identifierPath) { return cordova(this, "removeContext", {}, arguments); };
    ClassKit.prototype.beginActivity = function (identifierPath, asNew) { return cordova(this, "beginActivity", {}, arguments); };
    ClassKit.prototype.endActivity = function () { return cordova(this, "endActivity", {}, arguments); };
    ClassKit.prototype.setProgressRange = function (fromStart, toEnd) { return cordova(this, "setProgressRange", {}, arguments); };
    ClassKit.prototype.setProgress = function (progress) { return cordova(this, "setProgress", {}, arguments); };
    ClassKit.prototype.setBinaryItem = function (binaryItem) { return cordova(this, "setBinaryItem", {}, arguments); };
    ClassKit.prototype.setScoreItem = function (scoreItem) { return cordova(this, "setScoreItem", {}, arguments); };
    ClassKit.prototype.setQuantityItem = function (quantityItem) { return cordova(this, "setQuantityItem", {}, arguments); };
    ClassKit.pluginName = "ClassKit";
    ClassKit.plugin = "cordova-plugin-classkit";
    ClassKit.pluginRef = "CordovaClassKit";
    ClassKit.repo = "https://github.com/sebastianbaar/cordova-plugin-classkit.git";
    ClassKit.platforms = ["iOS"];
    ClassKit = __decorate([
        Injectable()
    ], ClassKit);
    return ClassKit;
}(IonicNativePlugin));
export { ClassKit };
//# sourceMappingURL=data:application/json;base64,