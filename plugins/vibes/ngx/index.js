import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Vibes = /** @class */ (function (_super) {
    __extends(Vibes, _super);
    function Vibes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Vibes.prototype.registerDevice = function () { return cordova(this, "registerDevice", {}, arguments); };
    Vibes.prototype.unregisterDevice = function () { return cordova(this, "unregisterDevice", {}, arguments); };
    Vibes.prototype.associatePerson = function (externalPersonId) { return cordova(this, "associatePerson", {}, arguments); };
    Vibes.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    Vibes.prototype.unregisterPush = function () { return cordova(this, "unregisterPush", {}, arguments); };
    Vibes.prototype.getVibesDeviceInfo = function () { return cordova(this, "getVibesDeviceInfo", {}, arguments); };
    Vibes.prototype.getPerson = function () { return cordova(this, "getPerson", {}, arguments); };
    Vibes.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "observable": true }, arguments); };
    Vibes.prototype.fetchInboxMessages = function () { return cordova(this, "fetchInboxMessages", {}, arguments); };
    Vibes.prototype.fetchInboxMessage = function (message_uid) { return cordova(this, "fetchInboxMessage", {}, arguments); };
    Vibes.prototype.expireInboxMessage = function (message_uid, date) { return cordova(this, "expireInboxMessage", {}, arguments); };
    Vibes.prototype.markInboxMessageAsRead = function (message_uid) { return cordova(this, "markInboxMessageAsRead", {}, arguments); };
    Vibes.prototype.onInboxMessageOpen = function (inbox_message_stringified) { return cordova(this, "onInboxMessageOpen", {}, arguments); };
    Vibes.pluginName = "Vibes";
    Vibes.plugin = "vibes-cordova";
    Vibes.pluginRef = "Vibes";
    Vibes.repo = "https://github.com/vibes/vibes-cordova.git";
    Vibes.install = "ionic cordova plugin add vibes-cordova --variable VIBES_APP_ID=MY_APP_ID --variable VIBES_API_URL=MY_ENVIRONMENT_URL";
    Vibes.installVariables = ["VIBES_APP_ID", "VIBES_API_URL"];
    Vibes.platforms = ["Android", "iOS"];
    Vibes = __decorate([
        Injectable()
    ], Vibes);
    return Vibes;
}(IonicNativePlugin));
export { Vibes };
//# sourceMappingURL=data:application/json;base64,