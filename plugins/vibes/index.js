var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var VibesOriginal = /** @class */ (function (_super) {
    __extends(VibesOriginal, _super);
    function VibesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VibesOriginal.prototype.registerDevice = function () { return cordova(this, "registerDevice", {}, arguments); };
    VibesOriginal.prototype.unregisterDevice = function () { return cordova(this, "unregisterDevice", {}, arguments); };
    VibesOriginal.prototype.associatePerson = function (externalPersonId) { return cordova(this, "associatePerson", {}, arguments); };
    VibesOriginal.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    VibesOriginal.prototype.unregisterPush = function () { return cordova(this, "unregisterPush", {}, arguments); };
    VibesOriginal.prototype.getVibesDeviceInfo = function () { return cordova(this, "getVibesDeviceInfo", {}, arguments); };
    VibesOriginal.prototype.getPerson = function () { return cordova(this, "getPerson", {}, arguments); };
    VibesOriginal.prototype.onNotificationOpened = function () { return cordova(this, "onNotificationOpened", { "observable": true }, arguments); };
    VibesOriginal.prototype.fetchInboxMessages = function () { return cordova(this, "fetchInboxMessages", {}, arguments); };
    VibesOriginal.prototype.fetchInboxMessage = function (message_uid) { return cordova(this, "fetchInboxMessage", {}, arguments); };
    VibesOriginal.prototype.expireInboxMessage = function (message_uid, date) { return cordova(this, "expireInboxMessage", {}, arguments); };
    VibesOriginal.prototype.markInboxMessageAsRead = function (message_uid) { return cordova(this, "markInboxMessageAsRead", {}, arguments); };
    VibesOriginal.prototype.onInboxMessageOpen = function (inbox_message_stringified) { return cordova(this, "onInboxMessageOpen", {}, arguments); };
    VibesOriginal.pluginName = "Vibes";
    VibesOriginal.plugin = "vibes-cordova";
    VibesOriginal.pluginRef = "Vibes";
    VibesOriginal.repo = "https://github.com/vibes/vibes-cordova.git";
    VibesOriginal.install = "ionic cordova plugin add vibes-cordova --variable VIBES_APP_ID=MY_APP_ID --variable VIBES_API_URL=MY_ENVIRONMENT_URL";
    VibesOriginal.installVariables = ["VIBES_APP_ID", "VIBES_API_URL"];
    VibesOriginal.platforms = ["Android", "iOS"];
    return VibesOriginal;
}(IonicNativePlugin));
var Vibes = new VibesOriginal();
export { Vibes };
//# sourceMappingURL=data:application/json;base64,