import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var InAppPurchase = /** @class */ (function (_super) {
    __extends(InAppPurchase, _super);
    function InAppPurchase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InAppPurchase.prototype.getProducts = function (productId) { return cordova(this, "getProducts", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.buy = function (productId) { return cordova(this, "buy", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.subscribe = function (productId) { return cordova(this, "subscribe", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.consume = function (productType, receipt, signature) { return cordova(this, "consume", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.getReceipt = function () { return cordova(this, "getReceipt", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    InAppPurchase.pluginName = "InAppPurchase";
    InAppPurchase.plugin = "cordova-plugin-inapppurchase";
    InAppPurchase.pluginRef = "inAppPurchase";
    InAppPurchase.repo = "https://github.com/AlexDisler/cordova-plugin-inapppurchase";
    InAppPurchase.platforms = ["Android", "iOS"];
    InAppPurchase = __decorate([
        Injectable()
    ], InAppPurchase);
    return InAppPurchase;
}(IonicNativePlugin));
export { InAppPurchase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luLWFwcC1wdXJjaGFzZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2RHJDLGlDQUFpQjs7OztJQVNsRCxtQ0FBVyxhQUFDLFNBQW1CO0lBWS9CLDJCQUFHLGFBQUMsU0FBaUI7SUFZckIsaUNBQVMsYUFDUCxTQUFpQjtJQWVuQiwrQkFBTyxhQUFDLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBVy9ELHdDQUFnQjtJQVloQixrQ0FBVTs7Ozs7O0lBeEVDLGFBQWE7UUFEekIsVUFBVSxFQUFFO09BQ0EsYUFBYTt3QkE5RDFCO0VBOERtQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgSW4gQXBwIFB1cmNoYXNlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGxpZ2h0d2VpZ2h0IENvcmRvdmEgcGx1Z2luIGZvciBpbiBhcHAgcHVyY2hhc2VzIG9uIGlPUy9BbmRyb2lkLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBJbkFwcFB1cmNoYXNlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbi1hcHAtcHVyY2hhc2Uvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpYXA6IEluQXBwUHVyY2hhc2UpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5pYXBcclxuICogIC5nZXRQcm9kdWN0cyhbJ3Byb2QxJywgJ3Byb2QyJywgLi4uXSlcclxuICogIC50aGVuKChwcm9kdWN0cykgPT4ge1xyXG4gKiAgICBjb25zb2xlLmxvZyhwcm9kdWN0cyk7XHJcbiAqICAgICAvLyAgW3sgcHJvZHVjdElkOiAnY29tLnlvdXJhcHAucHJvZDEnLCAndGl0bGUnOiAnLi4uJywgZGVzY3JpcHRpb246ICcuLi4nLCBwcmljZTogJy4uLicgfSwgLi4uXVxyXG4gKiAgfSlcclxuICogIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAqICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAqICB9KTtcclxuICpcclxuICpcclxuICogdGhpcy5pYXBcclxuICogICAuYnV5KCdwcm9kMScpXHJcbiAqICAgLnRoZW4oKGRhdGEpPT4ge1xyXG4gKiAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAqICAgICAvLyB7XHJcbiAqICAgICAvLyAgIHRyYW5zYWN0aW9uSWQ6IC4uLlxyXG4gKiAgICAgLy8gICByZWNlaXB0OiAuLi5cclxuICogICAgIC8vICAgc2lnbmF0dXJlOiAuLi5cclxuICogICAgIC8vIH1cclxuICogICB9KVxyXG4gKiAgIC5jYXRjaCgoZXJyKT0+IHtcclxuICogICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAYWR2YW5jZWRcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiAvLyBmaXN0IGJ1eSB0aGUgcHJvZHVjdC4uLlxyXG4gKiB0aGlzLmlhcFxyXG4gKiAgIC5idXkoJ2NvbnN1bWFibGVfcHJvZDEnKVxyXG4gKiAgIC50aGVuKGRhdGEgPT4gdGhpcy5pYXAuY29uc3VtZShkYXRhLnByb2R1Y3RUeXBlLCBkYXRhLnJlY2VpcHQsIGRhdGEuc2lnbmF0dXJlKSlcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygncHJvZHVjdCB3YXMgc3VjY2Vzc2Z1bGx5IGNvbnN1bWVkIScpKVxyXG4gKiAgIC5jYXRjaCggZXJyPT4gY29uc29sZS5sb2coZXJyKSlcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnSW5BcHBQdXJjaGFzZScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW5hcHBwdXJjaGFzZScsXHJcbiAgcGx1Z2luUmVmOiAnaW5BcHBQdXJjaGFzZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9BbGV4RGlzbGVyL2NvcmRvdmEtcGx1Z2luLWluYXBwcHVyY2hhc2UnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJbkFwcFB1cmNoYXNlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlcyBhIGxpc3Qgb2YgZnVsbCBwcm9kdWN0IGRhdGEgZnJvbSBBcHBsZS9Hb29nbGUuIFRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBtYWtpbmcgcHVyY2hhc2VzLlxyXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gcHJvZHVjdElkIGFuIGFycmF5IG9mIHByb2R1Y3QgaWRzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcclxuICB9KVxyXG4gIGdldFByb2R1Y3RzKHByb2R1Y3RJZDogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQnV5IGEgcHJvZHVjdCB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3RJZC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdElkIEEgc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgcHJvZHVjdCB5b3Ugd2FudCB0byBidXkuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8e3RyYW5zYWN0aW9uSWQ6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZywgcHJvZHVjdFR5cGU6IHN0cmluZ30+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxyXG4gIH0pXHJcbiAgYnV5KHByb2R1Y3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IHRyYW5zYWN0aW9uSWQ6IHN0cmluZzsgcmVjZWlwdDogc3RyaW5nOyBzaWduYXR1cmU6IHN0cmluZzsgcHJvZHVjdFR5cGU6IHN0cmluZyB9PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYW1lIGFzIGJ1eSwgYnV0IGZvciBzdWJzY3JpcHRpb24gYmFzZWQgcHJvZHVjdHMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZCBBIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3QgeW91IHdhbnQgdG8gc3Vic2NyaWJlIHRvLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt0cmFuc2FjdGlvbklkOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcsIHByb2R1Y3RUeXBlOiBzdHJpbmd9Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0cmFuc2FjdGlvbiBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcclxuICB9KVxyXG4gIHN1YnNjcmliZShcclxuICAgIHByb2R1Y3RJZDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTx7IHRyYW5zYWN0aW9uSWQ6IHN0cmluZzsgcmVjZWlwdDogc3RyaW5nOyBzaWduYXR1cmU6IHN0cmluZzsgcHJvZHVjdFR5cGU6IHN0cmluZyB9PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgcHVyY2hhc2luZyBhIFwiY29uc3VtYWJsZVwiIHByb2R1Y3QgdG8gbWFyayBpdCBhcyBjb25zdW1lZC4gT24gQW5kcm9pZCwgeW91IG11c3QgY29uc3VtZSBwcm9kdWN0cyB0aGF0IHlvdSB3YW50IHRvIGxldCB0aGUgdXNlciBwdXJjaGFzZSBtdWx0aXBsZSB0aW1lcy4gSWYgeW91IHdpbGwgbm90IGNvbnN1bWUgdGhlIHByb2R1Y3QgYWZ0ZXIgYSBwdXJjaGFzZSwgdGhlIG5leHQgdGltZSB5b3Ugd2lsbCBhdHRlbXB0IHRvIHB1cmNoYXNlIGl0IHlvdSB3aWxsIGdldCB0aGUgZXJyb3IgbWVzc2FnZTpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdFR5cGVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVjZWlwdFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcclxuICB9KVxyXG4gIGNvbnN1bWUocHJvZHVjdFR5cGU6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXN0b3JlIGFsbCBwdXJjaGFzZXMgZnJvbSB0aGUgc3RvcmVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGFycmF5IG9mIHB1cmNoYXNlcy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvdGhlclByb21pc2U6IHRydWUsXHJcbiAgfSlcclxuICByZXN0b3JlUHVyY2hhc2VzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIHJlY2VpcHQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCBjb250YWlucyB0aGUgc3RyaW5nIGZvciB0aGUgcmVjZWlwdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcclxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcclxuICB9KVxyXG4gIGdldFJlY2VpcHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19