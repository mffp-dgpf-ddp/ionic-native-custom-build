var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var InAppPurchaseOriginal = /** @class */ (function (_super) {
    __extends(InAppPurchaseOriginal, _super);
    function InAppPurchaseOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InAppPurchaseOriginal.prototype.getProducts = function (productId) { return cordova(this, "getProducts", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.buy = function (productId) { return cordova(this, "buy", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.subscribe = function (productId) { return cordova(this, "subscribe", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.consume = function (productType, receipt, signature) { return cordova(this, "consume", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.getReceipt = function () { return cordova(this, "getReceipt", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    InAppPurchaseOriginal.pluginName = "InAppPurchase";
    InAppPurchaseOriginal.plugin = "cordova-plugin-inapppurchase";
    InAppPurchaseOriginal.pluginRef = "inAppPurchase";
    InAppPurchaseOriginal.repo = "https://github.com/AlexDisler/cordova-plugin-inapppurchase";
    InAppPurchaseOriginal.platforms = ["Android", "iOS"];
    return InAppPurchaseOriginal;
}(IonicNativePlugin));
var InAppPurchase = new InAppPurchaseOriginal();
export { InAppPurchase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luLWFwcC1wdXJjaGFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2RHJDLGlDQUFpQjs7OztJQVNsRCxtQ0FBVyxhQUFDLFNBQW1CO0lBWS9CLDJCQUFHLGFBQUMsU0FBaUI7SUFZckIsaUNBQVMsYUFDUCxTQUFpQjtJQWVuQiwrQkFBTyxhQUFDLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBVy9ELHdDQUFnQjtJQVloQixrQ0FBVTs7Ozs7O3dCQXRJWjtFQThEbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEluIEFwcCBQdXJjaGFzZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBsaWdodHdlaWdodCBDb3Jkb3ZhIHBsdWdpbiBmb3IgaW4gYXBwIHB1cmNoYXNlcyBvbiBpT1MvQW5kcm9pZC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSW5BcHBQdXJjaGFzZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW4tYXBwLXB1cmNoYXNlL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaWFwOiBJbkFwcFB1cmNoYXNlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuaWFwXHJcbiAqICAuZ2V0UHJvZHVjdHMoWydwcm9kMScsICdwcm9kMicsIC4uLl0pXHJcbiAqICAudGhlbigocHJvZHVjdHMpID0+IHtcclxuICogICAgY29uc29sZS5sb2cocHJvZHVjdHMpO1xyXG4gKiAgICAgLy8gIFt7IHByb2R1Y3RJZDogJ2NvbS55b3VyYXBwLnByb2QxJywgJ3RpdGxlJzogJy4uLicsIGRlc2NyaXB0aW9uOiAnLi4uJywgcHJpY2U6ICcuLi4nIH0sIC4uLl1cclxuICogIH0pXHJcbiAqICAuY2F0Y2goKGVycikgPT4ge1xyXG4gKiAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gKiAgfSk7XHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuaWFwXHJcbiAqICAgLmJ1eSgncHJvZDEnKVxyXG4gKiAgIC50aGVuKChkYXRhKT0+IHtcclxuICogICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gKiAgICAgLy8ge1xyXG4gKiAgICAgLy8gICB0cmFuc2FjdGlvbklkOiAuLi5cclxuICogICAgIC8vICAgcmVjZWlwdDogLi4uXHJcbiAqICAgICAvLyAgIHNpZ25hdHVyZTogLi4uXHJcbiAqICAgICAvLyB9XHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goKGVycik9PiB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gKiAgIH0pO1xyXG4gKlxyXG4gKiBgYGBcclxuICpcclxuICogQGFkdmFuY2VkXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogLy8gZmlzdCBidXkgdGhlIHByb2R1Y3QuLi5cclxuICogdGhpcy5pYXBcclxuICogICAuYnV5KCdjb25zdW1hYmxlX3Byb2QxJylcclxuICogICAudGhlbihkYXRhID0+IHRoaXMuaWFwLmNvbnN1bWUoZGF0YS5wcm9kdWN0VHlwZSwgZGF0YS5yZWNlaXB0LCBkYXRhLnNpZ25hdHVyZSkpXHJcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ3Byb2R1Y3Qgd2FzIHN1Y2Nlc3NmdWxseSBjb25zdW1lZCEnKSlcclxuICogICAuY2F0Y2goIGVycj0+IGNvbnNvbGUubG9nKGVycikpXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0luQXBwUHVyY2hhc2UnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWluYXBwcHVyY2hhc2UnLFxyXG4gIHBsdWdpblJlZjogJ2luQXBwUHVyY2hhc2UnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vQWxleERpc2xlci9jb3Jkb3ZhLXBsdWdpbi1pbmFwcHB1cmNoYXNlJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSW5BcHBQdXJjaGFzZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGZ1bGwgcHJvZHVjdCBkYXRhIGZyb20gQXBwbGUvR29vZ2xlLiBUaGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgbWFraW5nIHB1cmNoYXNlcy5cclxuICAgKiBAcGFyYW0ge2FycmF5PHN0cmluZz59IHByb2R1Y3RJZCBhbiBhcnJheSBvZiBwcm9kdWN0IGlkcy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2Ygb2JqZWN0cy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvdGhlclByb21pc2U6IHRydWUsXHJcbiAgfSlcclxuICBnZXRQcm9kdWN0cyhwcm9kdWN0SWQ6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1eSBhIHByb2R1Y3QgdGhhdCBtYXRjaGVzIHRoZSBwcm9kdWN0SWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZCBBIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3QgeW91IHdhbnQgdG8gYnV5LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt0cmFuc2FjdGlvbklkOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcsIHByb2R1Y3RUeXBlOiBzdHJpbmd9Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0cmFuc2FjdGlvbiBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcclxuICB9KVxyXG4gIGJ1eShwcm9kdWN0SWQ6IHN0cmluZyk6IFByb21pc2U8eyB0cmFuc2FjdGlvbklkOiBzdHJpbmc7IHJlY2VpcHQ6IHN0cmluZzsgc2lnbmF0dXJlOiBzdHJpbmc7IHByb2R1Y3RUeXBlOiBzdHJpbmcgfT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2FtZSBhcyBidXksIGJ1dCBmb3Igc3Vic2NyaXB0aW9uIGJhc2VkIHByb2R1Y3RzLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9kdWN0SWQgQSBzdHJpbmcgdGhhdCBtYXRjaGVzIHRoZSBwcm9kdWN0IHlvdSB3YW50IHRvIHN1YnNjcmliZSB0by5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dHJhbnNhY3Rpb25JZDogc3RyaW5nLCByZWNlaXB0OiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nLCBwcm9kdWN0VHlwZTogc3RyaW5nfT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdHJhbnNhY3Rpb24gZGV0YWlscy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvdGhlclByb21pc2U6IHRydWUsXHJcbiAgfSlcclxuICBzdWJzY3JpYmUoXHJcbiAgICBwcm9kdWN0SWQ6IHN0cmluZ1xyXG4gICk6IFByb21pc2U8eyB0cmFuc2FjdGlvbklkOiBzdHJpbmc7IHJlY2VpcHQ6IHN0cmluZzsgc2lnbmF0dXJlOiBzdHJpbmc7IHByb2R1Y3RUeXBlOiBzdHJpbmcgfT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyIHB1cmNoYXNpbmcgYSBcImNvbnN1bWFibGVcIiBwcm9kdWN0IHRvIG1hcmsgaXQgYXMgY29uc3VtZWQuIE9uIEFuZHJvaWQsIHlvdSBtdXN0IGNvbnN1bWUgcHJvZHVjdHMgdGhhdCB5b3Ugd2FudCB0byBsZXQgdGhlIHVzZXIgcHVyY2hhc2UgbXVsdGlwbGUgdGltZXMuIElmIHlvdSB3aWxsIG5vdCBjb25zdW1lIHRoZSBwcm9kdWN0IGFmdGVyIGEgcHVyY2hhc2UsIHRoZSBuZXh0IHRpbWUgeW91IHdpbGwgYXR0ZW1wdCB0byBwdXJjaGFzZSBpdCB5b3Ugd2lsbCBnZXQgdGhlIGVycm9yIG1lc3NhZ2U6XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RUeXBlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlY2VpcHRcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2lnbmF0dXJlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvdGhlclByb21pc2U6IHRydWUsXHJcbiAgfSlcclxuICBjb25zdW1lKHByb2R1Y3RUeXBlOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzdG9yZSBhbGwgcHVyY2hhc2VzIGZyb20gdGhlIHN0b3JlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBhcnJheSBvZiBwdXJjaGFzZXMuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxyXG4gIH0pXHJcbiAgcmVzdG9yZVB1cmNoYXNlcygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSByZWNlaXB0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgY29udGFpbnMgdGhlIHN0cmluZyBmb3IgdGhlIHJlY2VpcHRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvdGhlclByb21pc2U6IHRydWUsXHJcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXHJcbiAgfSlcclxuICBnZXRSZWNlaXB0KCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==