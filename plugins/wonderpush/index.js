var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { IonicNativePlugin, cordova, getPromise } from '@ionic-native/core';
var NestedObject = /** @class */ (function () {
    function NestedObject(pluginObj) {
        this.pluginObj = pluginObj;
    }
    NestedObject.prototype.wrap = function (functionName, args) {
        var plugin = WonderPushOriginal.getPlugin();
        var userPreferences = plugin ? plugin.UserPreferences : null;
        if (!plugin || !userPreferences || !userPreferences[functionName]) {
            return getPromise(function (res, rej) {
                rej(new Error('Could not find plugin'));
            });
        }
        return getPromise(function (res, rej) {
            userPreferences[functionName].apply(userPreferences, __spreadArrays(args, [res]));
        });
    };
    return NestedObject;
}());
export { NestedObject };
var UserPreferencesMethods = /** @class */ (function (_super) {
    __extends(UserPreferencesMethods, _super);
    function UserPreferencesMethods() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the default channel id
     * @returns {Promise<string>}
     */
    UserPreferencesMethods.prototype.getDefaultChannelId = function () {
        return this.wrap('getDefaultChannelId', []);
    };
    /**
     * Set the default channel id
     * @param {string} id
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setDefaultChannelId = function (id) {
        return this.wrap('setDefaultChannelId', [id]);
    };
    /**
     * Get a channel group
     * @param {string} groupId
     * @returns {Promise<WonderPushChannelGroup | null>}
     */
    UserPreferencesMethods.prototype.getChannelGroup = function (groupId) {
        return this.wrap('getChannelGroup', [groupId]);
    };
    /**
     * Get a channel
     * @param {string} channelId
     * @returns {Promise<WonderPushChannel | null>}
     */
    UserPreferencesMethods.prototype.getChannel = function (channelId) {
        return this.wrap('getChannel', [channelId]);
    };
    /**
     * Create, update and remove channel existing groups to match the given channel groups
     * @param {WonderPushChannelGroup[]} channelGroups
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannelGroups = function (channelGroups) {
        return this.wrap('setChannelGroups', [channelGroups]);
    };
    /**
     * Create, update and remove channels to match the given channels
     * @param {WonderPushChannel[]} channels
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannels = function (channels) {
        return this.wrap('setChannels', [channels]);
    };
    /**
     * Create or update a channel group
     * @param {WonderPushChannelGroup} channelGroup
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannelGroup = function (channelGroup) {
        return this.wrap('putChannelGroup', [channelGroup]);
    };
    /**
     * Create or update a channel
     * @param {WonderPushChannel} channel
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannel = function (channel) {
        return this.wrap('putChannel', [channel]);
    };
    /**
     * Remove a channel group
     * @param {string} groupId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannelGroup = function (groupId) {
        return this.wrap('removeChannelGroup', [groupId]);
    };
    /**
     * Remove a channel
     * @param {string} channelId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannel = function (channelId) {
        return this.wrap('removeChannel', [channelId]);
    };
    return UserPreferencesMethods;
}(NestedObject));
export { UserPreferencesMethods };
var WonderPushOriginal = /** @class */ (function (_super) {
    __extends(WonderPushOriginal, _super);
    function WonderPushOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.UserPreferences = new UserPreferencesMethods(_this);
        return _this;
    }
    WonderPushOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    WonderPushOriginal.prototype.isReady = function () { return cordova(this, "isReady", {}, arguments); };
    WonderPushOriginal.prototype.setLogging = function (enabled) { return cordova(this, "setLogging", {}, arguments); };
    WonderPushOriginal.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    WonderPushOriginal.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    WonderPushOriginal.prototype.getUserId = function () { return cordova(this, "getUserId", {}, arguments); };
    WonderPushOriginal.prototype.getInstallationId = function () { return cordova(this, "getInstallationId", {}, arguments); };
    WonderPushOriginal.prototype.getDeviceId = function () { return cordova(this, "getDeviceId", {}, arguments); };
    WonderPushOriginal.prototype.getPushToken = function () { return cordova(this, "getPushToken", {}, arguments); };
    WonderPushOriginal.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    WonderPushOriginal.prototype.trackEvent = function (type, attributes) { return cordova(this, "trackEvent", {}, arguments); };
    WonderPushOriginal.prototype.addTag = function (tag) { return cordova(this, "addTag", {}, arguments); };
    WonderPushOriginal.prototype.removeTag = function (tag) { return cordova(this, "removeTag", {}, arguments); };
    WonderPushOriginal.prototype.removeAllTags = function () { return cordova(this, "removeAllTags", {}, arguments); };
    WonderPushOriginal.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    WonderPushOriginal.prototype.hasTag = function (tag) { return cordova(this, "hasTag", {}, arguments); };
    WonderPushOriginal.prototype.setProperty = function (field, value) { return cordova(this, "setProperty", {}, arguments); };
    WonderPushOriginal.prototype.unsetProperty = function (field) { return cordova(this, "unsetProperty", {}, arguments); };
    WonderPushOriginal.prototype.addProperty = function (field, value) { return cordova(this, "addProperty", {}, arguments); };
    WonderPushOriginal.prototype.removeProperty = function (field, value) { return cordova(this, "removeProperty", {}, arguments); };
    WonderPushOriginal.prototype.getPropertyValue = function (field) { return cordova(this, "getPropertyValue", {}, arguments); };
    WonderPushOriginal.prototype.getPropertyValues = function (field) { return cordova(this, "getPropertyValues", {}, arguments); };
    WonderPushOriginal.prototype.getProperties = function () { return cordova(this, "getProperties", {}, arguments); };
    WonderPushOriginal.prototype.putProperties = function (properties) { return cordova(this, "putProperties", {}, arguments); };
    WonderPushOriginal.prototype.subscribeToNotifications = function () { return cordova(this, "subscribeToNotifications", {}, arguments); };
    WonderPushOriginal.prototype.isSubscribedToNotifications = function () { return cordova(this, "isSubscribedToNotifications", {}, arguments); };
    WonderPushOriginal.prototype.unsubscribeFromNotifications = function () { return cordova(this, "unsubscribeFromNotifications", {}, arguments); };
    WonderPushOriginal.prototype.getUserConsent = function () { return cordova(this, "getUserConsent", {}, arguments); };
    WonderPushOriginal.prototype.setUserConsent = function (consent) { return cordova(this, "setUserConsent", {}, arguments); };
    WonderPushOriginal.prototype.clearAllData = function () { return cordova(this, "clearAllData", {}, arguments); };
    WonderPushOriginal.prototype.clearEventsHistory = function () { return cordova(this, "clearEventsHistory", {}, arguments); };
    WonderPushOriginal.prototype.clearPreferences = function () { return cordova(this, "clearPreferences", {}, arguments); };
    WonderPushOriginal.prototype.downloadAllData = function () { return cordova(this, "downloadAllData", {}, arguments); };
    WonderPushOriginal.pluginName = "WonderPush";
    WonderPushOriginal.plugin = "wonderpush-cordova-sdk";
    WonderPushOriginal.pluginRef = "WonderPush";
    WonderPushOriginal.repo = "https://github.com/wonderpush/wonderpush-cordova-sdk";
    WonderPushOriginal.install = "ionic cordova plugin add wonderpush-cordova-sdk --variable CLIENT_ID=YOUR_CLIENT_ID --variable CLIENT_SECRET=YOUR_CLIENT_SECRET ";
    WonderPushOriginal.installVariables = ["CLIENT_ID", "CLIENT_SECRET"];
    WonderPushOriginal.platforms = ["Android", "iOS"];
    return WonderPushOriginal;
}(IonicNativePlugin));
var WonderPush = new WonderPushOriginal();
export { WonderPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dvbmRlcnB1c2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnQ2xGLHNCQUFZLFNBQWM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELDJCQUFJLEdBQUosVUFBUSxZQUFvQixFQUFFLElBQVc7UUFDdkMsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLElBQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDakUsT0FBTyxVQUFVLENBQUksVUFBQyxHQUFHLEVBQUUsR0FBRztnQkFDNUIsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxVQUFVLENBQUksVUFBQyxHQUFHLEVBQUUsR0FBRztZQUM1QixlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsaUJBQU0sSUFBSSxHQUFFLEdBQUcsR0FBRSxDQUFDO1FBQ3ZFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzt1QkFoREg7Ozs7SUFtRDRDLDBDQUFZOzs7O0lBQ3REOzs7T0FHRztJQUNILG9EQUFtQixHQUFuQjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBZ0IscUJBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FB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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBnZXRQcm9taXNlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29uZGVyUHVzaERlbGVnYXRlIHtcclxuICB1cmxGb3JEZWVwTGluayh1cmw6IHN0cmluZywgY2FsbGJhY2s6ICh1cmw/OiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdvbmRlclB1c2hDaGFubmVsIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGdyb3VwSWQ/OiBzdHJpbmc7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICBieXBhc3NEbmQ/OiBib29sZWFuO1xyXG4gIHNob3dCYWRnZT86IGJvb2xlYW47XHJcbiAgaW1wb3J0YW5jZT86IG51bWJlcjtcclxuICBsaWdodHM/OiBib29sZWFuO1xyXG4gIGxpZ2h0Q29sb3I/OiBudW1iZXI7XHJcbiAgdmlicmF0ZT86IGJvb2xlYW47XHJcbiAgc291bmQ/OiBib29sZWFuO1xyXG4gIHNvdW5kVXJpPzogc3RyaW5nO1xyXG4gIGxvY2tzY3JlZW5WaXNpYmlsaXR5PzogbnVtYmVyO1xyXG4gIHZpYnJhdGVJblNpbGVudE1vZGU/OiBib29sZWFuO1xyXG4gIGNvbG9yPzogbnVtYmVyO1xyXG4gIGxvY2FsT25seT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV29uZGVyUHVzaENoYW5uZWxHcm91cCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBOZXN0ZWRPYmplY3Qge1xyXG4gIHBsdWdpbk9iajogYW55O1xyXG4gIGNvbnN0cnVjdG9yKHBsdWdpbk9iajogYW55KSB7XHJcbiAgICB0aGlzLnBsdWdpbk9iaiA9IHBsdWdpbk9iajtcclxuICB9XHJcblxyXG4gIHdyYXA8VD4oZnVuY3Rpb25OYW1lOiBzdHJpbmcsIGFyZ3M6IGFueVtdKTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCBwbHVnaW4gPSBXb25kZXJQdXNoLmdldFBsdWdpbigpO1xyXG4gICAgY29uc3QgdXNlclByZWZlcmVuY2VzID0gcGx1Z2luID8gcGx1Z2luLlVzZXJQcmVmZXJlbmNlcyA6IG51bGw7XHJcbiAgICBpZiAoIXBsdWdpbiB8fCAhdXNlclByZWZlcmVuY2VzIHx8ICF1c2VyUHJlZmVyZW5jZXNbZnVuY3Rpb25OYW1lXSkge1xyXG4gICAgICByZXR1cm4gZ2V0UHJvbWlzZTxUPigocmVzLCByZWopID0+IHtcclxuICAgICAgICByZWoobmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBwbHVnaW4nKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdldFByb21pc2U8VD4oKHJlcywgcmVqKSA9PiB7XHJcbiAgICAgIHVzZXJQcmVmZXJlbmNlc1tmdW5jdGlvbk5hbWVdLmFwcGx5KHVzZXJQcmVmZXJlbmNlcywgWy4uLmFyZ3MsIHJlc10pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclByZWZlcmVuY2VzTWV0aG9kcyBleHRlbmRzIE5lc3RlZE9iamVjdCB7XHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBkZWZhdWx0IGNoYW5uZWwgaWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAqL1xyXG4gIGdldERlZmF1bHRDaGFubmVsSWQoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXA8c3RyaW5nIHwgbnVsbD4oJ2dldERlZmF1bHRDaGFubmVsSWQnLCBbXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIGRlZmF1bHQgY2hhbm5lbCBpZFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgc2V0RGVmYXVsdENoYW5uZWxJZChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXAoJ3NldERlZmF1bHRDaGFubmVsSWQnLCBbaWRdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGNoYW5uZWwgZ3JvdXBcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdvbmRlclB1c2hDaGFubmVsR3JvdXAgfCBudWxsPn1cclxuICAgKi9cclxuICBnZXRDaGFubmVsR3JvdXAoZ3JvdXBJZDogc3RyaW5nKTogUHJvbWlzZTxXb25kZXJQdXNoQ2hhbm5lbEdyb3VwIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcDxXb25kZXJQdXNoQ2hhbm5lbEdyb3VwIHwgbnVsbD4oJ2dldENoYW5uZWxHcm91cCcsIFtncm91cElkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYSBjaGFubmVsXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdvbmRlclB1c2hDaGFubmVsIHwgbnVsbD59XHJcbiAgICovXHJcbiAgZ2V0Q2hhbm5lbChjaGFubmVsSWQ6IHN0cmluZyk6IFByb21pc2U8V29uZGVyUHVzaENoYW5uZWwgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwPFdvbmRlclB1c2hDaGFubmVsIHwgbnVsbD4oJ2dldENoYW5uZWwnLCBbY2hhbm5lbElkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUsIHVwZGF0ZSBhbmQgcmVtb3ZlIGNoYW5uZWwgZXhpc3RpbmcgZ3JvdXBzIHRvIG1hdGNoIHRoZSBnaXZlbiBjaGFubmVsIGdyb3Vwc1xyXG4gICAqIEBwYXJhbSB7V29uZGVyUHVzaENoYW5uZWxHcm91cFtdfSBjaGFubmVsR3JvdXBzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBzZXRDaGFubmVsR3JvdXBzKGNoYW5uZWxHcm91cHM6IFdvbmRlclB1c2hDaGFubmVsR3JvdXBbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwKCdzZXRDaGFubmVsR3JvdXBzJywgW2NoYW5uZWxHcm91cHNdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSwgdXBkYXRlIGFuZCByZW1vdmUgY2hhbm5lbHMgdG8gbWF0Y2ggdGhlIGdpdmVuIGNoYW5uZWxzXHJcbiAgICogQHBhcmFtIHtXb25kZXJQdXNoQ2hhbm5lbFtdfSBjaGFubmVsc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgc2V0Q2hhbm5lbHMoY2hhbm5lbHM6IFdvbmRlclB1c2hDaGFubmVsW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcCgnc2V0Q2hhbm5lbHMnLCBbY2hhbm5lbHNdKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBvciB1cGRhdGUgYSBjaGFubmVsIGdyb3VwXHJcbiAgICogQHBhcmFtIHtXb25kZXJQdXNoQ2hhbm5lbEdyb3VwfSBjaGFubmVsR3JvdXBcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIHB1dENoYW5uZWxHcm91cChjaGFubmVsR3JvdXA6IFdvbmRlclB1c2hDaGFubmVsR3JvdXApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMud3JhcCgncHV0Q2hhbm5lbEdyb3VwJywgW2NoYW5uZWxHcm91cF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIG9yIHVwZGF0ZSBhIGNoYW5uZWxcclxuICAgKiBAcGFyYW0ge1dvbmRlclB1c2hDaGFubmVsfSBjaGFubmVsXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBwdXRDaGFubmVsKGNoYW5uZWw6IFdvbmRlclB1c2hDaGFubmVsKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXAoJ3B1dENoYW5uZWwnLCBbY2hhbm5lbF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGEgY2hhbm5lbCBncm91cFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICByZW1vdmVDaGFubmVsR3JvdXAoZ3JvdXBJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLndyYXAoJ3JlbW92ZUNoYW5uZWxHcm91cCcsIFtncm91cElkXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYSBjaGFubmVsXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxJZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgcmVtb3ZlQ2hhbm5lbChjaGFubmVsSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy53cmFwKCdyZW1vdmVDaGFubmVsJywgW2NoYW5uZWxJZF0pO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFB1c2ggTm90aWZpY2F0aW9ucyAtIFdvbmRlclB1c2hcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFNlbmQgdW5saW1pdGVkIHB1c2ggbm90aWZpY2F0aW9ucyB0byBpT1MgYW5kIEFuZHJvaWQgZGV2aWNlcy5cclxuICpcclxuICogR2V0IHN0YXJ0ZWQgaW4gbWludXRlczogW0lvbmljIFF1aWNrc3RhcnQgR3VpZGVdKGh0dHBzOi8vZG9jcy53b25kZXJwdXNoLmNvbS9kb2NzL2lvbmljLXF1aWNrc3RhcnQpLlxyXG4gKlxyXG4gKiBBZHZhbmNlZCBzZWdtZW50YXRpb24sIGF1dG9tYXRpb24gYW5kIHBlcnNvbmFsaXphdGlvbiBvZiBwdXNoIG1lc3NhZ2VzIGZvciDigqwxIHBlciAxMDAwIHN1YnNjcmliZXJzLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyB0aGUgQ29yZG92YSBwbHVnaW4gYHdvbmRlcnB1c2gtY29yZG92YS1zZGtgLlxyXG4gKlxyXG4gKiBbV29uZGVyUHVzaCBwdXNoIG5vdGlmaWNhdGlvbnNdKGh0dHBzOi8vd3d3LndvbmRlcnB1c2guY29tKSBhcmUgdGhlIG1vc3QgZWZmZWN0aXZlIHdheVxyXG4gKiB0byByZXRhaW4geW91ciB1c2VycyBhbmQgZ3JvdyB5b3VyIGF1ZGllbmNlIHdoaWxlIHJlbWFpbmluZyBmdWxseSBHRFBSIGNvbXBsaWFudC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgV29uZGVyUHVzaCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvd29uZGVycHVzaCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd29uZGVyUHVzaDogV29uZGVyUHVzaCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyBTdWJzY3JpYmUgdXNlclxyXG4gKiB0aGlzLndvbmRlclB1c2guc3Vic2NyaWJlVG9Ob3RpZmljYXRpb25zKClcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZyhcIlVzZXIgc3Vic2NyaWJlZCB0byBub3RpZmljYXRpb25zXCIpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKlxyXG4gKiAvLyBTZW5kIGFuIGV2ZW50IChhIHB1cmNoYXNlIGluIHRoaXMgZXhhbXBsZSlcclxuICogdGhpcy53b25kZXJQdXNoLnNlbmRFdmVudCgncHVyY2hhc2UnLCB7XHJcbiAqICAgZmxvYXRfcHJpY2U6IDEyLjk5LFxyXG4gKiAgIHN0cmluZ19za3U6IFwiWDEyMzQ1NlwiXHJcbiAqIH0pO1xyXG4gKlxyXG4gKiAvLyBUYWcgdXNlcnMgKGFzIGN1c3RvbWVycylcclxuICogdGhpcy53b25kZXJQdXNoLmFkZFRhZygnY3VzdG9tZXInKTtcclxuICpcclxuICogLy8gUGVyc29uYWxpemVcclxuICogLy8gMS4gU3RvcmUgdXNlciBkZXRhaWxzLlxyXG4gKiAvLyAyLiBVc2UgdGhvc2UgZGV0YWlscyB0byBjcmVhdGUgc2VnbWVudHMuXHJcbiAqIC8vIDMuIEluY2x1ZGUgdGhvc2UgZGV0YWlscyBpbiB5b3VyIG5vdGlmaWNhdGlvbnMuXHJcbiAqIHRoaXMud29uZGVyUHVzaC5wdXRQcm9wZXJ0aWVzKHtcclxuICogICBzdHJpbmdfbmFtZTogJ0pvaG4gRC4nLFxyXG4gKiAgIGludF9hZ2U6IDI0XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiAvLyBHRFBSXHJcbiAqIC8vIDEuIHNldCBSRVFVSVJFU19VU0VSX0NPTlNFTlQ9dHJ1ZSB0byBlbmFibGUgR0RQUiBjb21wbGlhbmNlLlxyXG4gKiAvLyAyLiBXb25kZXJQdXNoIGRvZXNuJ3Qgc3RhcnQgdW50aWwgc2V0VXNlckNvbnNlbnQodHJ1ZSkgaXMgY2FsbGVkLlxyXG4gKiBjb25zdCBvbkNsaWNrID0gKHVzZXJDb25zZW50OiBib29sZWFuKSA9PiB0aGlzLndvbmRlclB1c2guc2V0VXNlckNvbnNlbnQodXNlckNvbnNlbnQpO1xyXG4gKlxyXG4gKiAvLyBMaXN0ZW4gdG8gbm90aWZpY2F0aW9uIGNsaWNrc1xyXG4gKiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3b25kZXJwdXNoLm5vdGlmaWNhdGlvbk9wZW4nLCBmdW5jdGlvbihldmVudCkge1xyXG4gKiAgIGNvbnNvbGUubG9nKCdOb3RpZmljYXRpb24gb3BlbmVkJywgZXZlbnQubm90aWZpY2F0aW9uKTtcclxuICogICBpZiAoZXZlbnQubm90aWZpY2F0aW9uVHlwZSA9PT0gJ2RhdGEnKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZygnU2lsZW50IG5vdGlmaWNhdGlvbicsIGV2ZW50Lm5vdGlmaWNhdGlvbik7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFdvbmRlclB1c2hDaGFubmVsXHJcbiAqIFdvbmRlclB1c2hDaGFubmVsR3JvdXBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXb25kZXJQdXNoJyxcclxuICBwbHVnaW46ICd3b25kZXJwdXNoLWNvcmRvdmEtc2RrJyxcclxuICBwbHVnaW5SZWY6ICdXb25kZXJQdXNoJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3dvbmRlcnB1c2gvd29uZGVycHVzaC1jb3Jkb3ZhLXNkaycsXHJcbiAgaW5zdGFsbDpcclxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgd29uZGVycHVzaC1jb3Jkb3ZhLXNkayAtLXZhcmlhYmxlIENMSUVOVF9JRD1ZT1VSX0NMSUVOVF9JRCAtLXZhcmlhYmxlIENMSUVOVF9TRUNSRVQ9WU9VUl9DTElFTlRfU0VDUkVUICcsXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogWydDTElFTlRfSUQnLCAnQ0xJRU5UX1NFQ1JFVCddLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBXb25kZXJQdXNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHVzZXIgaWQsIHVzZWQgdG8gaWRlbnRpZnkgYSBzaW5nbGUgaWRlbnRpdHkgYWNyb3NzIG11bHRpcGxlIGRldmljZXMsXHJcbiAgICogYW5kIHRvIGNvcnJlY3RseSBpZGVudGlmeSBtdWx0aXBsZSB1c2VycyBvbiBhIHNpbmdsZSBkZXZpY2UuXHJcbiAgICpcclxuICAgKiBJZiBub3QgY2FsbGVkLCB0aGUgbGFzdCB1c2VkIHVzZXIgaWQgaXQgYXNzdW1lZC4gRGVmYXVsdGluZyB0byBgbnVsbGAgaWYgbm9uZSBpcyBrbm93bi5cclxuICAgKlxyXG4gICAqIFVwb24gY2hhbmdpbmcgdXNlcklkLCB0aGUgYWNjZXNzIHRva2VuIGlzIHdpcGVkLCBzbyBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxscywgbGlrZSBjYWxsaW5nIHdpdGggYG51bGxgXHJcbiAgICoganVzdCBiZWZvcmUgY2FsbGluZyB3aXRoIGEgdXNlciBpZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdXNlcklkIC0gVGhlIHVzZXIgaWQsIHVuaXF1ZSB0byB5b3VyIGFwcGxpY2F0aW9uLlxyXG4gICAqICAgVXNlIGBudWxsYCBmb3IgYW5vbnltb3VzIHVzZXJzLlxyXG4gICAqXHJcbiAgICogICBZb3UgYXJlIHN0cm9uZ2x5IGVuY291cmFnZWQgdG8gdXNlIHlvdXIgb3duIHVuaXF1ZSBpbnRlcm5hbCBpZGVudGlmaWVyLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcblxyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRVc2VySWQodXNlcklkOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIFNESyBpcyByZWFkeSB0byBvcGVyYXRlLlxyXG4gICAqXHJcbiAgICogVGhlIFNESyBpcyByZWFkeSB3aGVuIGl0IGlzIGluaXRpYWxpemVkIGFuZCBoYXMgZmV0Y2hlZCBhbiBhY2Nlc3MgdG9rZW4uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNSZWFkeSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRyb2xzIG5hdGl2ZSBTREsgbG9nZ2luZy5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgLSBXaGV0aGVyIHRvIGVuYWJsZSBsb2dzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldExvZ2dpbmcoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHVwIGEgZGVsZWdhdGUgZm9yIHRpZ2h0ZXIgaW50ZWdyYXRpb24sIG9yIHJlbW92ZXMgaXQuXHJcbiAgICogQHBhcmFtIHs/V29uZGVyUHVzaERlbGVnYXRlfSBkZWxlZ2F0ZSAtIFRoZSBkZWxlZ2F0ZSB0byBzZXQsIG9yIGBudWxsYCB0byByZW1vdmUgaXQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0RGVsZWdhdGUoZGVsZWdhdGU6IFdvbmRlclB1c2hEZWxlZ2F0ZSB8IG51bGwpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgY3VycmVudCBkZWxlZ2F0ZS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxXb25kZXJQdXNoRGVsZWdhdGUgfCBudWxsPn0gQSBwcm9taXNlIHdpdGggdGhlIGRlbGVnYXRlIG9mIG51bGxcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RGVsZWdhdGUoKTogUHJvbWlzZTxXb25kZXJQdXNoRGVsZWdhdGUgfCBudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSB1c2VySWQgY3VycmVudGx5IGluIHVzZSwgYG51bGxgIGJ5IGRlZmF1bHQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSB1c2VyIElEIG9yIG51bGxcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0VXNlcklkKCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgaW5zdGFsbGF0aW9uSWQgaWRlbnRpZnlpbmcgeW91ciBhcHBsaWNhdGlvbiBvbiBhIGRldmljZSwgYm9uZCB0byBhIHNwZWNpZmljIHVzZXJJZC5cclxuICAgKiBJZiB5b3Ugd2FudCB0byBzdG9yZSB0aGlzIGluZm9ybWF0aW9uIG9uIHlvdXIgc2VydmVycywga2VlcCB0aGUgY29ycmVzcG9uZGluZyB1c2VySWQgd2l0aCBpdC5cclxuICAgKiBXaWxsIHJldHVybiBgbnVsbGAgdW50aWwgdGhlIFNESyBpcyBwcm9wZXJseSBpbml0aWFsaXplZC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmcgfCBudWxsPn0gQSBwcm9taXNlIHdpdGggdGhlIGluc3RhbGxhdGlvbiBJRCBvciBudWxsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEluc3RhbGxhdGlvbklkKCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdW5pcXVlIGRldmljZSBpZGVudGlmaWVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSBkZXZpY2UgSUQgb3IgbnVsbFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXREZXZpY2VJZCgpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHB1c2ggdG9rZW4uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nIHwgbnVsbD59IEEgcHJvbWlzZSB3aXRoIHRoZSBwdXNoIHRva2VuIG9yIGBudWxsYFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQdXNoVG9rZW4oKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgdXNlZCBhY2Nlc3MgdG9rZW4uXHJcbiAgICogUmV0dXJucyBgbnVsbGAgdW50aWwgdGhlIFNESyBpcyBwcm9wZXJseSBpbml0aWFsaXplZC5cclxuICAgKiBUaGlzIHRvZ2V0aGVyIHdpdGggeW91ciBjbGllbnQgc2VjcmV0IGdpdmVzIGVudGlyZSBjb250cm9sIHRvIHRoZSBjdXJyZW50IGluc3RhbGxhdGlvbiBhbmQgYXNzb2NpYXRlZCB1c2VyLCB5b3Ugc2hvdWxkIG5vdCBkaXNjbG9zZSBpdCB1bm5lY2Vzc2FyaWx5LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZyB8IG51bGw+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRBY2Nlc3NUb2tlbigpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmQgYW4gZXZlbnQgdG8gYmUgdHJhY2tlZCB0byBXb25kZXJQdXNoLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgZXZlbnQgdHlwZSwgb3IgbmFtZS4gRXZlbnQgdHlwZXMgc3RhcnRpbmcgd2l0aCBhbiBgQGAgY2hhcmFjdGVyIGFyZSByZXNlcnZlZC5cclxuICAgKiBAcGFyYW0gez9vYmplY3R9IFthdHRyaWJ1dGVzXSAtIEFuIG9iamVjdCBjb250YWluaW5nIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBldmVudC5cclxuICAgKiAgIFRoZSBrZXlzIHNob3VsZCBiZSBwcmVmaXhlZCBhY2NvcmRpbmcgdG8gdGhlIHR5cGUgb2YgdGhlaXIgdmFsdWVzLlxyXG4gICAqICAgWW91IGNhbiBmaW5kIHRoZSBkZXRhaWxzIGluIHRoZSBbQ29uY2VwdHMgPiBDdXN0b20gZmllbGRzXShodHRwczovL3d3dy53b25kZXJwdXNoLmNvbS9kb2NzL2d1aWRlL2N1c3RvbS1maWVsZHMpIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdHJhY2tFdmVudCh0eXBlOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBvbmUgb3IgbW9yZSB0YWdzIHRvIHRoZSBpbnN0YWxsYXRpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHRhZyAtIFRoZSB0YWdzIHRvIGFkZCB0byB0aGUgaW5zdGFsbGF0aW9uLiBZb3UgY2FuIHVzZSBlaXRoZXIgYSBzaW5nbGUgc3RyaW5nIGFyZ3VtZW50IG9yIGFuIGFycmF5IG9mIHN0cmluZ3MuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYWRkVGFnKHRhZzogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSB0YWdzIGZyb20gdGhlIGluc3RhbGxhdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gdGFnIC0gVGhlIHRhZ3MgdG8gcmVtb3ZlIGZyb20gdGhlIGluc3RhbGxhdGlvbi4gWW91IGNhbiB1c2UgZWl0aGVyIGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCBvciBhbiBhcnJheSBvZiBzdHJpbmdzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZVRhZyh0YWc6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYWxsIHRhZ3MgZnJvbSB0aGUgaW5zdGFsbGF0aW9uLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZUFsbFRhZ3MoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYWxsIHRoZSB0YWdzIG9mIHRoZSBpbnN0YWxsYXRpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nW10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRUYWdzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlc3RzIHdoZXRoZXIgdGhlIGluc3RhbGxhdGlvbiBoYXMgdGhlIGdpdmVuIHRhZyBhdHRhY2hlZCB0byBpdC5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIC0gVGhlIHRhZyB0byB0ZXN0LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXNUYWcodGFnOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHZhbHVlIHRvIGEgZ2l2ZW4gaW5zdGFsbGF0aW9uIHByb3BlcnR5LlxyXG4gICAqXHJcbiAgICogVGhlIHByZXZpb3VzIHZhbHVlIGlzIHJlcGxhY2VkIGVudGlyZWx5LlxyXG4gICAqIFNldHRpbmcgYHVuZGVmaW5lZGAgb3IgYG51bGxgIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMge0BsaW5rIGNvcmRvdmEucGx1Z2lucy5Xb25kZXJQdXNoI3Vuc2V0UHJvcGVydHl9LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHNldFxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgcHJldmlvdXMgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBgbnVsbGAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHlcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB1bnNldFByb3BlcnR5KGZpZWxkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyB0aGUgdmFsdWUgdG8gYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgc3RvcmVkIHZhbHVlIGlzIG1hZGUgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgb25lLlxyXG4gICAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgYWxsIGl0cyB2YWx1ZXMgYXJlIGFkZGVkLlxyXG4gICAqIElmIGEgdmFsdWUgaXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBzdG9yZWQgdmFsdWUsIGl0IHdvbid0IGJlIGFkZGVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHZhbHVlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGFkZFByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgdGhlIHZhbHVlIGZyb20gYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBUaGUgc3RvcmVkIHZhbHVlIGlzIG1hZGUgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgb25lLlxyXG4gICAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheSwgYWxsIGl0cyB2YWx1ZXMgYXJlIHJlbW92ZWQuXHJcbiAgICogSWYgYSB2YWx1ZSBpcyBwcmVzZW50IG11bHRpcGxlIHRpbWVzIGluIHRoZSBzdG9yZWQgdmFsdWUsIHRoZXkgd2lsbCBhbGwgYmUgcmVtb3ZlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZVByb3BlcnR5KGZpZWxkOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBpbnN0YWxsYXRpb24gcHJvcGVydHkuXHJcbiAgICpcclxuICAgKiBJZiB0aGUgcHJvcGVydHkgc3RvcmVzIGFuIGFycmF5LCBvbmx5IHRoZSBmaXJzdCB2YWx1ZSBpcyByZXR1cm5lZC5cclxuICAgKiBUaGlzIHdheSB5b3UgZG9uJ3QgaGF2ZSB0byBkZWFsIHdpdGggcG90ZW50aWFsIGFycmF5cyBpZiB0aGF0IHByb3BlcnR5IGlzIG5vdCBzdXBwb3NlZCB0byBob2xkIG9uZS5cclxuICAgKiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgcHJvcGVydHkgaXMgYWJzZW50IG9yIGhhcyBhbiBlbXB0eSBhcnJheSB2YWx1ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZWFkIHZhbHVlcyBmcm9tXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UHJvcGVydHlWYWx1ZShmaWVsZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHZhbHVlcyBvZiBhIGdpdmVuIGluc3RhbGxhdGlvbiBwcm9wZXJ0eS5cclxuICAgKlxyXG4gICAqIElmIHRoZSBwcm9wZXJ0eSBkb2VzIG5vdCBzdG9yZSBhbiBhcnJheSwgYW4gYXJyYXkgaXMgcmV0dXJuZWQgbmV2ZXJ0aGVsZXNzLlxyXG4gICAqIFRoaXMgd2F5IHlvdSBkb24ndCBoYXZlIHRvIGRlYWwgd2l0aCBwb3RlbnRpYWwgc2NhbGFyIHZhbHVlcyBpZiB0aGF0IHByb3BlcnR5IGlzIHN1cHBvc2VkIHRvIGhvbGQgYW4gYXJyYXkuXHJcbiAgICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSBpbnN0ZWFkIG9mIGBudWxsYCBpZiB0aGUgcHJvcGVydHkgaXMgYWJzZW50LlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgd3JhcHBpbmcgYW55IHNjYWxhciB2YWx1ZSBoZWxkIGJ5IHRoZSBwcm9wZXJ0eS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byByZWFkIHZhbHVlcyBmcm9tXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55W10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRQcm9wZXJ0eVZhbHVlcyhmaWVsZDogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgbGF0ZXN0IGtub3duIGN1c3RvbSBwcm9wZXJ0aWVzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IGluc3RhbGxhdGlvbiBvYmplY3Qgc3RvcmVkIGJ5IFdvbmRlclB1c2guXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8e1twOiBzdHJpbmddOiBhbnl9Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UHJvcGVydGllcygpOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55IH0+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgdGhlIHByb3BlcnRpZXMgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgaW5zdGFsbGF0aW9uIG9iamVjdCBzdG9yZWQgYnkgV29uZGVyUHVzaC5cclxuICAgKlxyXG4gICAqIEluIG9yZGVyIHRvIHJlbW92ZSBhIHZhbHVlLCB1c2UgYG51bGxgLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHt7W3A6IHN0cmluZ106IGFueX19IHByb3BlcnRpZXMuIFRoZSBrZXlzIHNob3VsZCBiZSBwcmVmaXhlZCBhY2NvcmRpbmcgdG8gdGhlIHR5cGUgb2YgdGhlaXIgdmFsdWVzLiBZb3UgY2FuIGZpbmQgdGhlIGRldGFpbHMgaW4gdGhlIFtTZWdtZW50YXRpb24gPiBQcm9wZXJ0aWVzXShodHRwczovL2RvY3Mud29uZGVycHVzaC5jb20vZG9jcy9wcm9wZXJ0aWVzI3NlY3Rpb24tY3VzdG9tLXByb3BlcnRpZXMpIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHV0UHJvcGVydGllcyhwcm9wZXJ0aWVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN1YnNjcmliZXMgdG8gcHVzaCBub3RpZmljYXRpb24gYW5kIHJlZ2lzdGVycyB0aGUgZGV2aWNlIHRva2VuIHdpdGggV29uZGVQdXNoLlxyXG4gICAqXHJcbiAgICogT24gaU9TLCB5b3UgKiptdXN0KiogY2FsbCB0aGUgZm9sbG93aW5nIG1ldGhvZCBhdCBsZWFzdCBvbmNlIHRvIG1ha2UgdGhlIG5vdGlmaWNhdGlvbiB2aXNpYmxlIHRvIHRoZSB1c2VyLlxyXG4gICAqXHJcbiAgICogLSBZb3UgY2FuIGNhbGwgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMuIFRoZSB1c2VyIGlzIG9ubHkgcHJvbXB0ZWQgZm9yIHBlcm1pc3Npb24gYnkgaU9TIG9uY2UuXHJcbiAgICogLSBUaGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgdGhpcyBtZXRob2QgaWYgdGhlIHBlcm1pc3Npb24gaGFzIGFscmVhZHkgYmVlbiBncmFudGVkLCBidXQgaXQgZG9lcyBub3QgaGFybSBlaXRoZXIuXHJcbiAgICogLSBJZiB0aGUgcGVybWlzc2lvbiBoYXMgYmVlbiBkZW5pZWQgaW4gdGhlIE9TLCB0aGUgdXNlciB3aWxsIHN0YXkgc29mdCBvcHQtb3V0LlxyXG4gICAqXHJcbiAgICogQmVjYXVzZSBpbiBpT1MgeW91IG9ubHkgaGF2ZSAqb25lKiBjaGFuY2UgZm9yIHByb21wdGluZyB0aGUgdXNlciwgeW91IHNob3VsZCBmaW5kIGEgZ29vZCB0aW1pbmcgZm9yIHRoYXQuXHJcbiAgICogRm9yIGEgc3RhcnQsIHlvdSBjYW4gc3lzdGVtYXRpY2FsbHkgY2FsbCBpdCB3aGVuIHRoZSBhcHBsaWNhdGlvbiBzdGFydHMsIHNvIHRoYXQgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCBkaXJlY3RseSBhdCB0aGUgZmlyc3QgbGF1bmNoLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHVwb24gc3VjY2Vzc2Z1bCBzdWJzY3JpcHRpb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3Vic2NyaWJlVG9Ob3RpZmljYXRpb25zKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIG5vdGlmaWNhdGlvbnMgYXJlIGVuYWJsZWQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzU3Vic2NyaWJlZFRvTm90aWZpY2F0aW9ucygpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVuc3Vic2NyaWJlcyBmcm9tIHB1c2ggbm90aWZpY2F0aW9uLlxyXG4gICAqIFRoaXMgbWV0aG9kIG1hcmtzIHRoZSB1c2VyIGFzIHNvZnQgb3B0LW91dC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVuc3Vic2NyaWJlRnJvbU5vdGlmaWNhdGlvbnMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlYWRzIHVzZXIgY29uc2VudCBzdGF0ZS5cclxuICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBubyBleHBsaWNpdCBjb25zZW50IHdhcyBzZXQuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFVzZXJDb25zZW50KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgb3Igd2l0aGRyYXdzIHVzZXIgY29uc2VudC5cclxuICAgKiBJZiB0aGUgYHJlcXVpcmVzVXNlckNvbnNlbnRgIGluaXRpYWxpemF0aW9uIG9wdGlvbiBpcyB0cnVlLFxyXG4gICAqIHRoZSB3aG9sZSBTREsgaXMgcGF1c2VkIGFuZCBubyBkYXRhIGlzIHNlbnQgdG8gV29uZGVyUHVzaCwgdW50aWwgY29uc2VudCBpcyBwcm92aWRlZC5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNvbnNlbnQgLVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFVzZXJDb25zZW50KGNvbnNlbnQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGFueSBsb2NhbCBzdG9yYWdlIGFuZCBhc2sgdGhlIFdvbmRlclB1c2ggc2VydmVycyB0byBkZWxldGUgYW55IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBhbGwgbG9jYWwgaW5zdGFsbGF0aW9ucyBhbmQgcmVsYXRlZCB1c2Vycy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbGVhckFsbERhdGEoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzayB0aGUgV29uZGVyUHVzaCBzZXJ2ZXJzIHRvIGRlbGV0ZSBhbnkgZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBhbGwgbG9jYWwgaW5zdGFsbGF0aW9ucy5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbGVhckV2ZW50c0hpc3RvcnkoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzayB0aGUgV29uZGVyUHVzaCBzZXJ2ZXJzIHRvIGRlbGV0ZSBhbnkgY3VzdG9tIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBhbGwgbG9jYWwgaW5zdGFsbGF0aW9ucyBhbmQgcmVsYXRlZCB1c2Vycy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFyUHJlZmVyZW5jZXMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYXRlcyB0aGUgZG93bmxvYWQgb2YgYWxsIHVzZXIgcmVtb3RlIGFuZCBsb2NhbCBkYXRhLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZG93bmxvYWRBbGxEYXRhKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBVc2VyUHJlZmVyZW5jZXMgPSBuZXcgVXNlclByZWZlcmVuY2VzTWV0aG9kcyh0aGlzKTtcclxufVxyXG4iXX0=