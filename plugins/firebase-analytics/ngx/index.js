import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FirebaseAnalytics = /** @class */ (function (_super) {
    __extends(FirebaseAnalytics, _super);
    function FirebaseAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAnalytics.prototype.logEvent = function (name, params) { return cordova(this, "logEvent", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setUserId = function (id) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setEnabled = function (enabled) { return cordova(this, "setEnabled", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.setCurrentScreen = function (name) { return cordova(this, "setCurrentScreen", { "sync": true }, arguments); };
    FirebaseAnalytics.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", { "sync": true }, arguments); };
    FirebaseAnalytics.pluginName = "FirebaseAnalytics";
    FirebaseAnalytics.plugin = "cordova-plugin-firebase-analytics";
    FirebaseAnalytics.pluginRef = "cordova.plugins.firebase.analytics";
    FirebaseAnalytics.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-analytics";
    FirebaseAnalytics.platforms = ["Android", "iOS"];
    FirebaseAnalytics = __decorate([
        Injectable()
    ], FirebaseAnalytics);
    return FirebaseAnalytics;
}(IonicNativePlugin));
export { FirebaseAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWFuYWx5dGljcy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFtQ2pDLHFDQUFpQjs7OztJQVN0RCxvQ0FBUSxhQUFDLElBQVksRUFBRSxNQUFXO0lBV2xDLHFDQUFTLGFBQUMsRUFBVTtJQVlwQiwyQ0FBZSxhQUFDLElBQVksRUFBRSxLQUFhO0lBVTNDLHNDQUFVLGFBQUMsT0FBZ0I7SUFXM0IsNENBQWdCLGFBQUMsSUFBWTtJQVM3Qiw4Q0FBa0I7Ozs7OztJQTlEUCxpQkFBaUI7UUFEN0IsVUFBVSxFQUFFO09BQ0EsaUJBQWlCOzRCQXBDOUI7RUFvQ3VDLGlCQUFpQjtTQUEzQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBiZXRhXHJcbiAqIEBuYW1lIEZpcmViYXNlIEFuYWx5dGljc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIEFuYWx5dGljc1xyXG4gKlxyXG4gKiBHbyB0byBmaXJlYmFzZSBjb25zb2xlIGFuZCBleHBvcnQgZ29vZ2xlLXNlcnZpY2VzLmpzb24gYW5kIEdvb2dsZVNlcnZpY2UtSW5mby5wbGlzdC4gUHV0IHRob3NlIGZpbGVzIGludG8gdGhlIHJvb3Qgb2YgeW91ciBjb3Jkb3ZhIGFwcCBmb2xkZXIuXHJcbiAqXHJcbiAqIE5PVEU6IG9uIGlPUyBpbiBvcmRlciB0byBjb2xsZWN0IGRlbW9ncmFwaGljLCBhZ2UsIGdlbmRlciBkYXRhIGV0Yy4geW91IHNob3VsZCBhZGRpdGlvbmFsbHkgaW5jbHVkZSBBZFN1cHBvcnQuZnJhbWV3b3JrIGludG8geW91ciBwcm9qZWN0LlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGaXJlYmFzZUFuYWx5dGljcyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlyZWJhc2UtYW5hbHl0aWNzL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VBbmFseXRpY3M6IEZpcmViYXNlQW5hbHl0aWNzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuZmlyZWJhc2VBbmFseXRpY3MubG9nRXZlbnQoJ3BhZ2VfdmlldycsIHtwYWdlOiBcImRhc2hib2FyZFwifSlcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0ZpcmViYXNlQW5hbHl0aWNzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1hbmFseXRpY3MnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5hbmFseXRpY3MnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1hbmFseXRpY3MnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUFuYWx5dGljcyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBMb2dzIGFuIGFwcCBldmVudC5cclxuICAgKiBCZSBhd2FyZSBvZiBhdXRvbWF0aWNhbGx5IGNvbGxlY3RlZCBldmVudHMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcbiAgICogQHBhcmFtIHthbnl9IHBhcmFtcyBTb21lIHBhcmFtIHRvIGNvbmZpZ3VyZSBzb21ldGhpbmdcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgbG9nRXZlbnQobmFtZTogc3RyaW5nLCBwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSB1c2VyIElEIHByb3BlcnR5LlxyXG4gICAqIFRoaXMgZmVhdHVyZSBtdXN0IGJlIHVzZWQgaW4gYWNjb3JkYW5jZSB3aXRoIEdvb2dsZSdzIFByaXZhY3kgUG9saWN5LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdXNlciBJRFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRVc2VySWQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZlYXR1cmUgbXVzdCBiZSB1c2VkIGluIGFjY29yZGFuY2Ugd2l0aCBHb29nbGUncyBQcml2YWN5IFBvbGljeS5cclxuICAgKiBCZSBhd2FyZSBvZiBhdXRvbWF0aWNhbGx5IGNvbGxlY3RlZCB1c2VyIHByb3BlcnRpZXMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIHByb3BlcnR5IG5hbWVcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHByb3BlcnR5IHZhbHVlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldFVzZXJQcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB3aGV0aGVyIGFuYWx5dGljcyBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgYXBwIG9uIHRoaXMgZGV2aWNlLlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgY3VycmVudCBzY3JlZW4gbmFtZSwgd2hpY2ggc3BlY2lmaWVzIHRoZSBjdXJyZW50IHZpc3VhbCBjb250ZXh0IGluIHlvdXIgYXBwLlxyXG4gICAqIFRoaXMgaGVscHMgaWRlbnRpZnkgdGhlIGFyZWFzIGluIHlvdXIgYXBwIHdoZXJlIHVzZXJzIHNwZW5kIHRoZWlyIHRpbWUgYW5kIGhvdyB0aGV5IGludGVyYWN0IHdpdGggeW91ciBhcHAuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNjcmVlblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRDdXJyZW50U2NyZWVuKG5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhcnMgYWxsIGFuYWx5dGljcyBkYXRhIGZvciB0aGlzIGluc3RhbmNlIGZyb20gdGhlIGRldmljZSBhbmQgcmVzZXRzIHRoZSBhcHAgaW5zdGFuY2UgSURcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHJlc2V0QW5hbHl0aWNzRGF0YSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19