var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FirebaseAnalyticsOriginal = /** @class */ (function (_super) {
    __extends(FirebaseAnalyticsOriginal, _super);
    function FirebaseAnalyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseAnalyticsOriginal.prototype.logEvent = function (name, params) { return cordova(this, "logEvent", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setUserId = function (id) { return cordova(this, "setUserId", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setEnabled = function (enabled) { return cordova(this, "setEnabled", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.setCurrentScreen = function (name) { return cordova(this, "setCurrentScreen", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", { "sync": true }, arguments); };
    FirebaseAnalyticsOriginal.pluginName = "FirebaseAnalytics";
    FirebaseAnalyticsOriginal.plugin = "cordova-plugin-firebase-analytics";
    FirebaseAnalyticsOriginal.pluginRef = "cordova.plugins.firebase.analytics";
    FirebaseAnalyticsOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-analytics";
    FirebaseAnalyticsOriginal.platforms = ["Android", "iOS"];
    return FirebaseAnalyticsOriginal;
}(IonicNativePlugin));
var FirebaseAnalytics = new FirebaseAnalyticsOriginal();
export { FirebaseAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWFuYWx5dGljcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFtQ2pDLHFDQUFpQjs7OztJQVN0RCxvQ0FBUSxhQUFDLElBQVksRUFBRSxNQUFXO0lBV2xDLHFDQUFTLGFBQUMsRUFBVTtJQVlwQiwyQ0FBZSxhQUFDLElBQVksRUFBRSxLQUFhO0lBVTNDLHNDQUFVLGFBQUMsT0FBZ0I7SUFXM0IsNENBQWdCLGFBQUMsSUFBWTtJQVM3Qiw4Q0FBa0I7Ozs7Ozs0QkFsR3BCO0VBb0N1QyxpQkFBaUI7U0FBM0MsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAYmV0YVxyXG4gKiBAbmFtZSBGaXJlYmFzZSBBbmFseXRpY3NcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvcmRvdmEgcGx1Z2luIGZvciBGaXJlYmFzZSBBbmFseXRpY3NcclxuICpcclxuICogR28gdG8gZmlyZWJhc2UgY29uc29sZSBhbmQgZXhwb3J0IGdvb2dsZS1zZXJ2aWNlcy5qc29uIGFuZCBHb29nbGVTZXJ2aWNlLUluZm8ucGxpc3QuIFB1dCB0aG9zZSBmaWxlcyBpbnRvIHRoZSByb290IG9mIHlvdXIgY29yZG92YSBhcHAgZm9sZGVyLlxyXG4gKlxyXG4gKiBOT1RFOiBvbiBpT1MgaW4gb3JkZXIgdG8gY29sbGVjdCBkZW1vZ3JhcGhpYywgYWdlLCBnZW5kZXIgZGF0YSBldGMuIHlvdSBzaG91bGQgYWRkaXRpb25hbGx5IGluY2x1ZGUgQWRTdXBwb3J0LmZyYW1ld29yayBpbnRvIHlvdXIgcHJvamVjdC5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRmlyZWJhc2VBbmFseXRpY3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLWFuYWx5dGljcy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlQW5hbHl0aWNzOiBGaXJlYmFzZUFuYWx5dGljcykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmZpcmViYXNlQW5hbHl0aWNzLmxvZ0V2ZW50KCdwYWdlX3ZpZXcnLCB7cGFnZTogXCJkYXNoYm9hcmRcIn0pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZUFuYWx5dGljcycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtYW5hbHl0aWNzJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UuYW5hbHl0aWNzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtYW5hbHl0aWNzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VBbmFseXRpY3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogTG9ncyBhbiBhcHAgZXZlbnQuXHJcbiAgICogQmUgYXdhcmUgb2YgYXV0b21hdGljYWxseSBjb2xsZWN0ZWQgZXZlbnRzLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAqIEBwYXJhbSB7YW55fSBwYXJhbXMgU29tZSBwYXJhbSB0byBjb25maWd1cmUgc29tZXRoaW5nXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGxvZ0V2ZW50KG5hbWU6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgdXNlciBJRCBwcm9wZXJ0eS5cclxuICAgKiBUaGlzIGZlYXR1cmUgbXVzdCBiZSB1c2VkIGluIGFjY29yZGFuY2Ugd2l0aCBHb29nbGUncyBQcml2YWN5IFBvbGljeS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVzZXIgSURcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0VXNlcklkKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmZWF0dXJlIG11c3QgYmUgdXNlZCBpbiBhY2NvcmRhbmNlIHdpdGggR29vZ2xlJ3MgUHJpdmFjeSBQb2xpY3kuXHJcbiAgICogQmUgYXdhcmUgb2YgYXV0b21hdGljYWxseSBjb2xsZWN0ZWQgdXNlciBwcm9wZXJ0aWVzLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBwcm9wZXJ0eSBuYW1lXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBwcm9wZXJ0eSB2YWx1ZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRVc2VyUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgd2hldGhlciBhbmFseXRpY3MgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIGFwcCBvbiB0aGlzIGRldmljZS5cclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWRcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0RW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgc2NyZWVuIG5hbWUsIHdoaWNoIHNwZWNpZmllcyB0aGUgY3VycmVudCB2aXN1YWwgY29udGV4dCBpbiB5b3VyIGFwcC5cclxuICAgKiBUaGlzIGhlbHBzIGlkZW50aWZ5IHRoZSBhcmVhcyBpbiB5b3VyIGFwcCB3aGVyZSB1c2VycyBzcGVuZCB0aGVpciB0aW1lIGFuZCBob3cgdGhleSBpbnRlcmFjdCB3aXRoIHlvdXIgYXBwLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzY3JlZW5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc2V0Q3VycmVudFNjcmVlbihuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXJzIGFsbCBhbmFseXRpY3MgZGF0YSBmb3IgdGhpcyBpbnN0YW5jZSBmcm9tIHRoZSBkZXZpY2UgYW5kIHJlc2V0cyB0aGUgYXBwIGluc3RhbmNlIElEXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICByZXNldEFuYWx5dGljc0RhdGEoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==