import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var Tealium = /** @class */ (function (_super) {
    __extends(Tealium, _super);
    function Tealium() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tealium.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    Tealium.prototype.trackView = function (dataObject, instanceName) { return cordova(this, "trackView", {}, arguments); };
    Tealium.prototype.trackEvent = function (dataObject, instanceName) { return cordova(this, "trackEvent", {}, arguments); };
    Tealium.prototype.track = function (eventType, dataObject, instanceName) { return cordova(this, "track", {}, arguments); };
    Tealium.prototype.addPersistent = function (keyName, value, instanceName) { return cordova(this, "addPersistent", {}, arguments); };
    Tealium.prototype.addVolatile = function (keyName, value, instanceName) { return cordova(this, "addVolatile", {}, arguments); };
    Tealium.prototype.removeVolatile = function (keyName, instanceName) { return cordova(this, "removeVolatile", {}, arguments); };
    Tealium.prototype.removePersistent = function (keyName, instanceName) { return cordova(this, "removePersistent", {}, arguments); };
    Tealium.prototype.getPersistent = function (keyName, instanceName, callback) { return cordova(this, "getPersistent", {}, arguments); };
    Tealium.prototype.getVolatile = function (keyName, instanceName, callback) { return cordova(this, "getVolatile", {}, arguments); };
    Tealium.prototype.addRemoteCommand = function (commandName, instanceName, callback) { return cordova(this, "addRemoteCommand", {}, arguments); };
    Tealium.prototype.getVisitorId = function () { return cordova(this, "getVisitorId", {}, arguments); };
    Tealium.pluginName = "Tealium";
    Tealium.plugin = "tealium-cordova-plugin";
    Tealium.pluginRef = "window.tealium";
    Tealium.repo = "https://github.com/Tealium/cordova-plugin";
    Tealium.platforms = ["Android", "iOS"];
    Tealium.install = "";
    Tealium = __decorate([
        Injectable()
    ], Tealium);
    return Tealium;
}(IonicNativePlugin));
export { Tealium };
//# sourceMappingURL=data:application/json;base64,