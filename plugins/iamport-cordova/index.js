var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IamportCordovaOriginal = /** @class */ (function (_super) {
    __extends(IamportCordovaOriginal, _super);
    function IamportCordovaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IamportCordovaOriginal.prototype.payment = function (paymentObject) { return cordova(this, "payment", {}, arguments); };
    IamportCordovaOriginal.prototype.certification = function (certificationObject) { return cordova(this, "certification", {}, arguments); };
    IamportCordovaOriginal.pluginName = "IamportCordova";
    IamportCordovaOriginal.plugin = "iamport-cordova";
    IamportCordovaOriginal.pluginRef = "cordova.plugins.IamportCordova";
    IamportCordovaOriginal.repo = "https://github.com/iamport/iamport-cordova";
    IamportCordovaOriginal.platforms = ["ios", "android"];
    return IamportCordovaOriginal;
}(IonicNativePlugin));
var IamportCordova = new IamportCordovaOriginal();
export { IamportCordova };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2lhbXBvcnQtY29yZG92YS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEwRnBDLGtDQUFpQjs7OztJQU9uRCxnQ0FBTyxhQUFDLGFBQTRCO0lBVXBDLHNDQUFhLGFBQUMsbUJBQXdDOzs7Ozs7eUJBNUd4RDtFQTJGb0MsaUJBQWlCO1NBQXhDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBjb3Jkb3ZhOiBDb3Jkb3ZhICYgeyBwbHVnaW5zOiBhbnkgfTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudE9iamVjdCB7XHJcbiAgdGl0bGU/OiBUaXRsZURhdGE7IC8vIHdlYnZpZXcgdGl0bGUgZGF0YVxyXG4gIHVzZXJDb2RlOiBzdHJpbmc7IC8vIHVzZXIgaWRlbnRpZmljYXRpb24gY29kZVxyXG4gIGRhdGE6IFBheW1lbnREYXRhOyAvLyBwYXltZW50IGRhdGFcclxuICBjYWxsYmFjazogYW55OyAvLyBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBwYXltZW50XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2VydGlmaWNhdGlvbk9iamVjdCB7XHJcbiAgdGl0bGU/OiBUaXRsZURhdGE7IC8vIHdlYnZpZXcgdGl0bGUgZGF0YVxyXG4gIHVzZXJDb2RlOiBzdHJpbmc7IC8vIHVzZXIgaWRlbnRpZmljYXRpb24gY29kZVxyXG4gIGRhdGE6IENlcnRpZmljYXRpb25EYXRhOyAvLyBjZXJ0aWZpY2F0aW9uIGRhdGFcclxuICBjYWxsYmFjazogYW55OyAvLyBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBjZXJ0aWZpY2F0aW9uXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGl0bGVEYXRhIHtcclxuICBuYW1lPzogc3RyaW5nOyAvLyB3ZWJ2aWV3IHRpdGxlIG5hbWVcclxuICBjb2xvcj86IHN0cmluZzsgLy8gd2VidmlldyB0aXRsZSBiYWNrZ3JvdW5kIGNvbG9yXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudERhdGEge1xyXG4gIHBnPzogc3RyaW5nOyAvLyBwYXltZW50IGdhdGV3YXkgdHlwZVxyXG4gIHBheV9tZXRob2Q/OiBzdHJpbmc7IC8vIHBheW1lbnQgbWV0aG9kXHJcbiAgbmFtZTogc3RyaW5nOyAvLyBuYW1lIG9mIG9yZGVyXHJcbiAgbWVyY2hhbnRfdWlkPzogc3RyaW5nOyAvLyB1bmlxdWUgbWVyY2hhbnQgaWRcclxuICBhbW91bnQ6IHN0cmluZzsgLy8gcGF5bWVudCBhbW91bnRcclxuICBidXllcl9uYW1lPzogc3RyaW5nOyAvLyBidXllciBuYW1lXHJcbiAgYnV5ZXJfdGVsPzogc3RyaW5nOyAvLyBidXllciBjb250YWN0XHJcbiAgYnV5ZXJfZW1haWw/OiBzdHJpbmc7IC8vIGJ1eWVyIGVtYWlsIGFkZHJlc3NcclxuICBidXllcl9hZGRyPzogc3RyaW5nOyAvLyBidXllciBhZGRyZXNzXHJcbiAgYnV5ZXJfcG9zdGNvZGU/OiBzdHJpbmc7IC8vIGJ1eWVyIHBvc3Rjb2RlXHJcbiAgYXBwX3NjaGVtZTogc3RyaW5nOyAvLyBjdXN0b20gYXBwIHVybCBzY2hlbWVcclxuICBjdXN0b21fZGF0YT86IGFueTsgLy8gY3VzdG9tIGRhdGFcclxuICBub3RpY2VfdXJsPzogc3RyaW5nOyAvLyBub3RpZmljYXRpb24gdXJsXHJcbiAgZXNjcm93PzogYm9vbGVhbjsgLy8gd2hldGhlciB0aGUgdHlwZSBvZiB0aGlzIG9yZGVyIGlzIGVzY3Jvd1xyXG4gIGRpZ2l0YWw/OiBib29sZWFuOyAvLyB3aGV0aGVyIHRoaXMgb3JkZXIgaXMgZm9yIHJlYWwgcHJvZHVjdHMgb3IgY29udGVudHNcclxuICBkaXNwbGF5Pzoge1xyXG4gICAgY2FyZF9xdW90YT86IG51bWJlcltdOyAvLyBjcmVkaXQgY2FyZCBpbnN0YWxsbWVudCBzZXR0aW5nIHZhbHVlXHJcbiAgfTtcclxuICBjdXJyZW5jeT86IHN0cmluZzsgLy8gcGF5bWVudCBjdXJyZW5jeVxyXG4gIGN1c3RvbWVyX3VpZD86IHN0cmluZzsgLy8gdW5pcXVlIGN1c3RvbWVyIGlkIGZvciBzdWJzY3JpcHRpb24gcGF5bWVudHNcclxuICB0YXhfZnJlZT86IHN0cmluZzsgLy8gdGF4IGFtb3VudFxyXG4gIGxhbmd1YWdlPzogc3RyaW5nOyAvLyBsYW5ndWFnZSB0eXBlXHJcbiAgdmJhbmtfZHVlPzogc3RyaW5nOyAvLyB2YmFuayBkdWUgZGF0ZVxyXG4gIGJpel9udW0/OiBzdHJpbmc7IC8vIGJ1c2luZXNzIG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENlcnRpZmljYXRpb25EYXRhIHtcclxuICBjb21wYW55Pzogc3RyaW5nOyAvLyBjb21wYW55IG5hbWVcclxuICBwaG9uZT86IHN0cmluZzsgLy8gY2VsbCBwaG9uZSBudW1iZXJcclxuICBuYW1lPzogc3RyaW5nOyAvLyBuYW1lXHJcbiAgY2Fycmllcj86IHN0cmluZzsgLy8gY2FycmllciBjb2RlXHJcbiAgYmlydGg/OiBzdHJpbmc7IC8vIGJpcnRoIGRhdGVcclxuICBtZXJjaGFudF91aWQ/OiBzdHJpbmc7IC8vIHVuaXF1ZSBtZXJjaGFudCBpZFxyXG4gIG1pbl9hZ2U/OiBzdHJpbmc7IC8vIG1pbmltdW0gYWdlIHRvIGFsbG93IGNlcnRpZmljYXRpb25cclxuICBwb3B1cD86IGJvb2xlYW47IC8vIHdoZXRoZXIgdGhlIHdlYnZpZXcgaXMgcG9wdXBcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIElhbXBvcnQgQ29yZG92YVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZG9lcyBzb21ldGhpbmdcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSWFtcG9ydENvcmRvdmEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2lhbXBvcnQtY29yZG92YS9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGlhbXBvcnRDb3Jkb3ZhOiBJYW1wb3J0Q29yZG92YSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmlhbXBvcnRDb3Jkb3ZhLmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdJYW1wb3J0Q29yZG92YScsXHJcbiAgcGx1Z2luOiAnaWFtcG9ydC1jb3Jkb3ZhJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuSWFtcG9ydENvcmRvdmEnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaWFtcG9ydC9pYW1wb3J0LWNvcmRvdmEnLFxyXG4gIHBsYXRmb3JtczogWydpb3MnLCAnYW5kcm9pZCddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJYW1wb3J0Q29yZG92YSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHRvIGxvYWQgYSB3ZWJ2aWV3IG9mIGEgcGF5bWVudCBnYXRld2F5IHRvIHBheSBmb3Igc29tZXRoaW5nXHJcbiAgICogQHBhcmFtIHBheW1lbnRPYmplY3Qge1BheW1lbnRPYmplY3R9IFBheW1lbnQgZGF0YSB0byBzZXQgdGhlIHBheW1lbnQgd2Vidmlld1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gQSBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgcGF5bWVudCBkYXRhIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB3ZWJ2aWV3IGlzIGNsb3NlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwYXltZW50KHBheW1lbnRPYmplY3Q6IFBheW1lbnRPYmplY3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5wYXltZW50KHBheW1lbnRPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBpcyB0byBsb2FkIGEgd2VidmlldyBmb3IgaWRlbnRpZmljYXRpb24gd2l0aCBjYXJyaWVyIHR5cGUobGlrZSBWZXJpem9uKSwgbmFtZSBhbmQgcGhvbmUgbnVtYmVyXHJcbiAgICogQHBhcmFtIGNlcnRpZmljYXRpb25PYmplY3Qge0NlcnRpZmljYXRpb25PYmplY3R9IENlcnRpZmljYXRpb24gZGF0YSB0byBzZXQgdGhlIGNlcnRpZmljYXRpb24gd2Vidmlld1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gQSBjYWxsYmFjayBmdW5jdGlvbiBvZiB0aGUgY2VydGlmaWNhdGlvbiBkYXRhIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB3ZWJ2aWV3IGlzIGNsb3NlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3Q6IENlcnRpZmljYXRpb25PYmplY3QpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIGNvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YS5jZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3QpO1xyXG4gIH1cclxufVxyXG4iXX0=