var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ZoomOriginal = /** @class */ (function (_super) {
    __extends(ZoomOriginal, _super);
    function ZoomOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZoomOriginal.prototype.initialize = function (appKey, appSecret) { return cordova(this, "initialize", {}, arguments); };
    ZoomOriginal.prototype.login = function (username, password) { return cordova(this, "login", {}, arguments); };
    ZoomOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    ZoomOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    ZoomOriginal.prototype.joinMeeting = function (meetingNo, meetingPassword, displayName, options) { return cordova(this, "joinMeeting", {}, arguments); };
    ZoomOriginal.prototype.startMeetingWithZAK = function (meetingNo, displayName, zoomToken, zoomAccessToken, userId, options) { return cordova(this, "startMeetingWithZAK", {}, arguments); };
    ZoomOriginal.prototype.startMeeting = function (meetingNo, options) { return cordova(this, "startMeeting", {}, arguments); };
    ZoomOriginal.prototype.startInstantMeeting = function (options) { return cordova(this, "startInstantMeeting", {}, arguments); };
    ZoomOriginal.prototype.setLocale = function (languageTag) { return cordova(this, "setLocale", {}, arguments); };
    ZoomOriginal.pluginName = "Zoom";
    ZoomOriginal.plugin = "cordova.plugin.zoom";
    ZoomOriginal.pluginRef = "cordova.plugins.Zoom";
    ZoomOriginal.repo = "https://github.com/zoom/zoom-sdk-ionic";
    ZoomOriginal.platforms = ["Android", "iOS"];
    return ZoomOriginal;
}(IonicNativePlugin));
var Zoom = new ZoomOriginal();
export { Zoom };
//# sourceMappingURL=data:application/json;base64,