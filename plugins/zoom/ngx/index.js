import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Zoom = /** @class */ (function (_super) {
    __extends(Zoom, _super);
    function Zoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zoom.prototype.initialize = function (appKey, appSecret) { return cordova(this, "initialize", {}, arguments); };
    Zoom.prototype.login = function (username, password) { return cordova(this, "login", {}, arguments); };
    Zoom.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Zoom.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    Zoom.prototype.joinMeeting = function (meetingNo, meetingPassword, displayName, options) { return cordova(this, "joinMeeting", {}, arguments); };
    Zoom.prototype.startMeetingWithZAK = function (meetingNo, displayName, zoomToken, zoomAccessToken, userId, options) { return cordova(this, "startMeetingWithZAK", {}, arguments); };
    Zoom.prototype.startMeeting = function (meetingNo, options) { return cordova(this, "startMeeting", {}, arguments); };
    Zoom.prototype.startInstantMeeting = function (options) { return cordova(this, "startInstantMeeting", {}, arguments); };
    Zoom.prototype.setLocale = function (languageTag) { return cordova(this, "setLocale", {}, arguments); };
    Zoom.pluginName = "Zoom";
    Zoom.plugin = "cordova.plugin.zoom";
    Zoom.pluginRef = "cordova.plugins.Zoom";
    Zoom.repo = "https://github.com/zoom/zoom-sdk-ionic";
    Zoom.platforms = ["Android", "iOS"];
    Zoom = __decorate([
        Injectable()
    ], Zoom);
    return Zoom;
}(IonicNativePlugin));
export { Zoom };
//# sourceMappingURL=data:application/json;base64,