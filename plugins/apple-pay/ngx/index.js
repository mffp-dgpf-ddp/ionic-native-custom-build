import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ApplePay = /** @class */ (function (_super) {
    __extends(ApplePay, _super);
    function ApplePay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApplePay.prototype.canMakePayments = function () { return cordova(this, "canMakePayments", { "otherPromise": true }, arguments); };
    ApplePay.prototype.startListeningForShippingContactSelection = function () { return cordova(this, "startListeningForShippingContactSelection", { "observable": true, "clearFunction": "stopListeningForShippingContactSelection" }, arguments); };
    ApplePay.prototype.stopListeningForShippingContactSelection = function () { return cordova(this, "stopListeningForShippingContactSelection", { "otherPromise": true }, arguments); };
    ApplePay.prototype.updateItemsAndShippingMethods = function (list) { return cordova(this, "updateItemsAndShippingMethods", { "otherPromise": true }, arguments); };
    ApplePay.prototype.makePaymentRequest = function (order) { return cordova(this, "makePaymentRequest", { "otherPromise": true }, arguments); };
    ApplePay.prototype.completeLastTransaction = function (complete) { return cordova(this, "completeLastTransaction", { "otherPromise": true }, arguments); };
    ApplePay.pluginName = "ApplePay";
    ApplePay.plugin = "cordova-plugin-applepay";
    ApplePay.pluginRef = "ApplePay";
    ApplePay.repo = "https://github.com/samkelleher/cordova-plugin-applepay";
    ApplePay.platforms = ["iOS"];
    ApplePay = __decorate([
        Injectable()
    ], ApplePay);
    return ApplePay;
}(IonicNativePlugin));
export { ApplePay };
//# sourceMappingURL=data:application/json;base64,