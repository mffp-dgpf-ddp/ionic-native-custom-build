var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var PinterestOriginal = /** @class */ (function (_super) {
    __extends(PinterestOriginal, _super);
    function PinterestOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PinterestOriginal.prototype.login = function (scopes) { return cordova(this, "login", {}, arguments); };
    PinterestOriginal.prototype.getMe = function (fields) { return cordova(this, "getMe", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyPins = function (fields, limit) { return cordova(this, "getMyPins", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyBoards = function (fields, limit) { return cordova(this, "getMyBoards", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyLikes = function (fields, limit) { return cordova(this, "getMyLikes", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyFollowers = function (fields, limit) { return cordova(this, "getMyFollowers", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyFollowedBoards = function (fields, limit) { return cordova(this, "getMyFollowedBoards", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getMyFollowedInterests = function (fields, limit) { return cordova(this, "getMyFollowedInterests", { "callbackOrder": "reverse" }, arguments); };
    PinterestOriginal.prototype.getUser = function (username, fields) { return cordova(this, "getUser", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PinterestOriginal.prototype.getBoard = function (boardId, fields) { return cordova(this, "getBoard", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PinterestOriginal.prototype.getBoardPins = function (boardId, fields, limit) { return cordova(this, "getBoardPins", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PinterestOriginal.prototype.deleteBoard = function (boardId) { return cordova(this, "deleteBoard", {}, arguments); };
    PinterestOriginal.prototype.createBoard = function (name, desc) { return cordova(this, "createBoard", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    PinterestOriginal.prototype.getPin = function (pinId, fields) { return cordova(this, "getPin", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    PinterestOriginal.prototype.deletePin = function (pinId) { return cordova(this, "deletePin", {}, arguments); };
    PinterestOriginal.prototype.createPin = function (note, boardId, imageUrl, link) { return cordova(this, "createPin", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    Object.defineProperty(PinterestOriginal.prototype, "SCOPES", {
        get: function () { return cordovaPropertyGet(this, "SCOPES"); },
        set: function (value) { cordovaPropertySet(this, "SCOPES", value); },
        enumerable: true,
        configurable: true
    });
    PinterestOriginal.pluginName = "Pinterest";
    PinterestOriginal.plugin = "cordova-plugin-pinterest";
    PinterestOriginal.pluginRef = "cordova.plugins.Pinterest";
    PinterestOriginal.repo = "https://github.com/zyramedia/cordova-plugin-pinterest";
    PinterestOriginal.install = "ionic cordova plugin add cordova-plugin-pinterest --variable APP_ID=YOUR_APP_ID";
    PinterestOriginal.installVariables = ["APP_ID"];
    PinterestOriginal.platforms = ["Android", "iOS"];
    return PinterestOriginal;
}(IonicNativePlugin));
var Pinterest = new PinterestOriginal();
export { Pinterest };
//# sourceMappingURL=data:application/json;base64,