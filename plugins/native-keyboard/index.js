var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeKeyboardOriginal = /** @class */ (function (_super) {
    __extends(NativeKeyboardOriginal, _super);
    function NativeKeyboardOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeKeyboardOriginal.prototype.showMessenger = function (options) { return cordova(this, "showMessenger", { "sync": true }, arguments); };
    NativeKeyboardOriginal.prototype.hideMessenger = function (options) { return cordova(this, "hideMessenger", { "sync": true }, arguments); };
    NativeKeyboardOriginal.prototype.showMessengerKeyboard = function () { return cordova(this, "showMessengerKeyboard", {}, arguments); };
    NativeKeyboardOriginal.prototype.hideMessengerKeyboard = function () { return cordova(this, "hideMessengerKeyboard", {}, arguments); };
    NativeKeyboardOriginal.prototype.updateMessenger = function (options) { return cordova(this, "updateMessenger", {}, arguments); };
    NativeKeyboardOriginal.pluginName = "NativeKeyboard";
    NativeKeyboardOriginal.plugin = "cordova-plugin-native-keyboard";
    NativeKeyboardOriginal.pluginRef = "NativeKeyboard";
    NativeKeyboardOriginal.repo = "https://github.com/EddyVerbruggen/cordova-plugin-native-keyboard";
    NativeKeyboardOriginal.platforms = ["Android", "iOS"];
    return NativeKeyboardOriginal;
}(IonicNativePlugin));
var NativeKeyboard = new NativeKeyboardOriginal();
export { NativeKeyboard };
//# sourceMappingURL=data:application/json;base64,