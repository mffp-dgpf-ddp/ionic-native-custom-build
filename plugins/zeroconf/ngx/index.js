import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Zeroconf = /** @class */ (function (_super) {
    __extends(Zeroconf, _super);
    function Zeroconf() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zeroconf.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    Zeroconf.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    Zeroconf.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    Zeroconf.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    Zeroconf.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    Zeroconf.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    Zeroconf.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Zeroconf.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    Zeroconf.pluginName = "Zeroconf";
    Zeroconf.plugin = "cordova-plugin-zeroconf";
    Zeroconf.pluginRef = "cordova.plugins.zeroconf";
    Zeroconf.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    Zeroconf.platforms = ["Android", "iOS"];
    Zeroconf = __decorate([
        Injectable()
    ], Zeroconf);
    return Zeroconf;
}(IonicNativePlugin));
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3plcm9jb25mL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkRKLDRCQUFpQjs7OztJQU03Qyw4QkFBVztJQWNYLDJCQUFRLGFBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFNBQWM7SUFZakYsNkJBQVUsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7SUFTckQsdUJBQUk7SUFlSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBV2xDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFTcEMsd0JBQUs7SUFTTCx5QkFBTTs7Ozs7O0lBckZLLFFBQVE7UUFEcEIsVUFBVSxFQUFFO09BQ0EsUUFBUTttQkE3RHJCO0VBNkQ4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWmVyb2NvbmZTZXJ2aWNlIHtcclxuICBkb21haW46IHN0cmluZztcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBvcnQ6IG51bWJlcjtcclxuICBob3N0bmFtZTogc3RyaW5nO1xyXG4gIGlwdjRBZGRyZXNzZXM6IHN0cmluZ1tdO1xyXG4gIGlwdjZBZGRyZXNzZXM6IHN0cmluZ1tdO1xyXG4gIHR4dFJlY29yZDogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mUmVzdWx0IHtcclxuICBhY3Rpb246ICdyZWdpc3RlcmVkJyB8ICdhZGRlZCcgfCAncmVtb3ZlZCcgfCAncmVzb2x2ZWQnO1xyXG4gIHNlcnZpY2U6IFplcm9jb25mU2VydmljZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFplcm9jb25mXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIGJyb3dzZSBhbmQgcHVibGlzaCBaZXJvY29uZi9Cb25qb3VyL21ETlMgc2VydmljZXMuXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFplcm9jb25mIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS96ZXJvY29uZi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHplcm9jb25mOiBaZXJvY29uZikgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvLyB3YXRjaCBmb3Igc2VydmljZXMgb2YgYSBzcGVjaWZpZWQgdHlwZVxyXG4gKiB0aGlzLnplcm9jb25mLndhdGNoKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICogICBpZiAocmVzdWx0LmFjdGlvbiA9PSAnYWRkZWQnKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZygnc2VydmljZSBhZGRlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcclxuICogICB9IGVsc2Uge1xyXG4gKiAgICAgY29uc29sZS5sb2coJ3NlcnZpY2UgcmVtb3ZlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcclxuICogICB9XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiAvLyBwdWJsaXNoIGEgemVyb2NvbmYgc2VydmljZSBvZiB5b3VyIG93blxyXG4gKiB0aGlzLnplcm9jb25mLnJlZ2lzdGVyKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nLCAnQmVjdmVydFxcJ3MgaVBhZCcsIDgwLCB7XHJcbiAqICAgJ2Zvbyc6ICdiYXInXHJcbiAqIH0pLnRoZW4ocmVzdWx0ID0+IHtcclxuICogICBjb25zb2xlLmxvZygnU2VydmljZSByZWdpc3RlcmVkJywgcmVzdWx0LnNlcnZpY2UpO1xyXG4gKiB9KTtcclxuICpcclxuICpcclxuICogLy8gdW5yZWdpc3RlciB5b3VyIHNlcnZpY2VcclxuICogdGhpcy56ZXJvY29uZi51bnJlZ2lzdGVyKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nLCAnQmVjdmVydFxcJ3MgaVBhZCcpO1xyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdaZXJvY29uZicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4temVyb2NvbmYnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy56ZXJvY29uZicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9iZWN2ZXJ0L2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgWmVyb2NvbmYgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGlzIGRldmljZSdzIGhvc3RuYW1lLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SG9zdG5hbWUoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFB1Ymxpc2hlcyBhIG5ldyBzZXJ2aWNlLlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXHJcbiAgICogQHBhcmFtIHBvcnQge251bWJlcn0gTG9jYWwgcG9ydCBvbiB3aGljaCB0aGUgc2VydmljZSBydW5zLlxyXG4gICAqIEBwYXJhbSB0eHRSZWNvcmQge2FueX0gQXJiaXRyYXJ5IGtleS92YWx1ZSBwYWlycyBkZXNjcmliaW5nIHRoZSBzZXJ2aWNlLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8WmVyb2NvbmZSZXN1bHQ+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlZ2lzdGVyZWQgc2VydmljZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXIodHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZywgbmFtZTogc3RyaW5nLCBwb3J0OiBudW1iZXIsIHR4dFJlY29yZDogYW55KTogUHJvbWlzZTxaZXJvY29uZlJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5yZWdpc3RlcnMgYSBzZXJ2aWNlLlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdW5yZWdpc3Rlcih0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXJzIGFsbCBwdWJsaXNoZWQgc2VydmljZXMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB3YXRjaGluZyBmb3Igc2VydmljZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlLlxyXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxyXG4gICAqIEBwYXJhbSBkb21haW4ge3N0cmluZ30gRG9tYWluIHNjb3BlIG9mIHRoZSBzZXJ2aWNlLCB0eXBpY2FsbHkgXCJsb2NhbC5cIi5cclxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPFplcm9jb25mUmVzdWx0Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgb2YgZWFjaCBzZXJ2aWNlIGFkZGVkIG9yIHJlbW92ZWQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICd1bndhdGNoJyxcclxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXHJcbiAgfSlcclxuICB3YXRjaCh0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxaZXJvY29uZlJlc3VsdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcHMgd2F0Y2hpbmcgZm9yIHNlcnZpY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cclxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdW53YXRjaCh0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZXMgdGhlIHNlcnZpY2UgYnJvd3NlciBhbmQgc3RvcHMgd2F0Y2hpbmcuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZS1pbml0aWFsaXplcyB0aGUgcGx1Z2luIHRvIGNsZWFuIHNlcnZpY2UgJiBicm93c2VyIHN0YXRlLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlSW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogRmFtaWx5IG9mIGFkZHJlc3NlcyB0byByZWdpc3RlcjogaXB2NCwgaXB2NiBvciBhbnkuXHJcbiAgICovXHJcbiAgcmVnaXN0ZXJBZGRyZXNzRmFtaWx5OiAnaXB2NCcgfCAnaXB2NicgfCAnYW55JztcclxuICAvKipcclxuICAgKiBGYW1pbHkgb2YgYWRkcmVzc2VzIHRvIHdhdGNoIGZvcjogaXB2NCwgaXB2NiBvciBhbnkuXHJcbiAgICovXHJcbiAgd2F0Y2hBZGRyZXNzRmFtaWx5OiAnaXB2NCcgfCAnaXB2NicgfCAnYW55JztcclxufVxyXG4iXX0=