var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ZeroconfOriginal = /** @class */ (function (_super) {
    __extends(ZeroconfOriginal, _super);
    function ZeroconfOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZeroconfOriginal.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    ZeroconfOriginal.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    ZeroconfOriginal.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    ZeroconfOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    ZeroconfOriginal.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    ZeroconfOriginal.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    ZeroconfOriginal.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    ZeroconfOriginal.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    ZeroconfOriginal.pluginName = "Zeroconf";
    ZeroconfOriginal.plugin = "cordova-plugin-zeroconf";
    ZeroconfOriginal.pluginRef = "cordova.plugins.zeroconf";
    ZeroconfOriginal.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    ZeroconfOriginal.platforms = ["Android", "iOS"];
    return ZeroconfOriginal;
}(IonicNativePlugin));
var Zeroconf = new ZeroconfOriginal();
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3plcm9jb25mL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkRKLDRCQUFpQjs7OztJQU03Qyw4QkFBVztJQWNYLDJCQUFRLGFBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFNBQWM7SUFZakYsNkJBQVUsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7SUFTckQsdUJBQUk7SUFlSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBV2xDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFTcEMsd0JBQUs7SUFTTCx5QkFBTTs7Ozs7O21CQWxKUjtFQTZEOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFplcm9jb25mU2VydmljZSB7XHJcbiAgZG9tYWluOiBzdHJpbmc7XHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBwb3J0OiBudW1iZXI7XHJcbiAgaG9zdG5hbWU6IHN0cmluZztcclxuICBpcHY0QWRkcmVzc2VzOiBzdHJpbmdbXTtcclxuICBpcHY2QWRkcmVzc2VzOiBzdHJpbmdbXTtcclxuICB0eHRSZWNvcmQ6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlJlc3VsdCB7XHJcbiAgYWN0aW9uOiAncmVnaXN0ZXJlZCcgfCAnYWRkZWQnIHwgJ3JlbW92ZWQnIHwgJ3Jlc29sdmVkJztcclxuICBzZXJ2aWNlOiBaZXJvY29uZlNlcnZpY2U7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBaZXJvY29uZlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBicm93c2UgYW5kIHB1Ymxpc2ggWmVyb2NvbmYvQm9uam91ci9tRE5TIHNlcnZpY2VzLlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBaZXJvY29uZiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvemVyb2NvbmYvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB6ZXJvY29uZjogWmVyb2NvbmYpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy8gd2F0Y2ggZm9yIHNlcnZpY2VzIG9mIGEgc3BlY2lmaWVkIHR5cGVcclxuICogdGhpcy56ZXJvY29uZi53YXRjaCgnX2h0dHAuX3RjcC4nLCAnbG9jYWwuJykuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAqICAgaWYgKHJlc3VsdC5hY3Rpb24gPT0gJ2FkZGVkJykge1xyXG4gKiAgICAgY29uc29sZS5sb2coJ3NlcnZpY2UgYWRkZWQnLCByZXN1bHQuc2VydmljZSk7XHJcbiAqICAgfSBlbHNlIHtcclxuICogICAgIGNvbnNvbGUubG9nKCdzZXJ2aWNlIHJlbW92ZWQnLCByZXN1bHQuc2VydmljZSk7XHJcbiAqICAgfVxyXG4gKiB9KTtcclxuICpcclxuICogLy8gcHVibGlzaCBhIHplcm9jb25mIHNlcnZpY2Ugb2YgeW91ciBvd25cclxuICogdGhpcy56ZXJvY29uZi5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnLCA4MCwge1xyXG4gKiAgICdmb28nOiAnYmFyJ1xyXG4gKiB9KS50aGVuKHJlc3VsdCA9PiB7XHJcbiAqICAgY29uc29sZS5sb2coJ1NlcnZpY2UgcmVnaXN0ZXJlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcclxuICogfSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIHVucmVnaXN0ZXIgeW91ciBzZXJ2aWNlXHJcbiAqIHRoaXMuemVyb2NvbmYudW5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnKTtcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnWmVyb2NvbmYnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXplcm9jb25mJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuemVyb2NvbmYnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYmVjdmVydC9jb3Jkb3ZhLXBsdWdpbi16ZXJvY29uZicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFplcm9jb25mIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhpcyBkZXZpY2UncyBob3N0bmFtZS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEhvc3RuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQdWJsaXNoZXMgYSBuZXcgc2VydmljZS5cclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cclxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXHJcbiAgICogQHBhcmFtIG5hbWUge3N0cmluZ30gVW5xdWFsaWZpZWQgc2VydmljZSBpbnN0YW5jZSBuYW1lLlxyXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IExvY2FsIHBvcnQgb24gd2hpY2ggdGhlIHNlcnZpY2UgcnVucy5cclxuICAgKiBAcGFyYW0gdHh0UmVjb3JkIHthbnl9IEFyYml0cmFyeSBrZXkvdmFsdWUgcGFpcnMgZGVzY3JpYmluZyB0aGUgc2VydmljZS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFplcm9jb25mUmVzdWx0Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZWdpc3RlcmVkIHNlcnZpY2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcG9ydDogbnVtYmVyLCB0eHRSZWNvcmQ6IGFueSk6IFByb21pc2U8WmVyb2NvbmZSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXJzIGEgc2VydmljZS5cclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cclxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXHJcbiAgICogQHBhcmFtIG5hbWUge3N0cmluZ30gVW5xdWFsaWZpZWQgc2VydmljZSBpbnN0YW5jZSBuYW1lLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVucmVnaXN0ZXIodHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZywgbmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbnJlZ2lzdGVycyBhbGwgcHVibGlzaGVkIHNlcnZpY2VzLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdGFydHMgd2F0Y2hpbmcgZm9yIHNlcnZpY2VzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cclxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cclxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxaZXJvY29uZlJlc3VsdD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIG9mIGVhY2ggc2VydmljZSBhZGRlZCBvciByZW1vdmVkLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAndW53YXRjaCcsXHJcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxyXG4gIH0pXHJcbiAgd2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IE9ic2VydmFibGU8WmVyb2NvbmZSZXN1bHQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXHJcbiAgICogQHBhcmFtIHR5cGUge3N0cmluZ30gU2VydmljZSB0eXBlIG5hbWUsIGUuZy4gXCJfaHR0cC5fdGNwXCIuXHJcbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHVud2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2VzIHRoZSBzZXJ2aWNlIGJyb3dzZXIgYW5kIHN0b3BzIHdhdGNoaW5nLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmUtaW5pdGlhbGl6ZXMgdGhlIHBsdWdpbiB0byBjbGVhbiBzZXJ2aWNlICYgYnJvd3NlciBzdGF0ZS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZUluaXQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEZhbWlseSBvZiBhZGRyZXNzZXMgdG8gcmVnaXN0ZXI6IGlwdjQsIGlwdjYgb3IgYW55LlxyXG4gICAqL1xyXG4gIHJlZ2lzdGVyQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XHJcbiAgLyoqXHJcbiAgICogRmFtaWx5IG9mIGFkZHJlc3NlcyB0byB3YXRjaCBmb3I6IGlwdjQsIGlwdjYgb3IgYW55LlxyXG4gICAqL1xyXG4gIHdhdGNoQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XHJcbn1cclxuIl19