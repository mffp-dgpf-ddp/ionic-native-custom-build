var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaInstance, checkAvailability } from '@ionic-native/core';
var FlurryAnalyticsObject = /** @class */ (function () {
    function FlurryAnalyticsObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    FlurryAnalyticsObject.prototype.logEvent = function (eventName, params) { return cordovaInstance(this, "logEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.startTimedEvent = function (eventName, params) { return cordovaInstance(this, "startTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.endTimedEvent = function (eventName, params) { return cordovaInstance(this, "endTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.logError = function (code, message) { return cordovaInstance(this, "logError", {}, arguments); };
    FlurryAnalyticsObject.prototype.logPageView = function () { return cordovaInstance(this, "logPageView", {}, arguments); };
    FlurryAnalyticsObject.prototype.setLocation = function (location, message) { return cordovaInstance(this, "setLocation", {}, arguments); };
    FlurryAnalyticsObject.prototype.startSession = function () { return cordovaInstance(this, "startSession", {}, arguments); };
    FlurryAnalyticsObject.prototype.endSession = function () { return cordovaInstance(this, "endSession", {}, arguments); };
    return FlurryAnalyticsObject;
}());
export { FlurryAnalyticsObject };
var FlurryAnalyticsOriginal = /** @class */ (function (_super) {
    __extends(FlurryAnalyticsOriginal, _super);
    function FlurryAnalyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new instance of FlurryAnalyticsObject
     * @param {FlurryAnalyticsOptions} options Options
     * @return {FlurryAnalyticsObject}
     */
    FlurryAnalyticsOriginal.prototype.create = function (options) {
        var instance;
        if (checkAvailability(FlurryAnalyticsOriginal.pluginRef, null, FlurryAnalyticsOriginal.pluginName) === true) {
            instance = new window.FlurryAnalytics(options);
        }
        return new FlurryAnalyticsObject(instance);
    };
    FlurryAnalyticsOriginal.pluginName = "FlurryAnalytics";
    FlurryAnalyticsOriginal.plugin = "cordova-plugin-flurryanalytics";
    FlurryAnalyticsOriginal.pluginRef = "FlurryAnalytics";
    FlurryAnalyticsOriginal.repo = "https://github.com/blakgeek/cordova-plugin-flurryanalytics";
    FlurryAnalyticsOriginal.platforms = ["Android", "iOS"];
    return FlurryAnalyticsOriginal;
}(IonicNativePlugin));
var FlurryAnalytics = new FlurryAnalyticsOriginal();
export { FlurryAnalytics };
//# sourceMappingURL=data:application/json;base64,