import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaInstance, checkAvailability } from '@ionic-native/core';
var FlurryAnalyticsObject = /** @class */ (function () {
    function FlurryAnalyticsObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    FlurryAnalyticsObject.prototype.logEvent = function (eventName, params) { return cordovaInstance(this, "logEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.startTimedEvent = function (eventName, params) { return cordovaInstance(this, "startTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.endTimedEvent = function (eventName, params) { return cordovaInstance(this, "endTimedEvent", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FlurryAnalyticsObject.prototype.logError = function (code, message) { return cordovaInstance(this, "logError", {}, arguments); };
    FlurryAnalyticsObject.prototype.logPageView = function () { return cordovaInstance(this, "logPageView", {}, arguments); };
    FlurryAnalyticsObject.prototype.setLocation = function (location, message) { return cordovaInstance(this, "setLocation", {}, arguments); };
    FlurryAnalyticsObject.prototype.startSession = function () { return cordovaInstance(this, "startSession", {}, arguments); };
    FlurryAnalyticsObject.prototype.endSession = function () { return cordovaInstance(this, "endSession", {}, arguments); };
    return FlurryAnalyticsObject;
}());
export { FlurryAnalyticsObject };
var FlurryAnalytics = /** @class */ (function (_super) {
    __extends(FlurryAnalytics, _super);
    function FlurryAnalytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new instance of FlurryAnalyticsObject
     * @param {FlurryAnalyticsOptions} options Options
     * @return {FlurryAnalyticsObject}
     */
    FlurryAnalytics.prototype.create = function (options) {
        var instance;
        if (checkAvailability(FlurryAnalytics.pluginRef, null, FlurryAnalytics.pluginName) === true) {
            instance = new window.FlurryAnalytics(options);
        }
        return new FlurryAnalyticsObject(instance);
    };
    FlurryAnalytics.pluginName = "FlurryAnalytics";
    FlurryAnalytics.plugin = "cordova-plugin-flurryanalytics";
    FlurryAnalytics.pluginRef = "FlurryAnalytics";
    FlurryAnalytics.repo = "https://github.com/blakgeek/cordova-plugin-flurryanalytics";
    FlurryAnalytics.platforms = ["Android", "iOS"];
    FlurryAnalytics = __decorate([
        Injectable()
    ], FlurryAnalytics);
    return FlurryAnalytics;
}(IonicNativePlugin));
export { FlurryAnalytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZsdXJyeS1hbmFseXRpY3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sc0NBQThDLGlCQUFpQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0lBNkVqRywrQkFBb0IsZUFBb0I7UUFBcEIsb0JBQWUsR0FBZixlQUFlLENBQUs7SUFBRyxDQUFDO0lBWTVDLHdDQUFRLGFBQUMsU0FBaUIsRUFBRSxNQUFZO0lBY3hDLCtDQUFlLGFBQUMsU0FBaUIsRUFBRSxNQUFlO0lBY2xELDZDQUFhLGFBQUMsU0FBaUIsRUFBRSxNQUFlO0lBV2hELHdDQUFRLGFBQUMsSUFBUyxFQUFFLE9BQVk7SUFTaEMsMkNBQVc7SUFZWCwyQ0FBVyxhQUFDLFFBQWlDLEVBQUUsT0FBZTtJQVU5RCw0Q0FBWTtJQVVaLDBDQUFVO2dDQTFLWjs7OztJQXVOcUMsbUNBQWlCOzs7O0lBQ3BEOzs7O09BSUc7SUFDSCxnQ0FBTSxHQUFOLFVBQU8sT0FBK0I7UUFDcEMsSUFBSSxRQUFhLENBQUM7UUFFbEIsSUFBSSxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxlQUFlLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzNGLFFBQVEsR0FBRyxJQUFLLE1BQWMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekQ7UUFFRCxPQUFPLElBQUkscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBZFUsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlOzBCQXZONUI7RUF1TnFDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhSW5zdGFuY2UsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4sIGNoZWNrQXZhaWxhYmlsaXR5IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmx1cnJ5QW5hbHl0aWNzT3B0aW9ucyB7XHJcbiAgLyoqIEZsdXJyeSBBUEkga2V5IGlzIHJlcXVpcmVkICovXHJcbiAgYXBwS2V5OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogT3ZlcnJpZGVzIHRoZSB2ZXJzaW9uIG9mIHRoZSBhcHBcclxuICAgKi9cclxuICB2ZXJzaW9uPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEhvdyBsb25nIGNhbiB0aGUgYXBwIGJlIHBhdXNlZCBiZWZvcmUgYSBuZXcgc2Vzc2lvbiBpcyBjcmVhdGVkLFxyXG4gICAqIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGZpdmUgZm9yIEFuZHJvaWQgZGV2aWNlc1xyXG4gICAqL1xyXG4gIGNvbnRpbnVlU2Vzc2lvblNlY29uZHM/OiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogU2V0IGlkIG9mIHRoZSB1c2VyXHJcbiAgICovXHJcbiAgdXNlcklkPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNldCBnZW5kZXIgb2YgdGhlIHVzZXJcclxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlIFwibVwiLCBcIk1cIiwgXCJmXCIgYW5kIFwiRlwiXHJcbiAgICovXHJcbiAgZ2VuZGVyPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFNldCBhZ2Ugb2YgdGhlIHVzZXJcclxuICAgKi9cclxuICBhZ2U/OiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogU2V0IGVycm9yIGZvciBsb2dcclxuICAgKiBWYWx1ZXM6IFZFUkJPU0UsIERFQlVHLCBJTkZPLCBXQVJOLCBFUlJPUlxyXG4gICAqL1xyXG4gIGxvZ0xldmVsPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlXHJcbiAgICovXHJcbiAgZW5hYmxlTG9nZ2luZz86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogU2hvdWxkIGV2ZXJ5IGV2ZW50IHNob3cgdXAgdGhlIGFwcCdzIGxvZywgZGVmYXVsdHMgdG8gdHJ1ZVxyXG4gICAqL1xyXG4gIGVuYWJsZUV2ZW50TG9nZ2luZz86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogU2hvdWxkIGFwcCBjcmFzaGVzIGJlIHJlY29yZGVkIGluIGZsdXJyeSwgZGVmYXVsdHMgdG8gZmFsc2UsIGlPUyBvbmx5XHJcbiAgICovXHJcbiAgZW5hYmxlQ3Jhc2hSZXBvcnRpbmc/OiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIFNob3VsZCB0aGUgc2Vzc2lvbiBjb250aW51ZSB3aGVuIHRoZSBhcHAgaXMgdGhlIGJhY2tncm91bmQsIGRlZmF1bHRzIHRvIGZhbHNlLCBpT1Mgb25seVxyXG4gICAqL1xyXG4gIGVuYWJsZUJhY2tncm91bmRTZXNzaW9ucz86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogU2hvdWxkIGRhdGEgYmUgcHVzaGVkIHRvIGZsdXJyeSB3aGVuIHRoZSBhcHAgY2xvc2VzLCBkZWZhdWx0cyB0byB0cnVlLCBpT1Mgb25seVxyXG4gICAqL1xyXG4gIHJlcG9ydFNlc3Npb25zT25DbG9zZT86IGJvb2xlYW47XHJcbiAgLyoqXHJcbiAgICogU2hvdWxkIGRhdGEgYmUgcHVzaGVkIHRvIGZsdXJyeSB3aGVuIHRoZSBhcHAgaXMgcGF1c2VkLCBkZWZhdWx0cyB0byB0cnVlLCBpT1Mgb25seVxyXG4gICAqL1xyXG4gIHJlcG9ydFNlc3Npb25zT25QYXVzZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmx1cnJ5QW5hbHl0aWNzTG9jYXRpb24ge1xyXG4gIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogU2V0IGFsdGl0dWRlXHJcbiAgICogSXQgaXMgb3B0aW9uYWwgYW5kIHVzZSBvbmx5IGZvciBpT1NcclxuICAgKi9cclxuICB2ZXJ0aWNhbEFjY3VyYWN5PzogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFNldCByYWRpdXMgYWJvdXQgMmQgcG9pbnRcclxuICAgKiBJdCBpcyBvcHRpb25hbCBhbmQgdXNlIG9ubHkgZm9yIGlPU1xyXG4gICAqL1xyXG4gIGhvcml6b250YWxBY2N1cmFjeT86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGbHVycnlBbmFseXRpY3NPYmplY3Qge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX29iamVjdEluc3RhbmNlOiBhbnkpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gc2V0IHRoZSBFdmVudFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnRcclxuICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtc10gT3B0aW9uYWwgcGFyYW1zXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gZXZlbnQgaXMgc2VudFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAyLFxyXG4gICAgZXJyb3JJbmRleDogMyxcclxuICB9KVxyXG4gIGxvZ0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBwYXJhbXM/OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnQgYSB0aW1lZCBldmVudFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnRcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IE9wdGlvbmFsIHBhcmFtc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRpbWVkIGV2ZW50IGlzIHN0YXJ0ZWQgdHJhY2tpbmdcclxuICAgKi9cclxuICBAQ29yZG92YUluc3RhbmNlKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMixcclxuICAgIGVycm9ySW5kZXg6IDMsXHJcbiAgfSlcclxuICBzdGFydFRpbWVkRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIHBhcmFtcz86IE9iamVjdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wbGV0ZSBhIHRpbWVkIGV2ZW50XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIHRoZSBldmVudFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zXSBPcHRpb25hbCBwYXJhbXNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aW1lZCBldmVudCBpcyBlbmRlZCB0cmFja2luZ1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAyLFxyXG4gICAgZXJyb3JJbmRleDogMyxcclxuICB9KVxyXG4gIGVuZFRpbWVkRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcsIHBhcmFtcz86IE9iamVjdCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGxvZyBhbiBlcnJvclxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb2RlXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmFJbnN0YW5jZSgpXHJcbiAgbG9nRXJyb3IoY29kZTogYW55LCBtZXNzYWdlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiBsb2cgYSBwYWdlIHZpZXdcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmFJbnN0YW5jZSgpXHJcbiAgbG9nUGFnZVZpZXcoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gc2V0IHRoZSBsb2NhdGlvbiBmb3IgdGhlIGV2ZW50XHJcbiAgICogKHRoaXMgaXMgd2lsbCBvbmx5IGJlIHVzZWQgZm9yIHZlcnkgY291cnNlIGdyYWluZWQgc3RhdGlzdGljcyBsaWtlIGNpdHkpXHJcbiAgICogQHBhcmFtIHtGbHVycnlBbmFseXRpY3NMb2NhdGlvbn0gbG9jYXRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YUluc3RhbmNlKClcclxuICBzZXRMb2NhdGlvbihsb2NhdGlvbjogRmx1cnJ5QW5hbHl0aWNzTG9jYXRpb24sIG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHN0YXJ0IHRoZSBzZXNzaW9uXHJcbiAgICogT25seSBuZWVkZWQgZm9yIG9sZGVyIHZlcnNpb25zIG9mIEFuZHJvaWRcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmFJbnN0YW5jZSgpXHJcbiAgc3RhcnRTZXNzaW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIGVuZCB0aGUgc2Vzc2lvblxyXG4gICAqIE9ubHkgbmVlZGVkIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBBbmRyb2lkXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxyXG4gIGVuZFNlc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBGbHVycnkgQW5hbHl0aWNzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBjb25uZWN0cyB0byBGbHVycnkgQW5hbHl0aWNzIFNES1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGbHVycnlBbmFseXRpY3MsIEZsdXJyeUFuYWx5dGljc09iamVjdCwgRmx1cnJ5QW5hbHl0aWNzT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmx1cnJ5LWFuYWx5dGljcy9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZsdXJyeUFuYWx5dGljczogRmx1cnJ5QW5hbHl0aWNzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGNvbnN0IG9wdGlvbnM6IEZsdXJyeUFuYWx5dGljc09wdGlvbnMgPSB7XHJcbiAqICBhcHBLZXk6ICc8eW91ciBhcHAga2V5PicsIC8vIFJFUVVJUkVEXHJcbiAqICByZXBvcnRTZXNzaW9uc09uQ2xvc2U6IHRydWUsXHJcbiAqICBlbmFibGVMb2dnaW5nOiB0cnVlXHJcbiAqIH1cclxuICpcclxuICogbGV0IGZhOiBGbHVycnlBbmFseXRpY3NPYmplY3QgPSB0aGlzLmZsdXJyeUFuYWx5dGljcy5jcmVhdGUob3B0aW9ucyk7XHJcbiAqXHJcbiAqIGZhLmxvZ0V2ZW50KCdldmVudCBuYW1lJylcclxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTG9nZ2VkIGFuIGV2ZW50IScpKVxyXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKCdFcnJvciBsb2dnaW5nIHRoZSBldmVudCcsIGUpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEZsdXJyeUFuYWx5dGljc09wdGlvbnNcclxuICogRmx1cnJ5QW5hbHl0aWNzTG9jYXRpb25cclxuICogQGNsYXNzZXNcclxuICogRmx1cnJ5QW5hbHl0aWNzT2JqZWN0XHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRmx1cnJ5QW5hbHl0aWNzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mbHVycnlhbmFseXRpY3MnLFxyXG4gIHBsdWdpblJlZjogJ0ZsdXJyeUFuYWx5dGljcycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ibGFrZ2Vlay9jb3Jkb3ZhLXBsdWdpbi1mbHVycnlhbmFseXRpY3MnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGbHVycnlBbmFseXRpY3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBGbHVycnlBbmFseXRpY3NPYmplY3RcclxuICAgKiBAcGFyYW0ge0ZsdXJyeUFuYWx5dGljc09wdGlvbnN9IG9wdGlvbnMgT3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge0ZsdXJyeUFuYWx5dGljc09iamVjdH1cclxuICAgKi9cclxuICBjcmVhdGUob3B0aW9uczogRmx1cnJ5QW5hbHl0aWNzT3B0aW9ucyk6IEZsdXJyeUFuYWx5dGljc09iamVjdCB7XHJcbiAgICBsZXQgaW5zdGFuY2U6IGFueTtcclxuXHJcbiAgICBpZiAoY2hlY2tBdmFpbGFiaWxpdHkoRmx1cnJ5QW5hbHl0aWNzLnBsdWdpblJlZiwgbnVsbCwgRmx1cnJ5QW5hbHl0aWNzLnBsdWdpbk5hbWUpID09PSB0cnVlKSB7XHJcbiAgICAgIGluc3RhbmNlID0gbmV3ICh3aW5kb3cgYXMgYW55KS5GbHVycnlBbmFseXRpY3Mob3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBGbHVycnlBbmFseXRpY3NPYmplY3QoaW5zdGFuY2UpO1xyXG4gIH1cclxufVxyXG4iXX0=