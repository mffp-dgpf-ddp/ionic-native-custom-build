var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var AppRateOriginal = /** @class */ (function (_super) {
    __extends(AppRateOriginal, _super);
    function AppRateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRateOriginal.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRateOriginal.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRateOriginal.prototype, "preferences", {
        get: function () { return cordovaPropertyGet(this, "preferences"); },
        set: function (value) { cordovaPropertySet(this, "preferences", value); },
        enumerable: true,
        configurable: true
    });
    AppRateOriginal.pluginName = "AppRate";
    AppRateOriginal.plugin = "cordova-plugin-apprate";
    AppRateOriginal.pluginRef = "AppRate";
    AppRateOriginal.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRateOriginal.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    return AppRateOriginal;
}(IonicNativePlugin));
var AppRate = new AppRateOriginal();
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1yYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHNFQUF1RCxNQUFNLG9CQUFvQixDQUFDOztJQTZMNUQsMkJBQWlCOzs7O0lBYTVDLGlDQUFlLGFBQUMsV0FBb0I7SUFNcEMsb0NBQWtCOzBCQWJsQixnQ0FBVzs7Ozs7Ozs7Ozs7a0JBcE1iO0VBOEw2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXBwUmF0ZVByZWZlcmVuY2VzIHtcclxuICAvKipcclxuICAgKiBDdXN0b20gQkNQIDQ3IGxhbmd1YWdlIHRhZ1xyXG4gICAqL1xyXG4gIHVzZUxhbmd1YWdlPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBDdXN0b20gYXBwbGljYXRpb24gdGl0bGVcclxuICAgKi9cclxuICBkaXNwbGF5QXBwTmFtZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBkaWFsb2cgYWdhaW4gd2hlbiBhcHBsaWNhdGlvbiB2ZXJzaW9uIHdpbGwgYmUgdXBkYXRlZC4gRGVmYXVsdHMgdG8gYHRydWVgXHJcbiAgICovXHJcbiAgcHJvbXB0QWdhaW5Gb3JFYWNoTmV3VmVyc2lvbj86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIGNvdW50IG9mIHJ1bnMgb2YgYXBwbGljYXRpb24gYmVmb3JlIGRpYWxvZyB3aWxsIGJlIGRpc3BsYXllZC4gRGVmYXVsdHMgdG8gYDNgXHJcbiAgICovXHJcbiAgdXNlc1VudGlsUHJvbXB0PzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBTaW1wbGUgTW9kZSB0byBkaXNwbGF5IHRoZSByYXRlIGRpYWxvZyBkaXJlY3RseSBhbmQgYnlwYXNzIG5lZ2F0aXZlIGZlZWRiYWNrIGZpbHRlcmluZyBmbG93XHJcbiAgICovXHJcbiAgc2ltcGxlTW9kZT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIGxlYXZlIGFwcCBvciBubyB3aGVuIGFwcGxpY2F0aW9uIHBhZ2Ugb3BlbmVkIGluIGFwcCBzdG9yZSAobm93IHN1cHBvcnRlZCBvbmx5IGZvciBpT1MpLiBEZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICovXHJcbiAgaW5BcHBSZXZpZXc/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiB1c2UgY3VzdG9tIHZpZXcgZm9yIHJhdGUgZGlhbG9nLiBEZWZhdWx0cyB0byBgZmFsc2VgXHJcbiAgICovXHJcbiAgdXNlQ3VzdG9tUmF0ZURpYWxvZz86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1c3RvbSBsb2NhbGUgb2JqZWN0XHJcbiAgICovXHJcbiAgY3VzdG9tTG9jYWxlPzogQXBwUmF0ZUN1c3RvbUxvY2FsZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGJhY2tzIGZvciBldmVudHNcclxuICAgKi9cclxuICBjYWxsYmFja3M/OiBBcHBSYXRlQ2FsbGJhY2tzO1xyXG5cclxuICAvKipcclxuICAgKiBBcHAgU3RvcmUgVVJMU1xyXG4gICAqL1xyXG4gIHN0b3JlQXBwVVJMPzogQXBwVXJscztcclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiBVUkwgZnVuY3Rpb25cclxuICAgKi9cclxuICBvcGVuVXJsPzogKHVybDogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xyXG4gIC8qKiBUaXRsZSAqL1xyXG4gIHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKiogTWVzc2FnZSAqL1xyXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBDYW5jZWwgYnV0dG9uIGxhYmVsICovXHJcbiAgY2FuY2VsQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBMYXRlciBidXR0b24gbGFiZWwgKi9cclxuICBsYXRlckJ1dHRvbkxhYmVsPzogc3RyaW5nO1xyXG5cclxuICAvKiogUmF0ZSBidXR0b24gbGFiZWwgKi9cclxuICByYXRlQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBZZXMgYnV0dG9uIGxhYmVsICovXHJcbiAgeWVzQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBObyBidXR0b24gbGFiZWwgKi9cclxuICBub0J1dHRvbkxhYmVsPzogc3RyaW5nO1xyXG5cclxuICAvKiogQXBwIHJhdGUgcHJvbXB0IHRpdGxlICovXHJcbiAgYXBwUmF0ZVByb21wdFRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAvKiogRmVlZGJhY2sgcHJvbXB0IHRpdGxlICovXHJcbiAgZmVlZGJhY2tQcm9tcHRUaXRsZT86IHN0cmluZztcclxuXHJcbiAgLyoqIEZlZWRiYWNrIHByb21wdCBtZXNzYWdlICovXHJcbiAgYXBwUmF0ZVByb21wdE1lc3NhZ2U/OiBzdHJpbmc7XHJcblxyXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xyXG4gIGZlZWRiYWNrUHJvbXB0TWVzc2FnZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBSYXRlQ2FsbGJhY2tzIHtcclxuICAvKipcclxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiByYXRlLWRpYWxvZyBidXR0b25zXHJcbiAgICovXHJcbiAgb25CdXR0b25DbGlja2VkPzogRnVuY3Rpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZ1xyXG4gICAqL1xyXG4gIG9uUmF0ZURpYWxvZ1Nob3c/OiBGdW5jdGlvbjtcclxuICAvKipcclxuICAgKiBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiBuZWdhdGl2ZSBmZWVkYmFja1xyXG4gICAqL1xyXG4gIGhhbmRsZU5lZ2F0aXZlRmVlZGJhY2s/OiBGdW5jdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcHBVcmxzIHtcclxuICAvKipcclxuICAgKiBhcHBsaWNhdGlvbiBpZCBpbiBBcHBTdG9yZVxyXG4gICAqL1xyXG4gIGlvcz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogYXBwbGljYXRpb24gVVJMIGluIEdvb2dsZVBsYXlcclxuICAgKi9cclxuICBhbmRyb2lkPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93cyBTdG9yZVxyXG4gICAqL1xyXG4gIHdpbmRvd3M/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBBcHBXb3JsZFxyXG4gICAqL1xyXG4gIGJsYWNrYmVycnk/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBXaW5kb3dzU3RvcmVcclxuICAgKi9cclxuICB3aW5kb3dzOD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFwcCBSYXRlXHJcbiAqIEBwcmVtaWVyIGFwcC1yYXRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgQXBwUmF0ZSBwbHVnaW4gbWFrZXMgaXQgZWFzeSB0byBwcm9tcHQgdGhlIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCwgZWl0aGVyIG5vdywgbGF0ZXIsIG9yIG5ldmVyLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tYXBwcmF0ZS4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0FwcFJhdGUgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9wdXNoYW5kcGxheS9jb3Jkb3ZhLXBsdWdpbi1hcHByYXRlKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQXBwUmF0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYXBwLXJhdGUvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBhcHBSYXRlOiBBcHBSYXRlKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqIC8vIHNldCBjZXJ0YWluIHByZWZlcmVuY2VzXHJcbiAqIHRoaXMuYXBwUmF0ZS5wcmVmZXJlbmNlcy5zdG9yZUFwcFVSTCA9IHtcclxuICogICBpb3M6ICc8YXBwX2lkPicsXHJcbiAqICAgYW5kcm9pZDogJ21hcmtldDovL2RldGFpbHM/aWQ9PHBhY2thZ2VfbmFtZT4nLFxyXG4gKiAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcclxuICogfVxyXG4gKlxyXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKHRydWUpO1xyXG4gKlxyXG4gKiAvLyBvciwgb3ZlcnJpZGUgdGhlIHdob2xlIHByZWZlcmVuY2VzIG9iamVjdFxyXG4gKiB0aGlzLmFwcFJhdGUucHJlZmVyZW5jZXMgPSB7XHJcbiAqICAgdXNlc1VudGlsUHJvbXB0OiAzLFxyXG4gKiAgIHN0b3JlQXBwVVJMOiB7XHJcbiAqICAgIGlvczogJzxhcHBfaWQ+JyxcclxuICogICAgYW5kcm9pZDogJ21hcmtldDovL2RldGFpbHM/aWQ9PHBhY2thZ2VfbmFtZT4nLFxyXG4gKiAgICB3aW5kb3dzOiAnbXMtd2luZG93cy1zdG9yZTovL3Jldmlldy8/UHJvZHVjdElkPTxzdG9yZV9pZD4nXHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqXHJcbiAqIHRoaXMuYXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoZmFsc2UpO1xyXG4gKiBgYGBcclxuICpcclxuICogQGludGVyZmFjZXNcclxuICogQXBwUmF0ZVByZWZlcmVuY2VzXHJcbiAqIEFwcFVybHNcclxuICogQXBwUmF0ZUNhbGxiYWNrc1xyXG4gKiBBcHBSYXRlQ3VzdG9tTG9jYWxcclxuICpcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBcHBSYXRlJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlJyxcclxuICBwbHVnaW5SZWY6ICdBcHBSYXRlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnaU9TJywgJ1dpbmRvd3MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBwUmF0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDb25maWd1cmUgdmFyaW91cyBzZXR0aW5ncyBmb3IgdGhlIFJhdGluZyBWaWV3LlxyXG4gICAqIFNlZSB0YWJsZSBiZWxvdyBmb3Igb3B0aW9uc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxyXG4gIHByZWZlcmVuY2VzOiBBcHBSYXRlUHJlZmVyZW5jZXM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb21wdHMgdGhlIHVzZXIgZm9yIHJhdGluZ1xyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW1tZWRpYXRlbHkgIFNob3cgdGhlIHJhdGluZyBwcm9tcHQgaW1tZWRpYXRlbHkuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHByb21wdEZvclJhdGluZyhpbW1lZGlhdGVseTogYm9vbGVhbik6IHZvaWQge31cclxuXHJcbiAgLyoqXHJcbiAgICogSW1tZWRpYXRlbHkgc2VuZCB0aGUgdXNlciB0byB0aGUgYXBwIHN0b3JlIHJhdGluZyBwYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG5hdmlnYXRlVG9BcHBTdG9yZSgpOiB2b2lkIHt9XHJcbn1cclxuIl19