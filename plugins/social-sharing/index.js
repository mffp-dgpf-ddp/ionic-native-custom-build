var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SocialSharingOriginal = /** @class */ (function (_super) {
    __extends(SocialSharingOriginal, _super);
    function SocialSharingOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SocialSharingOriginal.prototype.share = function (message, subject, file, url) { return cordova(this, "share", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    SocialSharingOriginal.prototype.shareWithOptions = function (options) { return cordova(this, "shareWithOptions", { "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.canShareVia = function (appName, message, subject, image, url) { return cordova(this, "canShareVia", { "successIndex": 5, "errorIndex": 6, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaTwitter = function (message, image, url) { return cordova(this, "shareViaTwitter", { "successIndex": 3, "errorIndex": 4, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaFacebook = function (message, image, url) { return cordova(this, "shareViaFacebook", { "successIndex": 3, "errorIndex": 4, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaFacebookWithPasteMessageHint = function (message, image, url, pasteMessageHint) { return cordova(this, "shareViaFacebookWithPasteMessageHint", { "successIndex": 4, "errorIndex": 5, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaInstagram = function (message, image) { return cordova(this, "shareViaInstagram", { "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaWhatsApp = function (message, image, url) { return cordova(this, "shareViaWhatsApp", { "successIndex": 3, "errorIndex": 4, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaWhatsAppToReceiver = function (receiver, message, image, url) { return cordova(this, "shareViaWhatsAppToReceiver", { "successIndex": 4, "errorIndex": 5, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaSMS = function (messge, phoneNumber) { return cordova(this, "shareViaSMS", { "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.canShareViaEmail = function () { return cordova(this, "canShareViaEmail", { "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaEmail = function (message, subject, to, cc, bcc, files) { return cordova(this, "shareViaEmail", { "platforms": ["iOS", "Android"], "successIndex": 6, "errorIndex": 7 }, arguments); };
    SocialSharingOriginal.prototype.shareVia = function (appName, message, subject, image, url) { return cordova(this, "shareVia", { "successIndex": 5, "errorIndex": 6, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.prototype.setIPadPopupCoordinates = function (targetBounds) { return cordova(this, "setIPadPopupCoordinates", { "sync": true, "platforms": ["iOS"] }, arguments); };
    SocialSharingOriginal.prototype.saveToPhotoAlbum = function (fileOrFileArray) { return cordova(this, "saveToPhotoAlbum", { "platforms": ["iOS"] }, arguments); };
    SocialSharingOriginal.prototype.shareViaWhatsAppToPhone = function (phone, message, fileOrFileArray, url) { return cordova(this, "shareViaWhatsAppToPhone", { "successIndex": 5, "errorIndex": 6, "platforms": ["iOS", "Android"] }, arguments); };
    SocialSharingOriginal.pluginName = "SocialSharing";
    SocialSharingOriginal.plugin = "cordova-plugin-x-socialsharing";
    SocialSharingOriginal.pluginRef = "plugins.socialsharing";
    SocialSharingOriginal.repo = "https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin";
    SocialSharingOriginal.platforms = ["Android", "Browser", "iOS", "Windows", "Windows Phone"];
    return SocialSharingOriginal;
}(IonicNativePlugin));
var SocialSharing = new SocialSharingOriginal();
export { SocialSharing };
//# sourceMappingURL=data:application/json;base64,