import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var DeviceAccounts = /** @class */ (function (_super) {
    __extends(DeviceAccounts, _super);
    function DeviceAccounts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceAccounts.prototype.get = function () { return cordova(this, "get", {}, arguments); };
    DeviceAccounts.prototype.getByType = function (type) { return cordova(this, "getByType", {}, arguments); };
    DeviceAccounts.prototype.getEmails = function () { return cordova(this, "getEmails", {}, arguments); };
    DeviceAccounts.prototype.getEmail = function () { return cordova(this, "getEmail", {}, arguments); };
    DeviceAccounts.prototype.getPermissions = function () { return cordova(this, "getPermissions", {}, arguments); };
    DeviceAccounts.prototype.getPermissionsByType = function (type) { return cordova(this, "getPermissionsByType", {}, arguments); };
    DeviceAccounts.pluginName = "DeviceAccounts";
    DeviceAccounts.plugin = "cordova-device-accounts-v2";
    DeviceAccounts.pluginRef = "DeviceAccounts";
    DeviceAccounts.repo = "https://github.com/xUnholy/cordova-device-accounts-v2";
    DeviceAccounts.platforms = ["Android"];
    DeviceAccounts = __decorate([
        Injectable()
    ], DeviceAccounts);
    return DeviceAccounts;
}(IonicNativePlugin));
export { DeviceAccounts };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RldmljZS1hY2NvdW50cy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEwQ3BDLGtDQUFpQjs7OztJQU1uRCw0QkFBRztJQVVILGtDQUFTLGFBQUMsSUFBWTtJQVN0QixrQ0FBUztJQVNULGlDQUFRO0lBU1IsdUNBQWM7SUFVZCw2Q0FBb0IsYUFBQyxJQUFZOzs7Ozs7SUFyRHRCLGNBQWM7UUFEMUIsVUFBVSxFQUFFO09BQ0EsY0FBYzt5QkEzQzNCO0VBMkNvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFuZHJvaWRBY2NvdW50IHtcclxuICAvKiogQWNjb3VudCBjcmVhdG9yICovXHJcbiAgQ1JFQVRPUjogQW5kcm9pZEFjY291bnQ7XHJcblxyXG4gIC8qKiBBY2NvdW50IG5hbWUgKi9cclxuICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBBY2NvdW50IHR5cGUgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBEZXZpY2UgQWNjb3VudHNcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEdldHMgdGhlIEdvb2dsZSBhY2NvdW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIEFuZHJvaWQgZGV2aWNlXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IERldmljZUFjY291bnRzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kZXZpY2UtYWNjb3VudHMvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkZXZpY2VBY2NvdW50czogRGV2aWNlQWNjb3VudHMpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5kZXZpY2VBY2NvdW50cy5nZXQoKVxyXG4gKiAgIC50aGVuKGFjY291bnRzID0+IGNvbnNvbGUubG9nKGFjY291bnRzKSlcclxuICogICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogQW5kcm9pZEFjY291bnRcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEZXZpY2VBY2NvdW50cycsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1kZXZpY2UtYWNjb3VudHMtdjInLFxyXG4gIHBsdWdpblJlZjogJ0RldmljZUFjY291bnRzJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3hVbmhvbHkvY29yZG92YS1kZXZpY2UtYWNjb3VudHMtdjInLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERldmljZUFjY291bnRzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqICBHZXRzIGFsbCBhY2NvdW50cyByZWdpc3RlcmVkIG9uIHRoZSBBbmRyb2lkIERldmljZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFuZHJvaWRBY2NvdW50W10+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXQoKTogUHJvbWlzZTxBbmRyb2lkQWNjb3VudFtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAgR2V0IGFsbCBhY2NvdW50cyByZWdpc3RlcmVkIG9uIEFuZHJvaWQgZGV2aWNlIGZvciByZXF1ZXN0ZWQgdHlwZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8QW5kcm9pZEFjY291bnRbXT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEJ5VHlwZSh0eXBlOiBzdHJpbmcpOiBQcm9taXNlPEFuZHJvaWRBY2NvdW50W10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICBHZXQgYWxsIGVtYWlscyByZWdpc3RlcmVkIG9uIEFuZHJvaWQgZGV2aWNlIChhY2NvdW50cyB3aXRoICdjb20uZ29vZ2xlJyB0eXBlKVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ1tdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RW1haWxzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICBHZXQgdGhlIGZpcnN0IGVtYWlsIHJlZ2lzdGVyZWQgb24gQW5kcm9pZCBkZXZpY2VcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRFbWFpbCgpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogIEdldCBwZXJtaXNzaW9ucyBmb3IgYWNjZXNzIHRvIGVtYWlsIHJlZ2lzdGVyZWQgb24gQW5kcm9pZCBkZXZpY2UgOC4wK1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFBlcm1pc3Npb25zKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAgR2V0IHBlcm1pc3Npb25zIGZvciBhY2Nlc3MgdG8gZW1haWwgcmVnaXN0ZXJlZCBvbiBBbmRyb2lkIGRldmljZSA4LjArIGZvciByZXF1ZXN0ZWQgdHlwZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0UGVybWlzc2lvbnNCeVR5cGUodHlwZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19