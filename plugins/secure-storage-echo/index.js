var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, checkAvailability, cordovaInstance, getPromise } from '@ionic-native/core';
var SecureStorageEchoObject = /** @class */ (function () {
    function SecureStorageEchoObject(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    SecureStorageEchoObject.prototype.get = function (key) { return cordovaInstance(this, "get", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.set = function (key, value) { return cordovaInstance(this, "set", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.remove = function (key) { return cordovaInstance(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.keys = function () { return cordovaInstance(this, "keys", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.clear = function () { return cordovaInstance(this, "clear", { "callbackOrder": "reverse" }, arguments); };
    SecureStorageEchoObject.prototype.secureDevice = function () { return cordovaInstance(this, "secureDevice", {}, arguments); };
    return SecureStorageEchoObject;
}());
export { SecureStorageEchoObject };
var SecureStorageEchoOriginal = /** @class */ (function (_super) {
    __extends(SecureStorageEchoOriginal, _super);
    function SecureStorageEchoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecureStorageEchoOriginal.prototype.create = function (store, options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (res, rej) {
                    var instance = new (SecureStorageEchoOriginal.getPlugin())(function () { return res(new SecureStorageEchoObject(instance)); }, function () { return rej(new SecureStorageEchoObject(instance)); }, store, options);
                });
            }
        })();
    };
    SecureStorageEchoOriginal.pluginName = "SecureStorageEcho";
    SecureStorageEchoOriginal.plugin = "cordova-plugin-secure-storage-echo";
    SecureStorageEchoOriginal.pluginRef = "cordova.plugins.SecureStorage";
    SecureStorageEchoOriginal.repo = "https://github.com/mibrito707/cordova-plugin-secure-storage-echo";
    SecureStorageEchoOriginal.platforms = ["Android", "Browser", "iOS", "Windows"];
    return SecureStorageEchoOriginal;
}(IonicNativePlugin));
var SecureStorageEcho = new SecureStorageEchoOriginal();
export { SecureStorageEcho };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlY3VyZS1zdG9yYWdlLWVjaG8vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8seURBQWlDLFVBQVUsRUFBNkIsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2QnhHLGlDQUFvQixlQUFvQjtRQUFwQixvQkFBZSxHQUFmLGVBQWUsQ0FBSztJQUFHLENBQUM7SUFVNUMscUNBQUcsYUFBQyxHQUFXO0lBYWYscUNBQUcsYUFBQyxHQUFXLEVBQUUsS0FBYTtJQVk5Qix3Q0FBTSxhQUFDLEdBQVc7SUFXbEIsc0NBQUk7SUFXSix1Q0FBSztJQVNMLDhDQUFZO2tDQWhHZDs7OztJQTJKdUMscUNBQWlCOzs7O0lBT3RELGtDQUFNLGFBQUMsS0FBYSxFQUFFLE9BQWtDOzs7bURBQW9DO2dCQUMxRixPQUFPLFVBQVUsQ0FBMEIsVUFBQyxHQUFhLEVBQUUsR0FBYTtvQkFDdEUsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQ2xELGNBQU0sT0FBQSxHQUFHLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUExQyxDQUEwQyxFQUNoRCxjQUFNLE9BQUEsR0FBRyxDQUFDLElBQUksdUJBQXVCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBMUMsQ0FBMEMsRUFDaEQsS0FBSyxFQUNMLE9BQU8sQ0FDUixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDO2FBQ0o7Ozs7Ozs7OzRCQTNLSDtFQTJKdUMsaUJBQWlCO1NBQTNDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YUNoZWNrLCBDb3Jkb3ZhSW5zdGFuY2UsIGdldFByb21pc2UsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWN1cmVTdG9yYWdlRWNob09wdGlvbnMge1xyXG4gIGFuZHJvaWQ6IHtcclxuICAgIC8qKlxyXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWJyaXRvNzA3L2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlLWVjaG8jc2hhcmluZy1kYXRhLWFuZHJvaWRcclxuICAgICAqL1xyXG4gICAgcGFja2FnZU5hbWU/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGR1cmF0aW9uIG9mIHRpbWUgKHNlY29uZHMpIGZvciB3aGljaCB0aGUgUHJpdmF0ZSBFbmNyeXB0aW9uIEtleSBpcyBhdXRob3JpemVkIHRvIGJlIHVzZWQgYWZ0ZXIgdGhlIHVzZXIgaXMgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQuXHJcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvc2VjdXJpdHkva2V5c3RvcmUvS2V5R2VuUGFyYW1ldGVyU3BlYy5CdWlsZGVyLmh0bWwjc2V0VXNlckF1dGhlbnRpY2F0aW9uVmFsaWRpdHlEdXJhdGlvblNlY29uZHMoaW50KVxyXG4gICAgICovXHJcbiAgICB1c2VyQXV0aGVudGljYXRpb25WYWxpZGl0eUR1cmF0aW9uPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDdXN0b20gdGl0bGUgZm9yIENvbmZpcm0gQ3JlZGVudGlhbHMgc2NyZWVuLlxyXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL2FwcC9LZXlndWFyZE1hbmFnZXIuaHRtbCNjcmVhdGVDb25maXJtRGV2aWNlQ3JlZGVudGlhbEludGVudChqYXZhLmxhbmcuQ2hhclNlcXVlbmNlLCUyMGphdmEubGFuZy5DaGFyU2VxdWVuY2UpXHJcbiAgICAgKi9cclxuICAgIHVubG9ja0NyZWRlbnRpYWxzVGl0bGU/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEN1c3RvbSBkZXNjcmlwdGlvbiBmb3IgQ29uZmlybSBDcmVkZW50aWFscyBzY3JlZW4uXHJcbiAgICAgKi9cclxuICAgIHVubG9ja0NyZWRlbnRpYWxzRGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTZWN1cmVTdG9yYWdlRWNob09iamVjdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfb2JqZWN0SW5zdGFuY2U6IGFueSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIHN0b3JlZCBpdGVtXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmFJbnN0YW5jZSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBnZXQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RvcmVzIGEgdmFsdWVcclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHZhbHVlIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YUluc3RhbmNlKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGEgc2luZ2xlIHN0b3JlZCBpdGVtXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUga2V5IHRoYXQgd2FzIHJlbW92ZWRcclxuICAgKi9cclxuICBAQ29yZG92YUluc3RhbmNlKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIHJlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIHJlZmVyZW5jZXMgZnJvbSB0aGUgc3RvcmFnZS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmdbXT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhcnJheSBvZiBrZXlzIHN0b3JhZ2VcclxuICAgKi9cclxuICBAQ29yZG92YUluc3RhbmNlKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICB9KVxyXG4gIGtleXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXIgYWxsIHJlZmVyZW5jZXMgZnJvbSB0aGUgc3RvcmFnZS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhSW5zdGFuY2Uoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgY2xlYXIoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJyaW5ncyB1cCB0aGUgc2NyZWVuLWxvY2sgc2V0dGluZ3NcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhSW5zdGFuY2UoKVxyXG4gIHNlY3VyZURldmljZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFNlY3VyZSBTdG9yYWdlIEVjaG9cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGdldHMsIHNldHMgYW5kIHJlbW92ZXMga2V5LHZhbHVlIHBhaXJzIGZyb20gYSBkZXZpY2UncyBzZWN1cmUgc3RvcmFnZS5cclxuICpcclxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1zZWN1cmUtc3RvcmFnZS1lY2hvYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NvcmRvdmEgU2VjdXJlIFN0b3JhZ2UgZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL21pYnJpdG83MDcvY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobykuXHJcbiAqXHJcbiAqIFRoZSBicm93c2VyIHBsYXRmb3JtIGlzIHN1cHBvcnRlZCBhcyBhIG1vY2sgb25seS4gS2V5L3ZhbHVlcyBhcmUgc3RvcmVkIHVuZW5jcnlwdGVkIGluIGxvY2FsU3RvcmFnZS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU2VjdXJlU3RvcmFnZUVjaG8sIFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zZWN1cmUtc3RvcmFnZS1lY2hvL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VjdXJlU3RvcmFnZUVjaG86IFNlY3VyZVN0b3JhZ2VFY2hvKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuc2VjdXJlU3RvcmFnZUVjaG8uY3JlYXRlKCdteV9zdG9yZV9uYW1lJylcclxuICogICAudGhlbigoc3RvcmFnZTogU2VjdXJlU3RvcmFnZUVjaG9PYmplY3QpID0+IHtcclxuICpcclxuICogICAgICBzdG9yYWdlLmdldCgna2V5JylcclxuICogICAgICAgIC50aGVuKFxyXG4gKiAgICAgICAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxyXG4gKiAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcclxuICogICAgICApO1xyXG4gKlxyXG4gKiAgICAgIHN0b3JhZ2Uuc2V0KCdrZXknLCAndmFsdWUnKVxyXG4gKiAgICAgICAgLnRoZW4oXHJcbiAqICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcclxuICogICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAqICAgICAgKTtcclxuICpcclxuICogICAgICBzdG9yYWdlLnJlbW92ZSgna2V5JylcclxuICogICAgICAudGhlbihcclxuICogICAgICAgICAgZGF0YSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcclxuICogICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAqICAgICAgKTtcclxuICpcclxuICogICB9KTtcclxuICpcclxuICpcclxuICogYGBgXHJcbiAqIEBjbGFzc2VzXHJcbiAqIFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0XHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnU2VjdXJlU3RvcmFnZUVjaG8nLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlLWVjaG8nLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5TZWN1cmVTdG9yYWdlJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21pYnJpdG83MDcvY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UtZWNobycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTZWN1cmVTdG9yYWdlRWNobyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbmFtZXNwYWNlZCBzdG9yYWdlLlxyXG4gICAqIEBwYXJhbSBzdG9yZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0Pn1cclxuICAgKi9cclxuICBAQ29yZG92YUNoZWNrKClcclxuICBjcmVhdGUoc3RvcmU6IHN0cmluZywgb3B0aW9ucz86IFNlY3VyZVN0b3JhZ2VFY2hvT3B0aW9ucyk6IFByb21pc2U8U2VjdXJlU3RvcmFnZUVjaG9PYmplY3Q+IHtcclxuICAgIHJldHVybiBnZXRQcm9taXNlPFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0PigocmVzOiBGdW5jdGlvbiwgcmVqOiBGdW5jdGlvbikgPT4ge1xyXG4gICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyAoU2VjdXJlU3RvcmFnZUVjaG8uZ2V0UGx1Z2luKCkpKFxyXG4gICAgICAgICgpID0+IHJlcyhuZXcgU2VjdXJlU3RvcmFnZUVjaG9PYmplY3QoaW5zdGFuY2UpKSxcclxuICAgICAgICAoKSA9PiByZWoobmV3IFNlY3VyZVN0b3JhZ2VFY2hvT2JqZWN0KGluc3RhbmNlKSksXHJcbiAgICAgICAgc3RvcmUsXHJcbiAgICAgICAgb3B0aW9uc1xyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==