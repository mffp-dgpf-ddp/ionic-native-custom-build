import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FirebaseConfig = /** @class */ (function (_super) {
    __extends(FirebaseConfig, _super);
    function FirebaseConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseConfig.prototype.fetch = function (expirationDuration) { return cordova(this, "fetch", { "sync": true }, arguments); };
    FirebaseConfig.prototype.activate = function () { return cordova(this, "activate", { "sync": true }, arguments); };
    FirebaseConfig.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getBoolean = function (key) { return cordova(this, "getBoolean", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getString = function (key) { return cordova(this, "getString", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getNumber = function (key) { return cordova(this, "getNumber", { "sync": true }, arguments); };
    FirebaseConfig.prototype.getBytes = function (key) { return cordova(this, "getBytes", { "sync": true }, arguments); };
    FirebaseConfig.pluginName = "FirebaseConfig";
    FirebaseConfig.plugin = "cordova-plugin-firebase-config";
    FirebaseConfig.pluginRef = "cordova.plugins.firebase.config";
    FirebaseConfig.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-config";
    FirebaseConfig.platforms = ["Android", "iOS"];
    FirebaseConfig = __decorate([
        Injectable()
    ], FirebaseConfig);
    return FirebaseConfig;
}(IonicNativePlugin));
export { FirebaseConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWNvbmZpZy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnQ3BDLGtDQUFpQjs7OztJQVFuRCw4QkFBSyxhQUFDLGtCQUEyQjtJQVVqQyxpQ0FBUTtJQVVSLHlDQUFnQjtJQVdoQixtQ0FBVSxhQUFDLEdBQVc7SUFXdEIsa0NBQVMsYUFBQyxHQUFXO0lBV3JCLGtDQUFTLGFBQUMsR0FBVztJQVdyQixpQ0FBUSxhQUFDLEdBQVc7Ozs7OztJQXhFVCxjQUFjO1FBRDFCLFVBQVUsRUFBRTtPQUNBLGNBQWM7eUJBakMzQjtFQWlDb0MsaUJBQWlCO1NBQXhDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBiZXRhXHJcbiAqIEBuYW1lIEZpcmViYXNlIENvbmZpZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBwbHVnaW4gZm9yIEZpcmViYXNlIENvbmZpZ1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBGaXJlYmFzZUNvbmZpZyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlyZWJhc2UtY29uZmlnL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VDb25maWc6IEZpcmViYXNlQ29uZmlnKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuZmlyZWJhc2VDb25maWcuZ2V0Qm9vbGVhbignbXlfa2V5JylcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0ZpcmViYXNlQ29uZmlnJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1jb25maWcnLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5jb25maWcnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1jb25maWcnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUNvbmZpZyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTdGFydHMgZmV0Y2hpbmcgY29uZmlncywgYWRoZXJpbmcgdG8gdGhlIHNwZWNpZmllZCBtaW5pbXVtIGZldGNoIGludGVydmFsLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGV4cGlyYXRpb25EdXJhdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG51bGw+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGZldGNoKGV4cGlyYXRpb25EdXJhdGlvbj86IG51bWJlcik6IFByb21pc2U8bnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXN5bmNocm9ub3VzbHkgYWN0aXZhdGVzIHRoZSBtb3N0IHJlY2VudGx5IGZldGNoZWQgY29uZmlncywgc28gdGhhdCB0aGUgZmV0Y2hlZCBrZXkgdmFsdWUgcGFpcnMgdGFrZSBlZmZlY3QuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBhY3RpdmF0ZSgpOiBQcm9taXNlPG51bGw+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFzeW5jaHJvbm91c2x5IGZldGNoZXMgYW5kIHRoZW4gYWN0aXZhdGVzIHRoZSBmZXRjaGVkIGNvbmZpZ3MuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudWxsPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBmZXRjaEFuZEFjdGl2YXRlKCk6IFByb21pc2U8bnVsbD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2hlcyBhIGJvb2xlYW4gY29uZmlndXJhdGlvbiB2YWx1ZSBmcm9tIFJlbW90ZUNvbmZpZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldEJvb2xlYW4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoZXMgYSBzdHJpbmcgY29uZmlndXJhdGlvbiB2YWx1ZSBmcm9tIFJlbW90ZUNvbmZpZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldFN0cmluZyhrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIGEgbnVtZXJpYyBjb25maWd1cmF0aW9uIHZhbHVlIGZyb20gUmVtb3RlQ29uZmlnXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgZ2V0TnVtYmVyKGtleTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZldGNoZXMgYW4gYXJyYXkgb2YgYnl0ZXMgY29uZmlndXJhdGlvbiB2YWx1ZSBmcm9tIFJlbW90ZUNvbmZpZ1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIGdldEJ5dGVzKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=