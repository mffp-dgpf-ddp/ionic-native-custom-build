import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SiriShortcuts = /** @class */ (function (_super) {
    __extends(SiriShortcuts, _super);
    function SiriShortcuts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SiriShortcuts.prototype.donate = function (options) { return cordova(this, "donate", {}, arguments); };
    SiriShortcuts.prototype.present = function (options) { return cordova(this, "present", {}, arguments); };
    SiriShortcuts.prototype.remove = function (persistentIdentifiers) { return cordova(this, "remove", {}, arguments); };
    SiriShortcuts.prototype.removeAll = function () { return cordova(this, "removeAll", {}, arguments); };
    SiriShortcuts.prototype.getActivatedShortcut = function (options) { return cordova(this, "getActivatedShortcut", {}, arguments); };
    SiriShortcuts.pluginName = "SiriShortcuts";
    SiriShortcuts.plugin = "cordova-plugin-siri-shortcuts";
    SiriShortcuts.pluginRef = "cordova.plugins.SiriShortcuts";
    SiriShortcuts.repo = "https://github.com/bartwesselink/cordova-plugin-siri-shortcuts";
    SiriShortcuts.platforms = ["iOS"];
    SiriShortcuts = __decorate([
        Injectable()
    ], SiriShortcuts);
    return SiriShortcuts;
}(IonicNativePlugin));
export { SiriShortcuts };
//# sourceMappingURL=data:application/json;base64,