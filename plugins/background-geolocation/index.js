var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
export var BackgroundGeolocationLocationCode;
(function (BackgroundGeolocationLocationCode) {
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["PERMISSION_DENIED"] = 1] = "PERMISSION_DENIED";
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["LOCATION_UNAVAILABLE"] = 2] = "LOCATION_UNAVAILABLE";
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["TIMEOUT"] = 3] = "TIMEOUT";
})(BackgroundGeolocationLocationCode || (BackgroundGeolocationLocationCode = {}));
export var BackgroundGeolocationNativeProvider;
(function (BackgroundGeolocationNativeProvider) {
    BackgroundGeolocationNativeProvider["gps"] = "gps";
    BackgroundGeolocationNativeProvider["network"] = "network";
    BackgroundGeolocationNativeProvider["passive"] = "passive";
    BackgroundGeolocationNativeProvider["fused"] = "fused";
})(BackgroundGeolocationNativeProvider || (BackgroundGeolocationNativeProvider = {}));
export var BackgroundGeolocationLocationProvider;
(function (BackgroundGeolocationLocationProvider) {
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["DISTANCE_FILTER_PROVIDER"] = 0] = "DISTANCE_FILTER_PROVIDER";
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["ACTIVITY_PROVIDER"] = 1] = "ACTIVITY_PROVIDER";
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["RAW_PROVIDER"] = 2] = "RAW_PROVIDER";
})(BackgroundGeolocationLocationProvider || (BackgroundGeolocationLocationProvider = {}));
export var BackgroundGeolocationEvents;
(function (BackgroundGeolocationEvents) {
    BackgroundGeolocationEvents["http_authorization"] = "http_authorization";
    BackgroundGeolocationEvents["abort_requested"] = "abort_requested";
    BackgroundGeolocationEvents["background"] = "background";
    BackgroundGeolocationEvents["foreground"] = "foreground";
    BackgroundGeolocationEvents["authorization"] = "authorization";
    BackgroundGeolocationEvents["error"] = "error";
    BackgroundGeolocationEvents["stop"] = "stop";
    BackgroundGeolocationEvents["start"] = "start";
    BackgroundGeolocationEvents["activity"] = "activity";
    BackgroundGeolocationEvents["stationary"] = "stationary";
    BackgroundGeolocationEvents["location"] = "location";
})(BackgroundGeolocationEvents || (BackgroundGeolocationEvents = {}));
export var BackgroundGeolocationAuthorizationStatus;
(function (BackgroundGeolocationAuthorizationStatus) {
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["NOT_AUTHORIZED"] = 0] = "NOT_AUTHORIZED";
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["AUTHORIZED"] = 1] = "AUTHORIZED";
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["AUTHORIZED_FOREGROUND"] = 2] = "AUTHORIZED_FOREGROUND";
})(BackgroundGeolocationAuthorizationStatus || (BackgroundGeolocationAuthorizationStatus = {}));
export var BackgroundGeolocationLogLevel;
(function (BackgroundGeolocationLogLevel) {
    BackgroundGeolocationLogLevel["TRACE"] = "TRACE";
    BackgroundGeolocationLogLevel["DEBUG"] = "DEBUG";
    BackgroundGeolocationLogLevel["INFO"] = "INFO";
    BackgroundGeolocationLogLevel["WARN"] = "WARN";
    BackgroundGeolocationLogLevel["ERROR"] = "ERROR";
})(BackgroundGeolocationLogLevel || (BackgroundGeolocationLogLevel = {}));
var BackgroundGeolocationOriginal = /** @class */ (function (_super) {
    __extends(BackgroundGeolocationOriginal, _super);
    function BackgroundGeolocationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundGeolocationOriginal.prototype.configure = function (options) { return cordova(this, "configure", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.finish = function () { return cordova(this, "finish", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.changePace = function (isMoving) { return cordova(this, "changePace", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.setConfig = function (options) { return cordova(this, "setConfig", { "callbackOrder": "reverse" }, arguments); };
    BackgroundGeolocationOriginal.prototype.getStationaryLocation = function () { return cordova(this, "getStationaryLocation", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.onStationary = function () { return cordova(this, "onStationary", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.showAppSettings = function () { return cordova(this, "showAppSettings", { "sync": true }, arguments); };
    BackgroundGeolocationOriginal.prototype.showLocationSettings = function () { return cordova(this, "showLocationSettings", { "sync": true }, arguments); };
    BackgroundGeolocationOriginal.prototype.watchLocationMode = function () { return cordova(this, "watchLocationMode", { "platforms": ["Android"], "observable": true }, arguments); };
    BackgroundGeolocationOriginal.prototype.stopWatchingLocationMode = function () { return cordova(this, "stopWatchingLocationMode", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.getLocations = function () { return cordova(this, "getLocations", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.getValidLocations = function () { return cordova(this, "getValidLocations", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.deleteLocation = function (locationId) { return cordova(this, "deleteLocation", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.deleteAllLocations = function () { return cordova(this, "deleteAllLocations", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.switchMode = function (modeId) { return cordova(this, "switchMode", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.getLogEntries = function (limit, fromId, minLevel) { return cordova(this, "getLogEntries", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.getConfig = function () { return cordova(this, "getConfig", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.getCurrentLocation = function (options) { return cordova(this, "getCurrentLocation", { "callbackOrder": "reverse" }, arguments); };
    BackgroundGeolocationOriginal.prototype.checkStatus = function () { return cordova(this, "checkStatus", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.startTask = function () { return cordova(this, "startTask", { "platforms": ["IOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.endTask = function (taskKey) { return cordova(this, "endTask", { "platforms": ["IOS"] }, arguments); };
    BackgroundGeolocationOriginal.prototype.headlessTask = function (func) { return cordova(this, "headlessTask", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.forceSync = function () { return cordova(this, "forceSync", {}, arguments); };
    BackgroundGeolocationOriginal.prototype.on = function (event) { return cordova(this, "on", { "observable": true }, arguments); };
    BackgroundGeolocationOriginal.prototype.removeAllListeners = function (event) { return cordova(this, "removeAllListeners", {}, arguments); };
    BackgroundGeolocationOriginal.pluginName = "BackgroundGeolocation";
    BackgroundGeolocationOriginal.plugin = "@mauron85/cordova-plugin-background-geolocation";
    BackgroundGeolocationOriginal.pluginRef = "BackgroundGeolocation";
    BackgroundGeolocationOriginal.repo = "https://github.com/mauron85/cordova-plugin-background-geolocation";
    BackgroundGeolocationOriginal.platforms = ["Android", "iOS"];
    return BackgroundGeolocationOriginal;
}(IonicNativePlugin));
var BackgroundGeolocation = new BackgroundGeolocationOriginal();
export { BackgroundGeolocation };
//# sourceMappingURL=data:application/json;base64,