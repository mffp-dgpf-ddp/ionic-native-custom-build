var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BaiduPushOriginal = /** @class */ (function (_super) {
    __extends(BaiduPushOriginal, _super);
    function BaiduPushOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaiduPushOriginal.prototype.startWork = function (apiKey) { return cordova(this, "startWork", {}, arguments); };
    BaiduPushOriginal.prototype.stopWork = function () { return cordova(this, "stopWork", {}, arguments); };
    BaiduPushOriginal.prototype.resumeWork = function () { return cordova(this, "resumeWork", {}, arguments); };
    BaiduPushOriginal.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    BaiduPushOriginal.prototype.delTags = function (tags) { return cordova(this, "delTags", {}, arguments); };
    BaiduPushOriginal.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true }, arguments); };
    BaiduPushOriginal.prototype.onNotificationClicked = function () { return cordova(this, "onNotificationClicked", { "observable": true }, arguments); };
    BaiduPushOriginal.prototype.onNotificationArrived = function () { return cordova(this, "onNotificationArrived", { "observable": true }, arguments); };
    BaiduPushOriginal.pluginName = "BaiduPush";
    BaiduPushOriginal.plugin = "cordova-plugin-push-baidu";
    BaiduPushOriginal.pluginRef = "baiduPush";
    BaiduPushOriginal.repo = "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git";
    BaiduPushOriginal.platforms = ["Android", "iOS"];
    return BaiduPushOriginal;
}(IonicNativePlugin));
var BaiduPush = new BaiduPushOriginal();
export { BaiduPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhaWR1LXB1c2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2R0gsNkJBQWlCOzs7O0lBTzlDLDZCQUFTLGFBQUMsTUFBYztJQVN4Qiw0QkFBUTtJQVNSLDhCQUFVO0lBVVYsMkJBQU8sYUFBQyxJQUFTO0lBVWpCLDJCQUFPLGFBQUMsSUFBUztJQVNqQiw2QkFBUztJQVNULHlDQUFxQjtJQVNyQix5Q0FBcUI7Ozs7OztvQkF2THZCO0VBK0crQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgYmFpZHVQdXNoOiBhbnk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJhaWR1UmVzcG9uc2U8VD4ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjb3JyZXNwb25kaW5nIEJhaWR1IFNESyBtZXRob2QgY2FsbGVkLlxyXG4gICAqL1xyXG4gIHR5cGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZXJyb3IgY29kZSBjb3JyZXNwb25kaW5nIHRvIEJhaWR1J3MgcmVxdWVzdC5cclxuICAgKi9cclxuICBlcnJvckNvZGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUmVnaXN0cmF0aW9uIGRhdGEgcmV2ZWx2YW50IHRvIHN1YnNlcXVlbnQgYWN0aW9ucy5cclxuICAgKi9cclxuICBkYXRhOiBUO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdHJhdGlvbkRhdGEge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgYXBwLlxyXG4gICAqL1xyXG4gIGFwcElkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBkZXZpY2UuXHJcbiAgICovXHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGNoYW5uZWwgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGFwcC5cclxuICAgKi9cclxuICBjaGFubmVsSWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVbnJlZ2lzdHJhdGlvbkRhdGEge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCBjb3JyZXNwb25kaW5nIHRvIHRoZSBCYWlkdSByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhZ0RhdGEge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCBjb3JyZXNwb25kaW5nIHRvIHRoZSBCYWlkdSByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjaGFubmVsIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBhcHAuXHJcbiAgICovXHJcbiAgY2hhbm5lbElkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2Ygc3VjY2Vzc2Z1bGx5IHNldC9kZWxldGVkIHRhZ3MuXHJcbiAgICovXHJcbiAgc3VjZXNzVGFnczogc3RyaW5nW107XHJcbiAgLyoqXHJcbiAgICogVGhlIGxpc3Qgb2YgdW5zdWNjZXNzZnVsbHkgc2V0L2RlbGV0ZWQgdGFncy5cclxuICAgKi9cclxuICBmYWlsVGFnczogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uRGF0YSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHRpdGxlIG9mIHRoZSBub3RpZmljYXRpb24uXHJcbiAgICovXHJcbiAgdGl0bGU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG5vdGlmaWNhdGlvbi5cclxuICAgKi9cclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEN1c3RvbSBjb250ZW50IGZvciB0aGUgbm90aWZpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGN1c3RvbUNvbnRlbnRTdHJpbmc/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBCYWlkdSBQdXNoXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBmYWNpbGlhdGVzIHRoZSB1c2Ugb2YgQmFpZHUgUHVzaCBub3RpZmljYXRpb25zLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBCYWlkdVB1c2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JhaWR1LXB1c2gvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWlkdVB1c2g6IEJhaWR1UHVzaCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmJhaWR1UHVzaC5zdGFydFdvcmsoJ3h4eHh4eCcpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogQmFpZHVSZXNwb25zZVxyXG4gKiBSZWdpc3RyYXRpb25EYXRhXHJcbiAqIFVucmVnaXN0cmF0aW9uRGF0YVxyXG4gKiBUYWdEYXRhXHJcbiAqIE5vdGlmaWNhdGlvbkRhdGFcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdCYWlkdVB1c2gnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXB1c2gtYmFpZHUnLFxyXG4gIHBsdWdpblJlZjogJ2JhaWR1UHVzaCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UaS13ZWJkZXYvY29yZG92YS1wbHVnaW4tcHVzaC1iYWlkdS5naXQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYWlkdVB1c2ggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgcmVnaXN0ZXJzIHRoZSBkZXZpY2UgdG8gQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBpS2V5IEJhaWR1IENsb3VkIFB1c2ggQVBJIGtleS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydFdvcmsoYXBpS2V5OiBzdHJpbmcpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHVucmVnaXN0ZXJzIHRoZSBkZXZpY2UgdG8gQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VW5yZWdpc3RyYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BXb3JrKCk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxVbnJlZ2lzdHJhdGlvbkRhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCByZS1iaW5kcyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVzdW1lV29yaygpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgc2V0cyB0YWdzIGluIHRoZSBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxyXG4gICAqIEBwYXJhbSB0YWdzIHthbnl9IHRhZ3MgVGhlIHRhZ3MgdG8gc2V0LlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFRhZ3ModGFnczogYW55KTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFRhZ0RhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHNldHMgdGFncyBpbiB0aGUgQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cclxuICAgKiBAcGFyYW0gdGFncyB7YW55fSB0YWdzIFRoZSB0YWdzIHRvIHNldC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxUYWdzKHRhZ3M6IGFueSk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gYSBub3RpZmljYXRpb24gaXMgcmVjaWV2ZWQgb24gdGhlIGZvcmVncm91bmQuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUgfSlcclxuICBvbk1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgdXNlciB0YXBzIGEgbm90aWZpY2F0aW9uLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXHJcbiAgb25Ob3RpZmljYXRpb25DbGlja2VkKCk6IE9ic2VydmFibGU8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gYSBub3RpZmljYXRpb24gaXMgcmVjaWV2ZWQuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUgfSlcclxuICBvbk5vdGlmaWNhdGlvbkFycml2ZWQoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==