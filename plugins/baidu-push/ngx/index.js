import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BaiduPush = /** @class */ (function (_super) {
    __extends(BaiduPush, _super);
    function BaiduPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaiduPush.prototype.startWork = function (apiKey) { return cordova(this, "startWork", {}, arguments); };
    BaiduPush.prototype.stopWork = function () { return cordova(this, "stopWork", {}, arguments); };
    BaiduPush.prototype.resumeWork = function () { return cordova(this, "resumeWork", {}, arguments); };
    BaiduPush.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    BaiduPush.prototype.delTags = function (tags) { return cordova(this, "delTags", {}, arguments); };
    BaiduPush.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationClicked = function () { return cordova(this, "onNotificationClicked", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationArrived = function () { return cordova(this, "onNotificationArrived", { "observable": true }, arguments); };
    BaiduPush.pluginName = "BaiduPush";
    BaiduPush.plugin = "cordova-plugin-push-baidu";
    BaiduPush.pluginRef = "baiduPush";
    BaiduPush.repo = "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git";
    BaiduPush.platforms = ["Android", "iOS"];
    BaiduPush = __decorate([
        Injectable()
    ], BaiduPush);
    return BaiduPush;
}(IonicNativePlugin));
export { BaiduPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhaWR1LXB1c2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2R0gsNkJBQWlCOzs7O0lBTzlDLDZCQUFTLGFBQUMsTUFBYztJQVN4Qiw0QkFBUTtJQVNSLDhCQUFVO0lBVVYsMkJBQU8sYUFBQyxJQUFTO0lBVWpCLDJCQUFPLGFBQUMsSUFBUztJQVNqQiw2QkFBUztJQVNULHlDQUFxQjtJQVNyQix5Q0FBcUI7Ozs7OztJQXhFVixTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBL0d0QjtFQStHK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IGJhaWR1UHVzaDogYW55O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYWlkdVJlc3BvbnNlPFQ+IHtcclxuICAvKipcclxuICAgKiBUaGUgY29ycmVzcG9uZGluZyBCYWlkdSBTREsgbWV0aG9kIGNhbGxlZC5cclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGVycm9yIGNvZGUgY29ycmVzcG9uZGluZyB0byBCYWlkdSdzIHJlcXVlc3QuXHJcbiAgICovXHJcbiAgZXJyb3JDb2RlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdHJhdGlvbiBkYXRhIHJldmVsdmFudCB0byBzdWJzZXF1ZW50IGFjdGlvbnMuXHJcbiAgICovXHJcbiAgZGF0YTogVDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZWdpc3RyYXRpb25EYXRhIHtcclxuICAvKipcclxuICAgKiBUaGUgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGFwcC5cclxuICAgKi9cclxuICBhcHBJZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgZGV2aWNlLlxyXG4gICAqL1xyXG4gIHVzZXJJZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBjaGFubmVsIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBhcHAuXHJcbiAgICovXHJcbiAgY2hhbm5lbElkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVW5yZWdpc3RyYXRpb25EYXRhIHtcclxuICAvKipcclxuICAgKiBUaGUgSUQgY29ycmVzcG9uZGluZyB0byB0aGUgQmFpZHUgcmVxdWVzdC5cclxuICAgKi9cclxuICByZXF1ZXN0SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWdEYXRhIHtcclxuICAvKipcclxuICAgKiBUaGUgSUQgY29ycmVzcG9uZGluZyB0byB0aGUgQmFpZHUgcmVxdWVzdC5cclxuICAgKi9cclxuICByZXF1ZXN0SWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgY2hhbm5lbCBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgYXBwLlxyXG4gICAqL1xyXG4gIGNoYW5uZWxJZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXN0IG9mIHN1Y2Nlc3NmdWxseSBzZXQvZGVsZXRlZCB0YWdzLlxyXG4gICAqL1xyXG4gIHN1Y2Vzc1RhZ3M6IHN0cmluZ1tdO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsaXN0IG9mIHVuc3VjY2Vzc2Z1bGx5IHNldC9kZWxldGVkIHRhZ3MuXHJcbiAgICovXHJcbiAgZmFpbFRhZ3M6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5vdGlmaWNhdGlvbkRhdGEge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgbm90aWZpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBub3RpZmljYXRpb24uXHJcbiAgICovXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAvKipcclxuICAgKiBDdXN0b20gY29udGVudCBmb3IgdGhlIG5vdGlmaWNhdGlvbi5cclxuICAgKi9cclxuICBjdXN0b21Db250ZW50U3RyaW5nPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgQmFpZHUgUHVzaFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZmFjaWxpYXRlcyB0aGUgdXNlIG9mIEJhaWR1IFB1c2ggbm90aWZpY2F0aW9ucy5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQmFpZHVQdXNoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9iYWlkdS1wdXNoL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFpZHVQdXNoOiBCYWlkdVB1c2gpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5iYWlkdVB1c2guc3RhcnRXb3JrKCd4eHh4eHgnKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEJhaWR1UmVzcG9uc2VcclxuICogUmVnaXN0cmF0aW9uRGF0YVxyXG4gKiBVbnJlZ2lzdHJhdGlvbkRhdGFcclxuICogVGFnRGF0YVxyXG4gKiBOb3RpZmljYXRpb25EYXRhXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQmFpZHVQdXNoJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1wdXNoLWJhaWR1JyxcclxuICBwbHVnaW5SZWY6ICdiYWlkdVB1c2gnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVGktd2ViZGV2L2NvcmRvdmEtcGx1Z2luLXB1c2gtYmFpZHUuZ2l0JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmFpZHVQdXNoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHJlZ2lzdGVycyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwaUtleSBCYWlkdSBDbG91ZCBQdXNoIEFQSSBrZXkuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RhcnRXb3JrKGFwaUtleTogc3RyaW5nKTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCB1bnJlZ2lzdGVycyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFVucmVnaXN0cmF0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wV29yaygpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8VW5yZWdpc3RyYXRpb25EYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgcmUtYmluZHMgdGhlIGRldmljZSB0byBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxSZWdpc3RyYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlc3VtZVdvcmsoKTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHNldHMgdGFncyBpbiB0aGUgQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cclxuICAgKiBAcGFyYW0gdGFncyB7YW55fSB0YWdzIFRoZSB0YWdzIHRvIHNldC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRUYWdzKHRhZ3M6IGFueSk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBzZXRzIHRhZ3MgaW4gdGhlIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXHJcbiAgICogQHBhcmFtIHRhZ3Mge2FueX0gdGFncyBUaGUgdGFncyB0byBzZXQuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFRhZ0RhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVsVGFncyh0YWdzOiBhbnkpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkIG9uIHRoZSBmb3JlZ3JvdW5kLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXHJcbiAgb25NZXNzYWdlKCk6IE9ic2VydmFibGU8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdGFwcyBhIG5vdGlmaWNhdGlvbi5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxyXG4gIG9uTm90aWZpY2F0aW9uQ2xpY2tlZCgpOiBPYnNlcnZhYmxlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXHJcbiAgb25Ob3RpZmljYXRpb25BcnJpdmVkKCk6IE9ic2VydmFibGU8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=