var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var MixpanelOriginal = /** @class */ (function (_super) {
    __extends(MixpanelOriginal, _super);
    function MixpanelOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MixpanelOriginal.prototype.alias = function (aliasId, originalId) { return cordova(this, "alias", {}, arguments); };
    MixpanelOriginal.prototype.distinctId = function () { return cordova(this, "distinctId", {}, arguments); };
    MixpanelOriginal.prototype.flush = function () { return cordova(this, "flush", {}, arguments); };
    MixpanelOriginal.prototype.identify = function (distinctId, usePeople) { return cordova(this, "identify", {}, arguments); };
    MixpanelOriginal.prototype.init = function (token) { return cordova(this, "init", {}, arguments); };
    MixpanelOriginal.prototype.getSuperProperties = function () { return cordova(this, "getSuperProperties", {}, arguments); };
    MixpanelOriginal.prototype.registerSuperProperties = function (superProperties) { return cordova(this, "registerSuperProperties", {}, arguments); };
    MixpanelOriginal.prototype.registerSuperPropertiesOnce = function (superProperties) { return cordova(this, "registerSuperPropertiesOnce", {}, arguments); };
    MixpanelOriginal.prototype.unregisterSuperProperty = function (superPropertyName) { return cordova(this, "unregisterSuperProperty", {}, arguments); };
    MixpanelOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    MixpanelOriginal.prototype.timeEvent = function (eventName) { return cordova(this, "timeEvent", {}, arguments); };
    MixpanelOriginal.prototype.track = function (eventName, eventProperties) { return cordova(this, "track", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    MixpanelOriginal.pluginName = "Mixpanel";
    MixpanelOriginal.plugin = "cordova-plugin-mixpanel";
    MixpanelOriginal.pluginRef = "mixpanel";
    MixpanelOriginal.repo = "https://github.com/samzilverberg/cordova-mixpanel-plugin";
    MixpanelOriginal.platforms = ["Android", "Browser", "iOS"];
    return MixpanelOriginal;
}(IonicNativePlugin));
var Mixpanel = new MixpanelOriginal();
export { Mixpanel };
var MixpanelPeopleOriginal = /** @class */ (function (_super) {
    __extends(MixpanelPeopleOriginal, _super);
    function MixpanelPeopleOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MixpanelPeopleOriginal.prototype.append = function (appendObject) { return cordova(this, "append", {}, arguments); };
    MixpanelPeopleOriginal.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    MixpanelPeopleOriginal.prototype.identify = function (distinctId) { return cordova(this, "identify", {}, arguments); };
    MixpanelPeopleOriginal.prototype.increment = function (peopleProperties) { return cordova(this, "increment", {}, arguments); };
    MixpanelPeopleOriginal.prototype.setPushId = function (pushId) { return cordova(this, "setPushId", {}, arguments); };
    MixpanelPeopleOriginal.prototype.set = function (peopleProperties) { return cordova(this, "set", {}, arguments); };
    MixpanelPeopleOriginal.prototype.setOnce = function (peopleProperties) { return cordova(this, "setOnce", {}, arguments); };
    MixpanelPeopleOriginal.prototype.trackCharge = function (amount, chargeProperties) { return cordova(this, "trackCharge", {}, arguments); };
    MixpanelPeopleOriginal.prototype.unset = function (propertiesArray) { return cordova(this, "unset", {}, arguments); };
    MixpanelPeopleOriginal.prototype.union = function (unionObject) { return cordova(this, "union", {}, arguments); };
    MixpanelPeopleOriginal.plugin = "cordova-plugin-mixpanel";
    MixpanelPeopleOriginal.pluginRef = "mixpanel.people";
    MixpanelPeopleOriginal.pluginName = "Mixpanel";
    return MixpanelPeopleOriginal;
}(IonicNativePlugin));
var MixpanelPeople = new MixpanelPeopleOriginal();
export { MixpanelPeople };
//# sourceMappingURL=data:application/json;base64,