import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Serial = /** @class */ (function (_super) {
    __extends(Serial, _super);
    function Serial() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Serial.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Serial.prototype.open = function (options) { return cordova(this, "open", {}, arguments); };
    Serial.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    Serial.prototype.writeHex = function (data) { return cordova(this, "writeHex", {}, arguments); };
    Serial.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    Serial.prototype.registerReadCallback = function () { return cordova(this, "registerReadCallback", { "observable": true }, arguments); };
    Serial.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Serial.pluginName = "Serial";
    Serial.plugin = "cordovarduino";
    Serial.pluginRef = "serial";
    Serial.repo = "https://github.com/xseignard/cordovarduino";
    Serial.platforms = ["Android", "Ubuntu"];
    Serial = __decorate([
        Injectable()
    ], Serial);
    return Serial;
}(IonicNativePlugin));
export { Serial };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlcmlhbC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXlETiwwQkFBaUI7Ozs7SUFXM0Msa0NBQWlCLGFBQUMsT0FBaUM7SUFXbkQscUJBQUksYUFBQyxPQUEwQjtJQVcvQixzQkFBSyxhQUFDLElBQVM7SUFXZix5QkFBUSxhQUFDLElBQVM7SUFVbEIscUJBQUk7SUFZSixxQ0FBb0I7SUFVcEIsc0JBQUs7Ozs7OztJQTVFTSxNQUFNO1FBRGxCLFVBQVUsRUFBRTtPQUNBLE1BQU07aUJBM0RuQjtFQTJENEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5kZWNsYXJlIHZhciBzZXJpYWw6IGFueTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsUGVybWlzc2lvbk9wdGlvbnMge1xyXG4gIHZpZDogc3RyaW5nO1xyXG4gIHBpZDogc3RyaW5nO1xyXG4gIGRyaXZlcjogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbE9wZW5PcHRpb25zIHtcclxuICBiYXVkUmF0ZTogbnVtYmVyO1xyXG4gIGRhdGFCaXRzOiBudW1iZXI7XHJcbiAgc3RvcEJpdHM6IG51bWJlcjtcclxuICBwYXJpdHk6IG51bWJlcjtcclxuICBkdHI6IGJvb2xlYW47XHJcbiAgcnRzOiBib29sZWFuO1xyXG4gIHNsZWVwT25QYXVzZTogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFNlcmlhbFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gcHJvdmlkZXMgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggU2VyaWFsIGNvbm5lY3Rpb25zXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFNlcmlhbCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2VyaWFsL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VyaWFsOiBTZXJpYWwpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5zZXJpYWwucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKCgpID0+IHtcclxuICogICB0aGlzLnNlcmlhbC5vcGVuKHtcclxuICogICAgIGJhdWRSYXRlOiA5ODAwLFxyXG4gKiAgICAgZGF0YUJpdHM6IDQsXHJcbiAqICAgICBzdG9wQml0czogMSxcclxuICogICAgIHBhcml0eTogMCxcclxuICogICAgIGR0cjogdHJ1ZSxcclxuICogICAgIHJ0czogdHJ1ZSxcclxuICogICAgIHNsZWVwT25QYXVzZTogZmFsc2VcclxuICogICB9KS50aGVuKCgpID0+IHtcclxuICogICAgIGNvbnNvbGUubG9nKCdTZXJpYWwgY29ubmVjdGlvbiBvcGVuZWQnKTtcclxuICogICB9KTtcclxuICogfSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1NlcmlhbCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YXJkdWlubycsXHJcbiAgcGx1Z2luUmVmOiAnc2VyaWFsJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3hzZWlnbmFyZC9jb3Jkb3ZhcmR1aW5vJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdVYnVudHUnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2VyaWFsIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFJlcXVlc3QgcGVybWlzc2lvbiB0byBjb25uZWN0IHRvIGEgc2VyaWFsIGRldmljZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge1NlcmlhbFBlcm1pc3Npb25PcHRpb25zfSBPcHRpb25zIHVzZWQgdG8gcmVxdWVzdCBzZXJpYWwgcGVybWlzc2lvbnMgZm9yIGFuIHVua25vd24gZGV2aWNlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVybWlzc2lvbnMgYXJlIGdyYW50ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBzdWNjZXNzSW5kZXg6IDEsXHJcbiAgICBlcnJvckluZGV4OiAyLFxyXG4gIH0pXHJcbiAgcmVxdWVzdFBlcm1pc3Npb24ob3B0aW9ucz86IFNlcmlhbFBlcm1pc3Npb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4gY29ubmVjdGlvbiB0byBhIHNlcmlhbCBkZXZpY2VcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTZXJpYWxPcGVuT3B0aW9uc30gT3B0aW9ucyB1c2VkIHRvIG9wZW4gc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2VyaWFsIGNvbm5lY3Rpb24gaXMgb3BlbmVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG9wZW4ob3B0aW9uczogU2VyaWFsT3Blbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV3JpdGUgdG8gYSBzZXJpYWwgY29ubmVjdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRhdGEge2FueX0gZGF0YSB0byB3cml0ZSB0byB0aGUgc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgd3JpdGUgaXMgY29tcGxldGVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgd3JpdGUoZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdyaXRlIGhleCB0byBhIHNlcmlhbCBjb25uZWN0aW9uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSBkYXRhIHRvIHdyaXRlIHRvIHRoZSBzZXJpYWwgY29ubmVjdGlvblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSB3cml0ZSBpcyBjb21wbGV0ZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB3cml0ZUhleChkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVhZCBmcm9tIGEgc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGRhdGEgcmVhZCBmcm9tIHRoZSBzZXJpYWwgY29ubmVjdGlvblxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWFkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXYXRjaCB0aGUgaW5jb21pbmcgZGF0YSBmcm9tIHRoZSBzZXJpYWwgY29ubmVjdGlvbi4gQ2xlYXIgdGhlIHdhdGNoIGJ5IHVuc3Vic2NyaWJpbmcgZnJvbSB0aGUgb2JzZXJ2YWJsZVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gT2JzZXJ2YWJsZSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB5b3UgY2FuIHN1YnNjcmliZSB0b1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICByZWdpc3RlclJlYWRDYWxsYmFjaygpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2UgdGhlIHNlcmlhbCBjb25uZWN0aW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2VyaWFsIGNvbm5lY3Rpb24gaXMgY2xvc2VkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsb3NlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==