var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SerialOriginal = /** @class */ (function (_super) {
    __extends(SerialOriginal, _super);
    function SerialOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SerialOriginal.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    SerialOriginal.prototype.open = function (options) { return cordova(this, "open", {}, arguments); };
    SerialOriginal.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    SerialOriginal.prototype.writeHex = function (data) { return cordova(this, "writeHex", {}, arguments); };
    SerialOriginal.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    SerialOriginal.prototype.registerReadCallback = function () { return cordova(this, "registerReadCallback", { "observable": true }, arguments); };
    SerialOriginal.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    SerialOriginal.pluginName = "Serial";
    SerialOriginal.plugin = "cordovarduino";
    SerialOriginal.pluginRef = "serial";
    SerialOriginal.repo = "https://github.com/xseignard/cordovarduino";
    SerialOriginal.platforms = ["Android", "Ubuntu"];
    return SerialOriginal;
}(IonicNativePlugin));
var Serial = new SerialOriginal();
export { Serial };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlcmlhbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXlETiwwQkFBaUI7Ozs7SUFXM0Msa0NBQWlCLGFBQUMsT0FBaUM7SUFXbkQscUJBQUksYUFBQyxPQUEwQjtJQVcvQixzQkFBSyxhQUFDLElBQVM7SUFXZix5QkFBUSxhQUFDLElBQVM7SUFVbEIscUJBQUk7SUFZSixxQ0FBb0I7SUFVcEIsc0JBQUs7Ozs7OztpQkF2SVA7RUEyRDRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZGVjbGFyZSB2YXIgc2VyaWFsOiBhbnk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbFBlcm1pc3Npb25PcHRpb25zIHtcclxuICB2aWQ6IHN0cmluZztcclxuICBwaWQ6IHN0cmluZztcclxuICBkcml2ZXI6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxPcGVuT3B0aW9ucyB7XHJcbiAgYmF1ZFJhdGU6IG51bWJlcjtcclxuICBkYXRhQml0czogbnVtYmVyO1xyXG4gIHN0b3BCaXRzOiBudW1iZXI7XHJcbiAgcGFyaXR5OiBudW1iZXI7XHJcbiAgZHRyOiBib29sZWFuO1xyXG4gIHJ0czogYm9vbGVhbjtcclxuICBzbGVlcE9uUGF1c2U6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTZXJpYWxcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIFNlcmlhbCBjb25uZWN0aW9uc1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBTZXJpYWwgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NlcmlhbC9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcmlhbDogU2VyaWFsKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuc2VyaWFsLnJlcXVlc3RQZXJtaXNzaW9uKCkudGhlbigoKSA9PiB7XHJcbiAqICAgdGhpcy5zZXJpYWwub3Blbih7XHJcbiAqICAgICBiYXVkUmF0ZTogOTgwMCxcclxuICogICAgIGRhdGFCaXRzOiA0LFxyXG4gKiAgICAgc3RvcEJpdHM6IDEsXHJcbiAqICAgICBwYXJpdHk6IDAsXHJcbiAqICAgICBkdHI6IHRydWUsXHJcbiAqICAgICBydHM6IHRydWUsXHJcbiAqICAgICBzbGVlcE9uUGF1c2U6IGZhbHNlXHJcbiAqICAgfSkudGhlbigoKSA9PiB7XHJcbiAqICAgICBjb25zb2xlLmxvZygnU2VyaWFsIGNvbm5lY3Rpb24gb3BlbmVkJyk7XHJcbiAqICAgfSk7XHJcbiAqIH0pLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTZXJpYWwnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmFyZHVpbm8nLFxyXG4gIHBsdWdpblJlZjogJ3NlcmlhbCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS94c2VpZ25hcmQvY29yZG92YXJkdWlubycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnVWJ1bnR1J10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNlcmlhbCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBSZXF1ZXN0IHBlcm1pc3Npb24gdG8gY29ubmVjdCB0byBhIHNlcmlhbCBkZXZpY2VcclxuICAgKlxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTZXJpYWxQZXJtaXNzaW9uT3B0aW9uc30gT3B0aW9ucyB1c2VkIHRvIHJlcXVlc3Qgc2VyaWFsIHBlcm1pc3Npb25zIGZvciBhbiB1bmtub3duIGRldmljZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHBlcm1pc3Npb25zIGFyZSBncmFudGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogMixcclxuICB9KVxyXG4gIHJlcXVlc3RQZXJtaXNzaW9uKG9wdGlvbnM/OiBTZXJpYWxQZXJtaXNzaW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVuIGNvbm5lY3Rpb24gdG8gYSBzZXJpYWwgZGV2aWNlXHJcbiAgICpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U2VyaWFsT3Blbk9wdGlvbnN9IE9wdGlvbnMgdXNlZCB0byBvcGVuIHNlcmlhbCBjb25uZWN0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNlcmlhbCBjb25uZWN0aW9uIGlzIG9wZW5lZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBvcGVuKG9wdGlvbnM6IFNlcmlhbE9wZW5PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdyaXRlIHRvIGEgc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IGRhdGEgdG8gd3JpdGUgdG8gdGhlIHNlcmlhbCBjb25uZWN0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHdyaXRlIGlzIGNvbXBsZXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHdyaXRlKGRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcml0ZSBoZXggdG8gYSBzZXJpYWwgY29ubmVjdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIGRhdGEge2FueX0gZGF0YSB0byB3cml0ZSB0byB0aGUgc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgd3JpdGUgaXMgY29tcGxldGVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgd3JpdGVIZXgoZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlYWQgZnJvbSBhIHNlcmlhbCBjb25uZWN0aW9uXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBkYXRhIHJlYWQgZnJvbSB0aGUgc2VyaWFsIGNvbm5lY3Rpb25cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVhZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogV2F0Y2ggdGhlIGluY29taW5nIGRhdGEgZnJvbSB0aGUgc2VyaWFsIGNvbm5lY3Rpb24uIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGVcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IE9ic2VydmFibGUgcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgeW91IGNhbiBzdWJzY3JpYmUgdG9cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgcmVnaXN0ZXJSZWFkQ2FsbGJhY2soKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb3NlIHRoZSBzZXJpYWwgY29ubmVjdGlvblxyXG4gICAqXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNlcmlhbCBjb25uZWN0aW9uIGlzIGNsb3NlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbG9zZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=