var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CleverTapOriginal = /** @class */ (function (_super) {
    __extends(CleverTapOriginal, _super);
    function CleverTapOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CleverTapOriginal.prototype.notifyDeviceReady = function () { return cordova(this, "notifyDeviceReady", {}, arguments); };
    CleverTapOriginal.prototype.enablePersonalization = function () { return cordova(this, "enablePersonalization", {}, arguments); };
    CleverTapOriginal.prototype.disablePersonalization = function () { return cordova(this, "disablePersonalization", {}, arguments); };
    CleverTapOriginal.prototype.setOptOut = function (optOut) { return cordova(this, "setOptOut", {}, arguments); };
    CleverTapOriginal.prototype.setOffline = function (offline) { return cordova(this, "setOffline", {}, arguments); };
    CleverTapOriginal.prototype.enableDeviceNetworkInfoReporting = function (enable) { return cordova(this, "enableDeviceNetworkInfoReporting", {}, arguments); };
    CleverTapOriginal.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    CleverTapOriginal.prototype.setPushToken = function (token) { return cordova(this, "setPushToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushXiaomiToken = function (token) { return cordova(this, "setPushXiaomiToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushBaiduToken = function (token) { return cordova(this, "setPushBaiduToken", {}, arguments); };
    CleverTapOriginal.prototype.setPushHuaweiToken = function (token) { return cordova(this, "setPushHuaweiToken", {}, arguments); };
    CleverTapOriginal.prototype.createNotification = function (extras) { return cordova(this, "createNotification", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannel = function (channelID, channelName, channelDescription, importance, showBadge) { return cordova(this, "createNotificationChannel", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithSound = function (channelID, channelName, channelDescription, importance, showBadge, sound) { return cordova(this, "createNotificationChannelWithSound", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithGroupId = function (channelID, channelName, channelDescription, importance, groupId, showBadge) { return cordova(this, "createNotificationChannelWithGroupId", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelWithGroupIdAndSound = function (channelID, channelName, channelDescription, importance, groupId, showBadge, sound) { return cordova(this, "createNotificationChannelWithGroupIdAndSound", {}, arguments); };
    CleverTapOriginal.prototype.createNotificationChannelGroup = function (groupID, groupName) { return cordova(this, "createNotificationChannelGroup", {}, arguments); };
    CleverTapOriginal.prototype.deleteNotificationChannel = function (channelID) { return cordova(this, "deleteNotificationChannel", {}, arguments); };
    CleverTapOriginal.prototype.deleteNotificationChannelGroup = function (groupID) { return cordova(this, "deleteNotificationChannelGroup", {}, arguments); };
    CleverTapOriginal.prototype.recordScreenView = function (screenName) { return cordova(this, "recordScreenView", {}, arguments); };
    CleverTapOriginal.prototype.recordEventWithName = function (eventName) { return cordova(this, "recordEventWithName", {}, arguments); };
    CleverTapOriginal.prototype.recordEventWithNameAndProps = function (eventName, eventProps) { return cordova(this, "recordEventWithNameAndProps", {}, arguments); };
    CleverTapOriginal.prototype.recordChargedEventWithDetailsAndItems = function (details, items) { return cordova(this, "recordChargedEventWithDetailsAndItems", {}, arguments); };
    CleverTapOriginal.prototype.eventGetFirstTime = function (eventName) { return cordova(this, "eventGetFirstTime", {}, arguments); };
    CleverTapOriginal.prototype.eventGetLastTime = function (eventName) { return cordova(this, "eventGetLastTime", {}, arguments); };
    CleverTapOriginal.prototype.eventGetOccurrences = function (eventName) { return cordova(this, "eventGetOccurrences", {}, arguments); };
    CleverTapOriginal.prototype.eventGetDetails = function (eventName) { return cordova(this, "eventGetDetails", {}, arguments); };
    CleverTapOriginal.prototype.getEventHistory = function () { return cordova(this, "getEventHistory", {}, arguments); };
    CleverTapOriginal.prototype.getLocation = function () { return cordova(this, "getLocation", {}, arguments); };
    CleverTapOriginal.prototype.setLocation = function (lat, lon) { return cordova(this, "setLocation", {}, arguments); };
    CleverTapOriginal.prototype.onUserLogin = function (profile) { return cordova(this, "onUserLogin", {}, arguments); };
    CleverTapOriginal.prototype.profileSet = function (profile) { return cordova(this, "profileSet", {}, arguments); };
    CleverTapOriginal.prototype.profileSetGraphUser = function (profile) { return cordova(this, "profileSetGraphUser", {}, arguments); };
    CleverTapOriginal.prototype.profileGooglePlusUser = function (profile) { return cordova(this, "profileGooglePlusUser", {}, arguments); };
    CleverTapOriginal.prototype.profileGetProperty = function (propertyName) { return cordova(this, "profileGetProperty", {}, arguments); };
    CleverTapOriginal.prototype.profileGetCleverTapAttributionIdentifier = function () { return cordova(this, "profileGetCleverTapAttributionIdentifier", {}, arguments); };
    CleverTapOriginal.prototype.profileGetCleverTapID = function () { return cordova(this, "profileGetCleverTapID", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveValueForKey = function (key) { return cordova(this, "profileRemoveValueForKey", {}, arguments); };
    CleverTapOriginal.prototype.profileSetMultiValues = function (key, values) { return cordova(this, "profileSetMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.profileAddMultiValue = function (key, value) { return cordova(this, "profileAddMultiValue", {}, arguments); };
    CleverTapOriginal.prototype.profileAddMultiValues = function (key, values) { return cordova(this, "profileAddMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveMultiValue = function (key, value) { return cordova(this, "profileRemoveMultiValue", {}, arguments); };
    CleverTapOriginal.prototype.profileRemoveMultiValues = function (key, values) { return cordova(this, "profileRemoveMultiValues", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetTimeElapsed = function () { return cordova(this, "sessionGetTimeElapsed", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetTotalVisits = function () { return cordova(this, "sessionGetTotalVisits", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetScreenCount = function () { return cordova(this, "sessionGetScreenCount", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetPreviousVisitTime = function () { return cordova(this, "sessionGetPreviousVisitTime", {}, arguments); };
    CleverTapOriginal.prototype.sessionGetUTMDetails = function () { return cordova(this, "sessionGetUTMDetails", {}, arguments); };
    CleverTapOriginal.prototype.pushInstallReferrer = function (source, medium, campaign) { return cordova(this, "pushInstallReferrer", {}, arguments); };
    CleverTapOriginal.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTapOriginal.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTapOriginal.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTapOriginal.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTapOriginal.prototype.getAllInboxMessages = function () { return cordova(this, "getAllInboxMessages", {}, arguments); };
    CleverTapOriginal.prototype.getUnreadInboxMessages = function () { return cordova(this, "getUnreadInboxMessages", {}, arguments); };
    CleverTapOriginal.prototype.getInboxMessageForId = function (messageId) { return cordova(this, "getInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.deleteInboxMessageForId = function (messageId) { return cordova(this, "deleteInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.markReadInboxMessageForId = function (messageId) { return cordova(this, "markReadInboxMessageForId", {}, arguments); };
    CleverTapOriginal.prototype.pushInboxNotificationViewedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationViewedEventForId", {}, arguments); };
    CleverTapOriginal.prototype.pushInboxNotificationClickedEventForId = function (messageId) { return cordova(this, "pushInboxNotificationClickedEventForId", {}, arguments); };
    CleverTapOriginal.prototype.setUIEditorConnectionEnabled = function (enabled) { return cordova(this, "setUIEditorConnectionEnabled", {}, arguments); };
    CleverTapOriginal.prototype.registerBooleanVariable = function (varName) { return cordova(this, "registerBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerDoubleVariable = function (varName) { return cordova(this, "registerDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerIntegerVariable = function (varName) { return cordova(this, "registerIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerStringVariable = function (varName) { return cordova(this, "registerStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerListOfBooleanVariable = function (varName) { return cordova(this, "registerListOfBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerListOfDoubleVariable = function (varName) { return cordova(this, "registerListOfDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerListOfIntegerVariable = function (varName) { return cordova(this, "registerListOfIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerListOfStringVariable = function (varName) { return cordova(this, "registerListOfStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerMapOfBooleanVariable = function (varName) { return cordova(this, "registerMapOfBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerMapOfDoubleVariable = function (varName) { return cordova(this, "registerMapOfDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerMapOfIntegerVariable = function (varName) { return cordova(this, "registerMapOfIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.registerMapOfStringVariable = function (varName) { return cordova(this, "registerMapOfStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.getBooleanVariable = function (varName, defaultValue) { return cordova(this, "getBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.getDoubleVariable = function (varName, defaultValue) { return cordova(this, "getDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.getIntegerVariable = function (varName, defaultValue) { return cordova(this, "getIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.getStringVariable = function (varName, defaultValue) { return cordova(this, "getStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.getListOfBooleanVariable = function (varName, defaultValue) { return cordova(this, "getListOfBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.getListOfDoubleVariable = function (varName, defaultValue) { return cordova(this, "getListOfDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.getListOfIntegerVariable = function (varName, defaultValue) { return cordova(this, "getListOfIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.getListOfStringVariable = function (varName, defaultValue) { return cordova(this, "getListOfStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.getMapOfBooleanVariable = function (varName, defaultValue) { return cordova(this, "getMapOfBooleanVariable", {}, arguments); };
    CleverTapOriginal.prototype.getMapOfDoubleVariable = function (varName, defaultValue) { return cordova(this, "getMapOfDoubleVariable", {}, arguments); };
    CleverTapOriginal.prototype.getMapOfIntegerVariable = function (varName, defaultValue) { return cordova(this, "getMapOfIntegerVariable", {}, arguments); };
    CleverTapOriginal.prototype.getMapOfStringVariable = function (varName, defaultValue) { return cordova(this, "getMapOfStringVariable", {}, arguments); };
    CleverTapOriginal.prototype.getAllDisplayUnits = function () { return cordova(this, "getAllDisplayUnits", {}, arguments); };
    CleverTapOriginal.prototype.getDisplayUnitForId = function (id) { return cordova(this, "getDisplayUnitForId", {}, arguments); };
    CleverTapOriginal.prototype.pushDisplayUnitViewedEventForID = function (id) { return cordova(this, "pushDisplayUnitViewedEventForID", {}, arguments); };
    CleverTapOriginal.prototype.pushDisplayUnitClickedEventForID = function (id) { return cordova(this, "pushDisplayUnitClickedEventForID", {}, arguments); };
    CleverTapOriginal.prototype.getFeatureFlag = function (key, defaultValue) { return cordova(this, "getFeatureFlag", {}, arguments); };
    CleverTapOriginal.prototype.setDefaultsMap = function (defaults) { return cordova(this, "setDefaultsMap", {}, arguments); };
    CleverTapOriginal.prototype.fetch = function () { return cordova(this, "fetch", {}, arguments); };
    CleverTapOriginal.prototype.fetchWithMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "fetchWithMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTapOriginal.prototype.activate = function () { return cordova(this, "activate", {}, arguments); };
    CleverTapOriginal.prototype.fetchAndActivate = function () { return cordova(this, "fetchAndActivate", {}, arguments); };
    CleverTapOriginal.prototype.setMinimumFetchIntervalInSeconds = function (timeInterval) { return cordova(this, "setMinimumFetchIntervalInSeconds", {}, arguments); };
    CleverTapOriginal.prototype.getLastFetchTimeStampInMillis = function () { return cordova(this, "getLastFetchTimeStampInMillis", {}, arguments); };
    CleverTapOriginal.prototype.getString = function () { return cordova(this, "getString", {}, arguments); };
    CleverTapOriginal.prototype.getBoolean = function () { return cordova(this, "getBoolean", {}, arguments); };
    CleverTapOriginal.prototype.getLong = function () { return cordova(this, "getLong", {}, arguments); };
    CleverTapOriginal.prototype.getDouble = function () { return cordova(this, "getDouble", {}, arguments); };
    CleverTapOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    CleverTapOriginal.prototype.setDebugLevel = function (level) { return cordova(this, "setDebugLevel", {}, arguments); };
    CleverTapOriginal.pluginName = "CleverTap";
    CleverTapOriginal.plugin = "clevertap-cordova";
    CleverTapOriginal.pluginRef = "CleverTap";
    CleverTapOriginal.repo = "https://github.com/CleverTap/clevertap-cordova";
    CleverTapOriginal.platforms = ["Android", "iOS"];
    return CleverTapOriginal;
}(IonicNativePlugin));
var CleverTap = new CleverTapOriginal();
export { CleverTap };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NsZXZlcnRhcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF5QnpDLDZCQUFpQjs7OztJQVE5QyxxQ0FBaUI7SUFjakIseUNBQXFCO0lBVXJCLDBDQUFzQjtJQVV0Qiw2QkFBUyxhQUFDLE1BQWU7SUFVekIsOEJBQVUsYUFBQyxPQUFnQjtJQVUzQixvREFBZ0MsYUFBQyxNQUFlO0lBYWhELGdDQUFZO0lBVVosZ0NBQVksYUFBQyxLQUFhO0lBVTFCLHNDQUFrQixhQUFDLEtBQWE7SUFVaEMscUNBQWlCLGFBQUMsS0FBYTtJQVUvQixzQ0FBa0IsYUFBQyxLQUFhO0lBVWhDLHNDQUFrQixhQUNoQixNQUFXO0lBZWIsNkNBQXlCLGFBQ3ZCLFNBQWlCLEVBQ2pCLFdBQW1CLEVBQ25CLGtCQUEwQixFQUMxQixVQUFrQixFQUNsQixTQUFrQjtJQWdCcEIsc0RBQWtDLGFBQ2hDLFNBQWlCLEVBQ2pCLFdBQW1CLEVBQ25CLGtCQUEwQixFQUMxQixVQUFrQixFQUNsQixTQUFrQixFQUNsQixLQUFhO0lBaUJmLHdEQUFvQyxhQUNsQyxTQUFpQixFQUNqQixXQUFtQixFQUNuQixrQkFBMEIsRUFDMUIsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLFNBQWtCO0lBZ0JwQixnRUFBNEMsYUFDMUMsU0FBaUIsRUFDakIsV0FBbUIsRUFDbkIsa0JBQTBCLEVBQzFCLFVBQWtCLEVBQ2xCLE9BQWUsRUFDZixTQUFrQixFQUNsQixLQUFhO0lBWWYsa0RBQThCLGFBQUMsT0FBZSxFQUFFLFNBQWlCO0lBVWpFLDZDQUF5QixhQUFDLFNBQWlCO0lBVTNDLGtEQUE4QixhQUFDLE9BQWU7SUFjOUMsb0NBQWdCLGFBQUMsVUFBa0I7SUFVbkMsdUNBQW1CLGFBQUMsU0FBaUI7SUFXckMsK0NBQTJCLGFBQUMsU0FBaUIsRUFBRSxVQUFlO0lBVzlELHlEQUFxQyxhQUFDLE9BQVksRUFBRSxLQUFVO0lBVzlELHFDQUFpQixhQUFDLFNBQWlCO0lBV25DLG9DQUFnQixhQUFDLFNBQWlCO0lBV2xDLHVDQUFtQixhQUFDLFNBQWlCO0lBV3JDLG1DQUFlLGFBQUMsU0FBaUI7SUFVakMsbUNBQWU7SUF3QmYsK0JBQVc7SUFXWCwrQkFBVyxhQUFDLEdBQVcsRUFBRSxHQUFXO0lBeUJwQywrQkFBVyxhQUFDLE9BQVk7SUFVeEIsOEJBQVUsYUFBQyxPQUFZO0lBVXZCLHVDQUFtQixhQUFDLE9BQVk7SUFVaEMseUNBQXFCLGFBQUMsT0FBWTtJQVdsQyxzQ0FBa0IsYUFBQyxZQUFvQjtJQVV2Qyw0REFBd0M7SUFVeEMseUNBQXFCO0lBVXJCLDRDQUF3QixhQUFDLEdBQVc7SUFXcEMseUNBQXFCLGFBQUMsR0FBVyxFQUFFLE1BQVc7SUFXOUMsd0NBQW9CLGFBQUMsR0FBVyxFQUFFLEtBQWE7SUFXL0MseUNBQXFCLGFBQUMsR0FBVyxFQUFFLE1BQVc7SUFXOUMsMkNBQXVCLGFBQUMsR0FBVyxFQUFFLEtBQWE7SUFXbEQsNENBQXdCLGFBQUMsR0FBVyxFQUFFLE1BQVc7SUFjakQseUNBQXFCO0lBVXJCLHlDQUFxQjtJQVVyQix5Q0FBcUI7SUFVckIsK0NBQTJCO0lBVTNCLHdDQUFvQjtJQVlwQix1Q0FBbUIsYUFBQyxNQUFjLEVBQUUsTUFBYyxFQUFFLFFBQWdCO0lBV3BFLG1DQUFlO0lBUWYsOENBQTBCO0lBUTFCLHdDQUFvQjtJQVNwQiw2QkFBUyxhQUFDLFdBQWdCO0lBVzFCLG1DQUFlO0lBUWYsOENBQTBCO0lBUTFCLHdDQUFvQjtJQVNwQiw2QkFBUyxhQUFDLFdBQWdCO0lBUzFCLHVDQUFtQjtJQVNuQiwwQ0FBc0I7SUFVdEIsd0NBQW9CLGFBQUMsU0FBaUI7SUFVdEMsMkNBQXVCLGFBQUMsU0FBaUI7SUFVekMsNkNBQXlCLGFBQUMsU0FBaUI7SUFVM0MseURBQXFDLGFBQUMsU0FBaUI7SUFVdkQsMERBQXNDLGFBQUMsU0FBaUI7SUFVeEQsZ0RBQTRCLGFBQUMsT0FBZ0I7SUFVN0MsMkNBQXVCLGFBQUMsT0FBZTtJQVV2QywwQ0FBc0IsYUFBQyxPQUFlO0lBVXRDLDJDQUF1QixhQUFDLE9BQWU7SUFVdkMsMENBQXNCLGFBQUMsT0FBZTtJQVV0QyxpREFBNkIsYUFBQyxPQUFlO0lBVTdDLGdEQUE0QixhQUFDLE9BQWU7SUFVNUMsaURBQTZCLGFBQUMsT0FBZTtJQVU3QyxnREFBNEIsYUFBQyxPQUFlO0lBVTVDLGdEQUE0QixhQUFDLE9BQWU7SUFVNUMsK0NBQTJCLGFBQUMsT0FBZTtJQVUzQyxnREFBNEIsYUFBQyxPQUFlO0lBVTVDLCtDQUEyQixhQUFDLE9BQWU7SUFZM0Msc0NBQWtCLGFBQ2hCLE9BQWUsRUFDZixZQUFxQjtJQVl2QixxQ0FBaUIsYUFDZixPQUFlLEVBQ2YsWUFBb0I7SUFZdEIsc0NBQWtCLGFBQ2hCLE9BQWUsRUFDZixZQUFvQjtJQVl0QixxQ0FBaUIsYUFDZixPQUFlLEVBQ2YsWUFBb0I7SUFZdEIsNENBQXdCLGFBQ3RCLE9BQWUsRUFDZixZQUFpQjtJQVluQiwyQ0FBdUIsYUFDckIsT0FBZSxFQUNmLFlBQWlCO0lBWW5CLDRDQUF3QixhQUN0QixPQUFlLEVBQ2YsWUFBaUI7SUFZbkIsMkNBQXVCLGFBQ3JCLE9BQWUsRUFDZixZQUFpQjtJQVluQiwyQ0FBdUIsYUFDckIsT0FBZSxFQUNmLFlBQWlCO0lBWW5CLDBDQUFzQixhQUNwQixPQUFlLEVBQ2YsWUFBaUI7SUFZbkIsMkNBQXVCLGFBQ3JCLE9BQWUsRUFDZixZQUFpQjtJQVluQiwwQ0FBc0IsYUFDcEIsT0FBZSxFQUNmLFlBQWlCO0lBVW5CLHNDQUFrQjtJQVVsQix1Q0FBbUIsYUFBQyxFQUFVO0lBVTlCLG1EQUErQixhQUFDLEVBQVU7SUFVMUMsb0RBQWdDLGFBQUMsRUFBVTtJQVczQyxrQ0FBYyxhQUNaLEdBQVcsRUFDWCxZQUFvQjtJQVd0QixrQ0FBYyxhQUNaLFFBQWE7SUFXZix5QkFBSztJQVVMLDBEQUFzQyxhQUFDLFlBQW9CO0lBUzNELDRCQUFRO0lBU1Isb0NBQWdCO0lBVWhCLG9EQUFnQyxhQUFDLFlBQW9CO0lBU3JELGlEQUE2QjtJQVU3Qiw2QkFBUztJQVVULDhCQUFVO0lBVVYsMkJBQU87SUFVUCw2QkFBUztJQVNULHlCQUFLO0lBYUwsaUNBQWEsYUFBQyxLQUFhOzs7Ozs7b0JBL3RDN0I7RUEwQitCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmRlY2xhcmUgdmFyIGNsZXZlcnRhcDogYW55O1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIENsZXZlclRhcFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29yZG92YSBQbHVnaW4gdGhhdCB3cmFwcyBDbGV2ZXJUYXAgU0RLIGZvciBBbmRyb2lkIGFuZCBpT1NcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2xldmVyVGFwIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jbGV2ZXJ0YXAvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjbGV2ZXJ0YXA6IENsZXZlclRhcCkgeyB9XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0NsZXZlclRhcCcsXHJcbiAgcGx1Z2luOiAnY2xldmVydGFwLWNvcmRvdmEnLFxyXG4gIHBsdWdpblJlZjogJ0NsZXZlclRhcCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9DbGV2ZXJUYXAvY2xldmVydGFwLWNvcmRvdmEnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDbGV2ZXJUYXAgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogbm90aWZ5IGRldmljZSByZWFkeVxyXG4gICAqIE5PVEU6IGluIGlPUyB1c2UgdG8gYmUgbm90aWZpZWQgb2YgbGF1bmNoIFB1c2ggTm90aWZpY2F0aW9uIG9yIERlZXAgTGlua1xyXG4gICAqIGluIEFuZHJvaWQgdXNlIG9ubHkgaW4gYW5kcm9pZCBwaG9uZWdhcCBidWlsZCBwcm9qZWN0c1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG5vdGlmeURldmljZVJlYWR5KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKioqKioqKioqKioqKioqKioqKlxyXG4gICAqIFBlcnNvbmFsaXphdGlvblxyXG4gICAqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcnNvbmFsaXphdGlvblxyXG4gICAqIEVuYWJsZXMgdGhlIFBlcnNvbmFsaXphdGlvbiBBUElcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmFibGVQZXJzb25hbGl6YXRpb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBlcnNvbmFsaXphdGlvblxyXG4gICAqIERpc2FibGVzIHRoZSBQZXJzb25hbGl6YXRpb24gQVBJXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGlzYWJsZVBlcnNvbmFsaXphdGlvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5hYmxlcyB0cmFja2luZyBvcHQgb3V0IGZvciB0aGUgY3VycmVudGx5IGFjdGl2ZSB1c2VyLlxyXG4gICAqIEBwYXJhbSBvcHRPdXQge2Jvb2xlYW59XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0T3B0T3V0KG9wdE91dDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIENsZXZlclRhcCBTREsgdG8gb2ZmbGluZSBtb2RlLlxyXG4gICAqIEBwYXJhbSBvZmZsaW5lIHtib29sZWFufVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldE9mZmxpbmUob2ZmbGluZTogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmFibGVzIHRoZSByZXBvcnRpbmcgb2YgZGV2aWNlIG5ldHdvcmsgcmVsYXRlZCBpbmZvcm1hdGlvbiwgaW5jbHVkaW5nIElQIGFkZHJlc3MuICBUaGlzIHJlcG9ydGluZyBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LlxyXG4gICAqIEBwYXJhbSBlbmFibGUge2Jvb2xlYW59XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZW5hYmxlRGV2aWNlTmV0d29ya0luZm9SZXBvcnRpbmcoZW5hYmxlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKioqKioqKioqKioqKioqKioqXHJcbiAgICogUHVzaFxyXG4gICAqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVycyBmb3IgcHVzaCBub3RpZmljYXRpb25zXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJQdXNoKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBkZXZpY2UncyBwdXNoIHRva2VuXHJcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0UHVzaFRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgZGV2aWNlJ3MgWGlhb21pIHB1c2ggdG9rZW5cclxuICAgKiBAcGFyYW0gdG9rZW4ge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRQdXNoWGlhb21pVG9rZW4odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBkZXZpY2UncyBCYWlkdSBwdXNoIHRva2VuXHJcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0UHVzaEJhaWR1VG9rZW4odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBkZXZpY2UncyBIdWF3ZWkgcHVzaCB0b2tlblxyXG4gICAqIEBwYXJhbSB0b2tlbiB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldFB1c2hIdWF3ZWlUb2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBOb3RpZmljYXRpb24gQ2hhbm5lbCBmb3IgQW5kcm9pZCBPK1xyXG4gICAqIEBwYXJhbSBleHRyYXMge2FueX1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjcmVhdGVOb3RpZmljYXRpb24oXHJcbiAgICBleHRyYXM6IGFueVxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgTm90aWZpY2F0aW9uIENoYW5uZWwgZm9yIEFuZHJvaWQgTytcclxuICAgKiBAcGFyYW0gY2hhbm5lbElEIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGNoYW5uZWxOYW1lIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGNoYW5uZWxEZXNjcmlwdGlvbiB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBpbXBvcnRhbmNlIHtudW1iZXJ9XHJcbiAgICogQHBhcmFtIHNob3dCYWRnZSB7Ym9vbGVhbn1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjcmVhdGVOb3RpZmljYXRpb25DaGFubmVsKFxyXG4gICAgY2hhbm5lbElEOiBzdHJpbmcsXHJcbiAgICBjaGFubmVsTmFtZTogc3RyaW5nLFxyXG4gICAgY2hhbm5lbERlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICBpbXBvcnRhbmNlOiBudW1iZXIsXHJcbiAgICBzaG93QmFkZ2U6IGJvb2xlYW5cclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIE5vdGlmaWNhdGlvbiBDaGFubmVsIGZvciBBbmRyb2lkIE8rXHJcbiAgICogQHBhcmFtIGNoYW5uZWxJRCB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBjaGFubmVsTmFtZSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBjaGFubmVsRGVzY3JpcHRpb24ge3N0cmluZ31cclxuICAgKiBAcGFyYW0gaW1wb3J0YW5jZSB7bnVtYmVyfVxyXG4gICAqIEBwYXJhbSBzaG93QmFkZ2Uge2Jvb2xlYW59XHJcbiAgICogQHBhcmFtIHNvdW5kIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlTm90aWZpY2F0aW9uQ2hhbm5lbFdpdGhTb3VuZChcclxuICAgIGNoYW5uZWxJRDogc3RyaW5nLFxyXG4gICAgY2hhbm5lbE5hbWU6IHN0cmluZyxcclxuICAgIGNoYW5uZWxEZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgaW1wb3J0YW5jZTogbnVtYmVyLFxyXG4gICAgc2hvd0JhZGdlOiBib29sZWFuLFxyXG4gICAgc291bmQ6IHN0cmluZ1xyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgTm90aWZpY2F0aW9uIENoYW5uZWwgd2l0aCBHcm91cCBJRCBmb3IgQW5kcm9pZCBPK1xyXG4gICAqIEBwYXJhbSBjaGFubmVsSUQge3N0cmluZ31cclxuICAgKiBAcGFyYW0gY2hhbm5lbE5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gY2hhbm5lbERlc2NyaXB0aW9uIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGltcG9ydGFuY2Uge251bWJlcn1cclxuICAgKiBAcGFyYW0gZ3JvdXBJZCB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBzaG93QmFkZ2Uge2Jvb2xlYW59XHJcbiAgICogQHBhcmFtIHNvdW5kIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlTm90aWZpY2F0aW9uQ2hhbm5lbFdpdGhHcm91cElkKFxyXG4gICAgY2hhbm5lbElEOiBzdHJpbmcsXHJcbiAgICBjaGFubmVsTmFtZTogc3RyaW5nLFxyXG4gICAgY2hhbm5lbERlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICBpbXBvcnRhbmNlOiBudW1iZXIsXHJcbiAgICBncm91cElkOiBzdHJpbmcsXHJcbiAgICBzaG93QmFkZ2U6IGJvb2xlYW5cclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIE5vdGlmaWNhdGlvbiBDaGFubmVsIHdpdGggR3JvdXAgSUQgZm9yIEFuZHJvaWQgTytcclxuICAgKiBAcGFyYW0gY2hhbm5lbElEIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGNoYW5uZWxOYW1lIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGNoYW5uZWxEZXNjcmlwdGlvbiB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBpbXBvcnRhbmNlIHtudW1iZXJ9XHJcbiAgICogQHBhcmFtIGdyb3VwSWQge3N0cmluZ31cclxuICAgKiBAcGFyYW0gc2hvd0JhZGdlIHtib29sZWFufVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZU5vdGlmaWNhdGlvbkNoYW5uZWxXaXRoR3JvdXBJZEFuZFNvdW5kKFxyXG4gICAgY2hhbm5lbElEOiBzdHJpbmcsXHJcbiAgICBjaGFubmVsTmFtZTogc3RyaW5nLFxyXG4gICAgY2hhbm5lbERlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICBpbXBvcnRhbmNlOiBudW1iZXIsXHJcbiAgICBncm91cElkOiBzdHJpbmcsXHJcbiAgICBzaG93QmFkZ2U6IGJvb2xlYW4sXHJcbiAgICBzb3VuZDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBOb3RpZmljYXRpb24gQ2hhbm5lbCBHcm91cCBmb3IgQW5kcm9pZCBPK1xyXG4gICAqIEBwYXJhbSBncm91cElEIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGdyb3VwTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZU5vdGlmaWNhdGlvbkNoYW5uZWxHcm91cChncm91cElEOiBzdHJpbmcsIGdyb3VwTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlbGV0ZSBOb3RpZmljYXRpb24gQ2hhbm5lbCBmb3IgQW5kcm9pZCBPK1xyXG4gICAqIEBwYXJhbSBjaGFubmVsSUQge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGVOb3RpZmljYXRpb25DaGFubmVsKGNoYW5uZWxJRDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlbGV0ZSBOb3RpZmljYXRpb24gR3JvdXAgZm9yIEFuZHJvaWQgTytcclxuICAgKiBAcGFyYW0gZ3JvdXBJRCB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZU5vdGlmaWNhdGlvbkNoYW5uZWxHcm91cChncm91cElEOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqKioqKioqKioqKioqKioqKipcclxuICAgKiBFdmVudHNcclxuICAgKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAvKipcclxuICAgKiBSZWNvcmQgU2NyZWVuIFZpZXdcclxuICAgKiBAcGFyYW0gc2NyZWVuTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlY29yZFNjcmVlblZpZXcoc2NyZWVuTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY29yZCBFdmVudCB3aXRoIE5hbWVcclxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVjb3JkRXZlbnRXaXRoTmFtZShldmVudE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAgUmVjb3JkIEV2ZW50IHdpdGggTmFtZSBhbmQgRXZlbnQgcHJvcGVydGllc1xyXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZXZlbnRQcm9wcyB7YW55fVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlY29yZEV2ZW50V2l0aE5hbWVBbmRQcm9wcyhldmVudE5hbWU6IHN0cmluZywgZXZlbnRQcm9wczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICBSZWNvcmQgQ2hhcmdlZCBFdmVudCB3aXRoIERldGFpbHMgYW5kIEl0ZW1zXHJcbiAgICogQHBhcmFtIGRldGFpbHMge2FueX0gIG9iamVjdCB3aXRoIHRyYW5zYWN0aW9uIGRldGFpbHNcclxuICAgKiBAcGFyYW0gaXRlbXMge2FueX0gIGFycmF5IG9mIGl0ZW1zIHB1cmNoYXNlZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlY29yZENoYXJnZWRFdmVudFdpdGhEZXRhaWxzQW5kSXRlbXMoZGV0YWlsczogYW55LCBpdGVtczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBFdmVudCBGaXJzdCBUaW1lXHJcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxyXG4gICAqIGNhbGxiYWNrIHJldHVybnMgZXBvY2ggc2Vjb25kcyBvciAtMVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV2ZW50R2V0Rmlyc3RUaW1lKGV2ZW50TmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBFdmVudCBMYXN0IFRpbWVcclxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHtzdHJpbmd9XHJcbiAgICogY2FsbGJhY2sgcmV0dXJucyBlcG9jaCBzZWNvbmRzIG9yIC0xXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZXZlbnRHZXRMYXN0VGltZShldmVudE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgRXZlbnQgTnVtYmVyIG9mIE9jY3VycmVuY2VzXHJcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCBpbnQgb3IgLTFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBldmVudEdldE9jY3VycmVuY2VzKGV2ZW50TmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBFdmVudCBEZXRhaWxzXHJcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCBvYmplY3Qge1wiZXZlbnROYW1lXCI6IDxzdHJpbmc+LCBcImZpcnN0VGltZVwiOjxlcG9jaCBzZWNvbmRzPiwgXCJsYXN0VGltZVwiOiA8ZXBvY2ggc2Vjb25kcz4sIFwiY291bnRcIjogPGludD59IG9yIGVtcHR5IG9iamVjdFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGV2ZW50R2V0RGV0YWlscyhldmVudE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgRXZlbnQgSGlzdG9yeVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCBvYmplY3Qge1wiZXZlbnROYW1lMVwiOjxldmVudDEgZGV0YWlscyBvYmplY3Q+LCBcImV2ZW50TmFtZTJcIjo8ZXZlbnQyIGRldGFpbHMgb2JqZWN0Pn1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRFdmVudEhpc3RvcnkoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKioqKioqKioqKioqKioqKioqXHJcbiAgICogUHJvZmlsZXNcclxuICAgKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGRldmljZSBsb2NhdGlvbiBpZiBhdmFpbGFibGUuXHJcbiAgICogT24gaU9TOlxyXG4gICAqIENhbGxpbmcgdGhpcyB3aWxsIHByb21wdCB0aGUgdXNlciBsb2NhdGlvbiBwZXJtaXNzaW9ucyBkaWFsb2cuXHJcbiAgICogUGxlYXNlIGJlIHN1cmUgdG8gaW5jbHVkZSB0aGUgTlNMb2NhdGlvbldoZW5JblVzZVVzYWdlRGVzY3JpcHRpb24ga2V5IGluIHlvdXIgSW5mby5wbGlzdC5cclxuICAgKiBVc2VzIGRlc2lyZWQgYWNjdXJhY3kgb2Yga0NMTG9jYXRpb25BY2N1cmFjeUh1bmRyZWRNZXRlcnMuXHJcbiAgICogSWYgeW91IG5lZWQgYmFja2dyb3VuZCBsb2NhdGlvbiB1cGRhdGVzIG9yIGZpbmVyIGFjY3VyYWN5IHBsZWFzZSBpbXBsZW1lbnQgeW91ciBvd24gbG9jYXRpb24gaGFuZGxpbmcuXHJcbiAgICogT24gQW5kcm9pZDpcclxuICAgKiBSZXF1aXJlcyBMb2NhdGlvbiBQZXJtaXNzaW9uIGluIEFuZHJvaWRNYW5pZmVzdCBlLmcuIFwiYW5kcm9pZC5wZXJtaXNzaW9uLkFDQ0VTU19DT0FSU0VfTE9DQVRJT05cIlxyXG4gICAqIFlvdSBjYW4gdXNlIGxvY2F0aW9uIHRvIHBhc3MgaXQgdG8gQ2xldmVyVGFwIHZpYSB0aGUgc2V0TG9jYXRpb24gQVBJXHJcbiAgICogZm9yLCBhbW9uZyBvdGhlciB0aGluZ3MsIG1vcmUgZmluZS1ncmFpbmVkIGdlby10YXJnZXRpbmcgYW5kIHNlZ21lbnRhdGlvbiBwdXJwb3Nlcy5cclxuICAgKiBOb3RlOiBvbiBpT1MgdGhlIGNhbGwgdG8gQ2xldmVyVGFwU0RLIG11c3QgYmUgbWFkZSBvbiB0aGUgbWFpbiB0aHJlYWQgZHVlIHRvIExvY2F0aW9uTWFuYWdlciByZXN0cmljdGlvbnMsIGJ1dCB0aGUgQ2xldmVyVGFwU0RLIG1ldGhvZCBpdHNlbGYgaXMgbm9uLWJsb2NraW5nLlxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCB7bGF0OmxhdCwgbG9uOmxvbn0gbGF0IGFuZCBsb24gYXJlIGZsb2F0c1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldExvY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgbG9jYXRpb25cclxuICAgKiBAcGFyYW0gbGF0IHtudW1iZXJ9XHJcbiAgICogQHBhcmFtIGxvbiB7bnVtYmVyfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldExvY2F0aW9uKGxhdDogbnVtYmVyLCBsb246IG51bWJlcik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgc2VwYXJhdGUgYW5kIGRpc3RpbmN0IHVzZXIgcHJvZmlsZSBpZGVudGlmaWVkIGJ5IG9uZSBvciBtb3JlIG9mIElkZW50aXR5LCBFbWFpbCwgRkJJRCBvciBHUElEIHZhbHVlcyxcclxuICAgKiBhbmQgcG9wdWxhdGVkIHdpdGggdGhlIGtleS12YWx1ZXMgaW5jbHVkZWQgaW4gdGhlIHByb2ZpbGUgZGljdGlvbmFyeS5cclxuICAgKiBJZiB5b3VyIGFwcCBpcyB1c2VkIGJ5IG11bHRpcGxlIHVzZXJzLCB5b3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBhc3NpZ24gdGhlbSBlYWNoIGEgdW5pcXVlIHByb2ZpbGUgdG8gdHJhY2sgdGhlbSBzZXBhcmF0ZWx5LlxyXG4gICAqIElmIGluc3RlYWQgeW91IHdpc2ggdG8gYXNzaWduIG11bHRpcGxlIElkZW50aXR5LCBFbWFpbCwgRkJJRCBhbmQvb3IgR1BJRCB2YWx1ZXMgdG8gdGhlIHNhbWUgdXNlciBwcm9maWxlLFxyXG4gICAqIHVzZSBwcm9maWxlU2V0IHJhdGhlciB0aGFuIHRoaXMgbWV0aG9kLlxyXG4gICAqIElmIG5vbmUgb2YgSWRlbnRpdHksIEVtYWlsLCBGQklEIG9yIEdQSUQgaXMgaW5jbHVkZWQgaW4gdGhlIHByb2ZpbGUgZGljdGlvbmFyeSxcclxuICAgKiBhbGwgcHJvcGVydGllcyB2YWx1ZXMgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgdXNlciBwcm9maWxlLlxyXG4gICAqIFdoZW4gaW5pdGlhbGx5IGluc3RhbGxlZCBvbiB0aGlzIGRldmljZSwgeW91ciBhcHAgaXMgYXNzaWduZWQgYW4gXCJhbm9ueW1vdXNcIiBwcm9maWxlLlxyXG4gICAqIFRoZSBmaXJzdCB0aW1lIHlvdSBpZGVudGlmeSBhIHVzZXIgb24gdGhpcyBkZXZpY2UgKHdoZXRoZXIgdmlhIG9uVXNlckxvZ2luIG9yIHByb2ZpbGVTZXQpLFxyXG4gICAqIHRoZSBcImFub255bW91c1wiIGhpc3Rvcnkgb24gdGhlIGRldmljZSB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgbmV3bHkgaWRlbnRpZmllZCB1c2VyLlxyXG4gICAqIFRoZW4sIHVzZSB0aGlzIG1ldGhvZCB0byBzd2l0Y2ggYmV0d2VlbiBzdWJzZXF1ZW50IHNlcGFyYXRlIGlkZW50aWZpZWQgdXNlcnMuXHJcbiAgICogUGxlYXNlIG5vdGUgdGhhdCBzd2l0Y2hpbmcgZnJvbSBvbmUgaWRlbnRpZmllZCB1c2VyIHRvIGFub3RoZXIgaXMgYSBjb3N0bHkgb3BlcmF0aW9uXHJcbiAgICogaW4gdGhhdCB0aGUgY3VycmVudCBzZXNzaW9uIGZvciB0aGUgcHJldmlvdXMgdXNlciBpcyBhdXRvbWF0aWNhbGx5IGNsb3NlZFxyXG4gICAqIGFuZCBkYXRhIHJlbGF0aW5nIHRvIHRoZSBvbGQgdXNlciByZW1vdmVkLCBhbmQgYSBuZXcgc2Vzc2lvbiBpcyBzdGFydGVkXHJcbiAgICogZm9yIHRoZSBuZXcgdXNlciBhbmQgZGF0YSBmb3IgdGhhdCB1c2VyIHJlZnJlc2hlZCB2aWEgYSBuZXR3b3JrIGNhbGwgdG8gQ2xldmVyVGFwLlxyXG4gICAqIEluIGFkZGl0aW9uLCBhbnkgZ2xvYmFsIGZyZXF1ZW5jeSBjYXBzIGFyZSByZXNldCBhcyBwYXJ0IG9mIHRoZSBzd2l0Y2guXHJcbiAgICogQHBhcmFtIHByb2ZpbGUge2FueX0gb2JqZWN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgb25Vc2VyTG9naW4ocHJvZmlsZTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBwcm9maWxlIGF0dHJpYnV0ZXNcclxuICAgKiBAcGFyYW0gcHJvZmlsZSB7YW55fSBvYmplY3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlU2V0KHByb2ZpbGU6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgcHJvZmlsZSBhdHRyaWJ1dGVzIGZyb20gZmFjZWJvb2sgdXNlclxyXG4gICAqIEBwYXJhbSBwcm9maWxlIHthbnl9IGZhY2Vib29rIGdyYXBoIHVzZXIgb2JqZWN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvZmlsZVNldEdyYXBoVXNlcihwcm9maWxlOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHByb2ZpbGUgYXR0cmlidXRlcyByb20gZ29vZ2xlIHBsdXMgdXNlclxyXG4gICAqIEBwYXJhbSBwcm9maWxlIHthbnl9IGdvb2dsZSBwbHVzIHVzZXIgb2JqZWN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvZmlsZUdvb2dsZVBsdXNVc2VyKHByb2ZpbGU6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgVXNlciBQcm9maWxlIFByb3BlcnR5XHJcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSB7c3RyaW5nfVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCB2YWx1ZSBvZiBwcm9wZXJ0eU5hbWUgb3IgZmFsc2VcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlR2V0UHJvcGVydHkocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgdW5pcXVlIENsZXZlclRhcCBpZGVudGlmaWVyIHN1aXRhYmxlIGZvciB1c2Ugd2l0aCBpbnN0YWxsIGF0dHJpYnV0aW9uIHByb3ZpZGVycy5cclxuICAgKiBjYWxscyBiYWNrIHdpdGggdW5pcXVlIENsZXZlclRhcCBhdHRyaWJ1dGlvbiBpZGVudGlmaWVyXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvZmlsZUdldENsZXZlclRhcEF0dHJpYnV0aW9uSWRlbnRpZmllcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IFVzZXIgUHJvZmlsZSBDbGV2ZXJUYXBJRFxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCBDbGV2ZXJUYXBJRCBvciBmYWxzZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHByb2ZpbGVHZXRDbGV2ZXJUYXBJRCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgYnkga2V5IGZyb20gdGhlIHVzZXIgcHJvZmlsZVxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlUmVtb3ZlVmFsdWVGb3JLZXkoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGZvciBzZXR0aW5nIGEgbXVsdGktdmFsdWUgdXNlciBwcm9maWxlIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSB2YWx1ZXMge2FueX0gYXJyYXkgb2Ygc3RyaW5nc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHByb2ZpbGVTZXRNdWx0aVZhbHVlcyhrZXk6IHN0cmluZywgdmFsdWVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGZvciBhZGRpbmcgYSB2YWx1ZSB0byBhIG11bHRpLXZhbHVlIHVzZXIgcHJvZmlsZSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcGFyYW0gdmFsdWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlQWRkTXVsdGlWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgZm9yIGFkZGluZyB2YWx1ZXMgdG8gYSBtdWx0aS12YWx1ZSB1c2VyIHByb2ZpbGUgcHJvcGVydHlcclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIHZhbHVlcyB7YW55fSBhcnJheSBvZiBzdHJpbmdzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHJvZmlsZUFkZE11bHRpVmFsdWVzKGtleTogc3RyaW5nLCB2YWx1ZXM6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgZm9yIHJlbW92aW5nIGEgdmFsdWUgZnJvbSBhIG11bHRpLXZhbHVlIHVzZXIgcHJvZmlsZSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcGFyYW0gdmFsdWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlUmVtb3ZlTXVsdGlWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgZm9yIHJlbW92aW5nIGEgdmFsdWUgZnJvbSBhIG11bHRpLXZhbHVlIHVzZXIgcHJvZmlsZSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcGFyYW0gdmFsdWVzIHthbnl9IGFycmF5IG9mIHN0cmluZ3NcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBwcm9maWxlUmVtb3ZlTXVsdGlWYWx1ZXMoa2V5OiBzdHJpbmcsIHZhbHVlczogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKioqKioqKioqKioqKioqKioqXHJcbiAgICogU2Vzc2lvblxyXG4gICAqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBTZXNzaW9uIEVsYXBzZWQgVGltZVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCBzZWNvbmRzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2Vzc2lvbkdldFRpbWVFbGFwc2VkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgU2Vzc2lvbiBUb3RhbCBWaXNpdHNcclxuICAgKiBjYWxscyBiYWNrIHdpdGggd2l0aCBpbnQgb3IgLTFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXNzaW9uR2V0VG90YWxWaXNpdHMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBTZXNzaW9uIFNjcmVlbiBDb3VudFxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCB3aXRoIGludFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNlc3Npb25HZXRTY3JlZW5Db3VudCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IFNlc3Npb24gUHJldmlvdXMgVmlzaXQgVGltZVxyXG4gICAqIGNhbGxzIGJhY2sgd2l0aCB3aXRoIGVwb2NoIHNlY29uZHMgb3IgLTFcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXNzaW9uR2V0UHJldmlvdXNWaXNpdFRpbWUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBTZXNzc2lvbiBSZWZlcnJlciBVVE0gZGV0YWlsc1xyXG4gICAqIG9iamVjdCB7XCJzb3VyY2VcIjogPHN0cmluZz4sIFwibWVkaXVtXCI6IDxzdHJpbmc+LCBcImNhbXBhaWduXCI6IDxzdHJpbmc+fSBvciBlbXB0eSBvYmplY3RcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXNzaW9uR2V0VVRNRGV0YWlscygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIG1hbnVhbGx5IHRyYWNrIHRoZSB1dG0gZGV0YWlscyBmb3IgYW4gaW5jb21pbmcgaW5zdGFsbCByZWZlcnJlclxyXG4gICAqIEBwYXJhbSBzb3VyY2Uge3N0cmluZ31cclxuICAgKiBAcGFyYW0gbWVkaXVtIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGNhbXBhaWduIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHVzaEluc3RhbGxSZWZlcnJlcihzb3VyY2U6IHN0cmluZywgbWVkaXVtOiBzdHJpbmcsIGNhbXBhaWduOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgKiBOb3RpZmljYXRpb24gSW5ib3ggbWV0aG9kc1xyXG4gICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gaW5pdGlhbGl6ZSB0aGUgQXBwIEluYm94XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGluaXRpYWxpemVJbmJveCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBnZXQgdGhlIGNvdW50IG9mIHVucmVhZCBJbmJveCBtZXNzYWdlc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRJbmJveE1lc3NhZ2VVbnJlYWRDb3VudCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBnZXQgdGhlIGNvdW50IG9mIHRvdGFsIEluYm94IG1lc3NhZ2VzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEluYm94TWVzc2FnZUNvdW50KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIG9wZW4gdGhlIEFwcCBJbmJveFxyXG4gICAqIEBwYXJhbSBzdHlsZUNvbmZpZyA6IGFueSBvciBlbXB0eSBvYmplY3RcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hvd0luYm94KHN0eWxlQ29uZmlnOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAqIE5vdGlmaWNhdGlvbiBJbmJveCBtZXRob2RzXHJcbiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGluaXRpYWxpemUgdGhlIEFwcCBJbmJveFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0aWFsaXplSW5ib3goKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZ2V0IHRoZSBjb3VudCBvZiB1bnJlYWQgSW5ib3ggbWVzc2FnZXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SW5ib3hNZXNzYWdlVW5yZWFkQ291bnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZ2V0IHRoZSBjb3VudCBvZiB0b3RhbCBJbmJveCBtZXNzYWdlc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRJbmJveE1lc3NhZ2VDb3VudCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byBvcGVuIHRoZSBBcHAgSW5ib3hcclxuICAgKiBAcGFyYW0gc3R5bGVDb25maWcgOiBhbnkgb3IgZW1wdHkgb2JqZWN0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3dJbmJveChzdHlsZUNvbmZpZzogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBGZXRjaCBhbGwgSW5ib3ggTWVzc2FnZXNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRBbGxJbmJveE1lc3NhZ2VzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gRmV0Y2ggYWxsIFVucmVhZCBJbmJveCBNZXNzYWdlc1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFVucmVhZEluYm94TWVzc2FnZXMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBGZXRjaCBJbmJveCBNZXNzYWdlIEZvciBJZFxyXG4gICAqIEBwYXJhbSBtZXNzYWdlSWQge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRJbmJveE1lc3NhZ2VGb3JJZChtZXNzYWdlSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gRGVsZXRlIEluYm94IE1lc3NhZ2UgRm9yIElkXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VJZCB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZUluYm94TWVzc2FnZUZvcklkKG1lc3NhZ2VJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBNYXJrIFJlYWQgSW5ib3ggTWVzc2FnZSBGb3IgSWRcclxuICAgKiBAcGFyYW0gbWVzc2FnZUlkIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbWFya1JlYWRJbmJveE1lc3NhZ2VGb3JJZChtZXNzYWdlSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gTWFyayBQdXNoIEluYm94IE5vdGlmaWNhdGlvbiBWaWV3ZWQgRXZlbnQgZm9yIElkXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VJZCB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHB1c2hJbmJveE5vdGlmaWNhdGlvblZpZXdlZEV2ZW50Rm9ySWQobWVzc2FnZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIE1hcmsgUHVzaCBJbmJveCBOb3RpZmljYXRpb24gQ2xpY2tlZCBFdmVudCBmb3IgSWRcclxuICAgKiBAcGFyYW0gbWVzc2FnZUlkIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHVzaEluYm94Tm90aWZpY2F0aW9uQ2xpY2tlZEV2ZW50Rm9ySWQobWVzc2FnZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIFNldFVJRWRpdG9yIENvbm5lY3Rpb25cclxuICAgKiBAcGFyYW0gZW5hYmxlZCB7Ym9vbGVhbn1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRVSUVkaXRvckNvbm5lY3Rpb25FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIFJlZ2lzdGVyIEJvb2xlYW4gVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyQm9vbGVhblZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUmVnaXN0ZXIgRG91YmxlIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWdpc3RlckRvdWJsZVZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUmVnaXN0ZXIgSW50ZWdlciBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJJbnRlZ2VyVmFyaWFibGUodmFyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBSZWdpc3RlciBTdHJpbmcgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyU3RyaW5nVmFyaWFibGUodmFyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBSZWdpc3RlciBMaXN0IG9mIEJvb2xlYW4gVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyTGlzdE9mQm9vbGVhblZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUmVnaXN0ZXIgTGlzdCBvZiBEb3VibGUgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyTGlzdE9mRG91YmxlVmFyaWFibGUodmFyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBSZWdpc3RlciBMaXN0IG9mIEludGVnZXIgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyTGlzdE9mSW50ZWdlclZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUmVnaXN0ZXIgTGlzdCBvZiBTdHJpbmcgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyTGlzdE9mU3RyaW5nVmFyaWFibGUodmFyTmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBSZWdpc3RlciBNYXAgb2YgQm9vbGVhbiBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJNYXBPZkJvb2xlYW5WYXJpYWJsZSh2YXJOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIFJlZ2lzdGVyIE1hcCBvZiBEb3VibGUgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyTWFwT2ZEb3VibGVWYXJpYWJsZSh2YXJOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIFJlZ2lzdGVyIE1hcCBvZiBJbnRlZ2VyIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWdpc3Rlck1hcE9mSW50ZWdlclZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUmVnaXN0ZXIgTWFwIG9mIFN0cmluZyBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXJNYXBPZlN0cmluZ1ZhcmlhYmxlKHZhck5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBCb29sZWFuIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHtib29sZWFufVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEJvb2xlYW5WYXJpYWJsZShcclxuICAgIHZhck5hbWU6IHN0cmluZyxcclxuICAgIGRlZmF1bHRWYWx1ZTogYm9vbGVhblxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gR2V0IERvdWJsZSBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7bnVtYmVyfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldERvdWJsZVZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBudW1iZXJcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBJbnRlZ2VyIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHtudW1iZXJ9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SW50ZWdlclZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBudW1iZXJcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBTdHJpbmcgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRTdHJpbmdWYXJpYWJsZShcclxuICAgIHZhck5hbWU6IHN0cmluZyxcclxuICAgIGRlZmF1bHRWYWx1ZTogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgTGlzdCBvZiBCb29sZWFuIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHthbnl9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TGlzdE9mQm9vbGVhblZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBhbnlcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBMaXN0IG9mIERvdWJsZSBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7YW55fVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldExpc3RPZkRvdWJsZVZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBhbnlcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBMaXN0IG9mIEludGVnZXIgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge2FueX1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRMaXN0T2ZJbnRlZ2VyVmFyaWFibGUoXHJcbiAgICB2YXJOYW1lOiBzdHJpbmcsXHJcbiAgICBkZWZhdWx0VmFsdWU6IGFueVxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gR2V0IExpc3Qgb2YgU3RyaW5nIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHthbnl9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TGlzdE9mU3RyaW5nVmFyaWFibGUoXHJcbiAgICB2YXJOYW1lOiBzdHJpbmcsXHJcbiAgICBkZWZhdWx0VmFsdWU6IGFueVxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gZ2V0IE1hcCBvZiBCb29sZWFuIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHthbnl9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TWFwT2ZCb29sZWFuVmFyaWFibGUoXHJcbiAgICB2YXJOYW1lOiBzdHJpbmcsXHJcbiAgICBkZWZhdWx0VmFsdWU6IGFueVxyXG4gICk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gR2V0IE1hcCBvZiBEb3VibGUgVmFyaWFibGVcclxuICAgKiBAcGFyYW0gdmFyTmFtZSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge2FueX1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRNYXBPZkRvdWJsZVZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBhbnlcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBNYXAgb2YgSW50ZWdlciBWYXJpYWJsZVxyXG4gICAqIEBwYXJhbSB2YXJOYW1lIHtzdHJpbmd9XHJcbiAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSB7YW55fVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldE1hcE9mSW50ZWdlclZhcmlhYmxlKFxyXG4gICAgdmFyTmFtZTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBhbnlcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBNYXAgb2YgU3RyaW5nIFZhcmlhYmxlXHJcbiAgICogQHBhcmFtIHZhck5hbWUge3N0cmluZ31cclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIHthbnl9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TWFwT2ZTdHJpbmdWYXJpYWJsZShcclxuICAgIHZhck5hbWU6IHN0cmluZyxcclxuICAgIGRlZmF1bHRWYWx1ZTogYW55XHJcbiAgKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgQWxsIERpc3BsYXkgVW5pdHNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRBbGxEaXNwbGF5VW5pdHMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgRGlzcGxheSBVbml0IEZvciBJZFxyXG4gICAqIEBwYXJhbSBpZCB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldERpc3BsYXlVbml0Rm9ySWQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gUHVzaCBEaXNwbGF5VW5pdCBWaWV3ZWQgRXZlbnQgZm9yIElEXHJcbiAgICogQHBhcmFtIGlkIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHVzaERpc3BsYXlVbml0Vmlld2VkRXZlbnRGb3JJRChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBQdXNoIERpc3BsYXlVbml0IENsaWNrZWQgRXZlbnQgZm9yIElEXHJcbiAgICogQHBhcmFtIGlkIHtzdHJpbmd9XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcHVzaERpc3BsYXlVbml0Q2xpY2tlZEV2ZW50Rm9ySUQoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gR2V0IEZlYXR1cmUgRmxhZyBmb3Iga2V5XHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRGZWF0dXJlRmxhZyhcclxuICAgIGtleTogc3RyaW5nLFxyXG4gICAgZGVmYXVsdFZhbHVlOiBzdHJpbmdcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIFNldCBEZWZhdWx0cyBmb3IgUHJvZHVjdCBDb25maWdcclxuICAgKiBAcGFyYW0gZGVmYXVsdHMge2FueX1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXREZWZhdWx0c01hcChcclxuICAgIGRlZmF1bHRzOiBhbnlcclxuICApOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIGZvciBQcm9kdWN0IENvbmZpZyBGZXRjaFxyXG4gICAqIEBwYXJhbSBkZWZhdWx0cyB7YW55fVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZldGNoKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgZm9yIFByb2R1Y3QgQ29uZmlnIEZldGNoIHdpdGggTWluIEludGVydmFsXHJcbiAgICogQHBhcmFtIHRpbWVJbnRlcnZhbCB7bnVtYmVyfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGZldGNoV2l0aE1pbmltdW1GZXRjaEludGVydmFsSW5TZWNvbmRzKHRpbWVJbnRlcnZhbDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyBmb3IgUHJvZHVjdCBDb25maWcgQWN0aXZhdGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhY3RpdmF0ZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIGZvciBQcm9kdWN0IENvbmZpZyBGZXRjaCBhbmQgQWN0aXZhdGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBmZXRjaEFuZEFjdGl2YXRlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gc2V0IFByb2R1Y3QgQ29uZmlnIEZldGNoIHdpdGggTWluIEludGVydmFsXHJcbiAgICogQHBhcmFtIHRpbWVJbnRlcnZhbCB7bnVtYmVyfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldE1pbmltdW1GZXRjaEludGVydmFsSW5TZWNvbmRzKHRpbWVJbnRlcnZhbDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgTGFzdCBGZXRjaCBUaW1lIEludGVydmFsXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0TGFzdEZldGNoVGltZVN0YW1wSW5NaWxsaXMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgU3RyaW5nXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFN0cmluZygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbCB0aGlzIHRvIEdldCBCb29sZWFuXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEJvb2xlYW4oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBHZXQgTG9uZ1xyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRMb25nKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRoaXMgdG8gR2V0IERvdWJsZVxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ31cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXREb3VibGUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyB0byBSZXNldCBQcm9kdWN0IENvbmZpZ1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlc2V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKioqKioqKioqKioqKioqKioqKlxyXG4gICAqIERldmVsb3BlciBPcHRpb25zXHJcbiAgICoqKioqKioqKioqKioqKioqKi9cclxuICAvKipcclxuICAgKiAwIGlzIG9mZiwgMSBpcyBpbmZvLCAyIGlzIGRlYnVnLCBkZWZhdWx0IGlzIDFcclxuICAgKiBAcGFyYW0gbGV2ZWwge251bWJlcn1cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXREZWJ1Z0xldmVsKGxldmVsOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=