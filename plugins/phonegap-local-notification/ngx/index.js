import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaInstance, checkAvailability } from '@ionic-native/core';
var PLNObject = /** @class */ (function () {
    function PLNObject(title, options) {
        if (checkAvailability(PhonegapLocalNotification.pluginRef, null, PhonegapLocalNotification.pluginName) === true) {
            this._objectInstance = new Notification(title, options);
        }
    }
    PLNObject.prototype.close = function () { return cordovaInstance(this, "close", { "sync": true }, arguments); };
    return PLNObject;
}());
export { PLNObject };
var PhonegapLocalNotification = /** @class */ (function (_super) {
    __extends(PhonegapLocalNotification, _super);
    function PhonegapLocalNotification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * A global object that lets you interact with the Notification API.
     * @param title {string} Title of the local notification.
     * @param Options {LocalNotificationOptions} An object containing optional property/value pairs.
     * @returns {PLNObject}
     */
    PhonegapLocalNotification.prototype.create = function (title, options) {
        return new PLNObject(title, options);
    };
    PhonegapLocalNotification.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    PhonegapLocalNotification.pluginName = "Phonegap Local Notifications";
    PhonegapLocalNotification.plugin = "phonegap-plugin-local-notification";
    PhonegapLocalNotification.pluginRef = "Notification";
    PhonegapLocalNotification.repo = "https://github.com/phonegap/phonegap-plugin-local-notification";
    PhonegapLocalNotification.platforms = ["Android", "Browser", "iOS", "Windows"];
    PhonegapLocalNotification = __decorate([
        Injectable()
    ], PhonegapLocalNotification);
    return PhonegapLocalNotification;
}(IonicNativePlugin));
export { PhonegapLocalNotification };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3Bob25lZ2FwLWxvY2FsLW5vdGlmaWNhdGlvbi9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTywrQ0FBdUQsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFVMUcsbUJBQVksS0FBYSxFQUFFLE9BQWlDO1FBQzFELElBQUksaUJBQWlCLENBQUMseUJBQXlCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDL0csSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDO0lBR0QseUJBQUs7b0JBbEJQOzs7O0lBMkYrQyw2Q0FBaUI7Ozs7SUFDOUQ7Ozs7O09BS0c7SUFDSCwwQ0FBTSxHQUFOLFVBQU8sS0FBYSxFQUFFLE9BQWlDO1FBQ3JELE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFPRCxxREFBaUI7Ozs7OztJQWhCTix5QkFBeUI7UUFEckMsVUFBVSxFQUFFO09BQ0EseUJBQXlCO29DQTNGdEM7RUEyRitDLGlCQUFpQjtTQUFuRCx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFJbnN0YW5jZSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiwgY2hlY2tBdmFpbGFiaWxpdHkgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBOb3RpZmljYXRpb246IGFueTtcclxuXHJcbi8qKlxyXG4gKiBAaGlkZGVuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUExOT2JqZWN0IHtcclxuICBwcml2YXRlIF9vYmplY3RJbnN0YW5jZTogYW55O1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0aXRsZTogc3RyaW5nLCBvcHRpb25zOiBMb2NhbE5vdGlmaWNhdGlvbk9wdGlvbnMpIHtcclxuICAgIGlmIChjaGVja0F2YWlsYWJpbGl0eShQaG9uZWdhcExvY2FsTm90aWZpY2F0aW9uLnBsdWdpblJlZiwgbnVsbCwgUGhvbmVnYXBMb2NhbE5vdGlmaWNhdGlvbi5wbHVnaW5OYW1lKSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLl9vYmplY3RJbnN0YW5jZSA9IG5ldyBOb3RpZmljYXRpb24odGl0bGUsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQENvcmRvdmFJbnN0YW5jZSh7IHN5bmM6IHRydWUgfSlcclxuICBjbG9zZSgpOiB2b2lkIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxOb3RpZmljYXRpb25PcHRpb25zIHtcclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG5vdGlmaWNhdGlvbi4gT25lIG9mIFwiYXV0b1wiLCBcImx0clwiIG9yIFwicnRsXCJcclxuICAgKi9cclxuICBkaXI/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICBTZXRzIHRoZSBsYW5ndWFnZSBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICovXHJcbiAgbGFuZz86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgYm9keSBvZiB0aGUgbm90aWZpY2F0aW9uXHJcbiAgICovXHJcbiAgYm9keT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgaWRlbnRpZnlpbmcgdGFnIG9mIHRoZSBub3RpZmljYXRpb25cclxuICAgKi9cclxuICB0YWc/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGljb24gb2YgdGhlIG5vdGlmaWNhdGlvblxyXG4gICAqL1xyXG4gIGljb24/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBQaG9uZWdhcCBMb2NhbCBOb3RpZmljYXRpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBMb2NhbCBOb3RpZmljYXRpb24gcGx1Z2luIGdpdmVzIGRldmVsb3BlcnMgdGhlIGFiaWxpdHkgdG8gcG9zdCBub3RpZmljYXRpb25zIGZyb20gdGhlaXIgYXBwIHRoYXQgc2hvdyB1cCBpbiB0aGUgZGV2aWNl4oCZcyBub3RpZmljYXRpb24gYXJlYS5cclxuICogVGhlIEFQSSBmb3IgdGhlIGxvY2FsIG5vdGlmaWNhdGlvbiBwbHVnaW4gZm9sbG93cyB0aGUgVzNDIFdlYiBOb3RpZmljYXRpb25zIHNwZWNpZmljYXRpb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ub3RpZmljYXRpb25zL1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgXHJcbiAqIGltcG9ydCB7IFBob25lZ2FwTG9jYWxOb3RpZmljYXRpb24gfSBmcm9tICdAaW9uaWMtbmF0aXZlL3Bob25lZ2FwLWxvY2FsLW5vdGlmaWNhdGlvbi9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsTm90aWZpY2F0aW9uOiBQaG9uZWdhcExvY2FsTm90aWZpY2F0aW9uKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMubG9jYWxOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKFxyXG4gKiAgIChwZXJtaXNzaW9uKSA9PiB7XHJcbiAqICAgICBpZiAocGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XHJcbiAqXHJcbiAqICAgICAgIC8vIENyZWF0ZSB0aGUgbm90aWZpY2F0aW9uXHJcbiAqICAgICAgIHRoaXMubG9jYWxOb3RpZmljYXRpb24uY3JlYXRlKCdNeSBUaXRsZScsIHtcclxuICogICAgICAgICB0YWc6ICdtZXNzYWdlMScsXHJcbiAqICAgICAgICAgYm9keTogJ015IGJvZHknLFxyXG4gKiAgICAgICAgIGljb246ICdhc3NldHMvaWNvbi9mYXZpY29uLmljbydcclxuICogICAgICAgfSk7XHJcbiAqXHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKiApO1xyXG4gKlxyXG4gKiBgYGBcclxuICpcclxuICogQGludGVyZmFjZXNcclxuICogTG9jYWxOb3RpZmljYXRpb25PcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnUGhvbmVnYXAgTG9jYWwgTm90aWZpY2F0aW9ucycsXHJcbiAgcGx1Z2luOiAncGhvbmVnYXAtcGx1Z2luLWxvY2FsLW5vdGlmaWNhdGlvbicsXHJcbiAgcGx1Z2luUmVmOiAnTm90aWZpY2F0aW9uJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3Bob25lZ2FwL3Bob25lZ2FwLXBsdWdpbi1sb2NhbC1ub3RpZmljYXRpb24nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUGhvbmVnYXBMb2NhbE5vdGlmaWNhdGlvbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBBIGdsb2JhbCBvYmplY3QgdGhhdCBsZXRzIHlvdSBpbnRlcmFjdCB3aXRoIHRoZSBOb3RpZmljYXRpb24gQVBJLlxyXG4gICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBUaXRsZSBvZiB0aGUgbG9jYWwgbm90aWZpY2F0aW9uLlxyXG4gICAqIEBwYXJhbSBPcHRpb25zIHtMb2NhbE5vdGlmaWNhdGlvbk9wdGlvbnN9IEFuIG9iamVjdCBjb250YWluaW5nIG9wdGlvbmFsIHByb3BlcnR5L3ZhbHVlIHBhaXJzLlxyXG4gICAqIEByZXR1cm5zIHtQTE5PYmplY3R9XHJcbiAgICovXHJcbiAgY3JlYXRlKHRpdGxlOiBzdHJpbmcsIG9wdGlvbnM6IExvY2FsTm90aWZpY2F0aW9uT3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBQTE5PYmplY3QodGl0bGUsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVxdWVzdHMgcGVybWlzc2lvbiBmcm9tIHRoZSB1c2VyIHRvIHNob3cgYSBsb2NhbCBub3RpZmljYXRpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVxdWVzdFBlcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19