var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var NativeViewOriginal = /** @class */ (function (_super) {
    __extends(NativeViewOriginal, _super);
    function NativeViewOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NativeViewOriginal.prototype.show = function (packageOrClass, className, extraParams, success, error) { return cordova(this, "show", {}, arguments); };
    NativeViewOriginal.prototype.checkIfAppInstalled = function (config, success, error) { return cordova(this, "checkIfAppInstalled", {}, arguments); };
    NativeViewOriginal.prototype.showMarket = function (config, success, error) { return cordova(this, "showMarket", {}, arguments); };
    NativeViewOriginal.prototype.getBuildVariant = function (config, success, error) { return cordova(this, "getBuildVariant", { "platforms": ["android"] }, arguments); };
    NativeViewOriginal.pluginName = "NativeView";
    NativeViewOriginal.plugin = "cordova-plugin-nativeview";
    NativeViewOriginal.pluginRef = "cordova.plugins.NativeView";
    NativeViewOriginal.repo = "https://github.com/mfdeveloper/cordova-plugin-nativeview";
    NativeViewOriginal.platforms = ["Android", "iOS"];
    return NativeViewOriginal;
}(IonicNativePlugin));
var NativeView = new NativeViewOriginal();
export { NativeView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL25hdGl2ZS12aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBEeEMsOEJBQWlCOzs7O0lBbUMvQyx5QkFBSSxhQUNGLGNBQXFDLEVBQ3JDLFNBQWtCLEVBQ2xCLFdBQWlCLEVBQ2pCLE9BQWtCLEVBQ2xCLEtBQWdCO0lBY2xCLHdDQUFtQixhQUFDLE1BQW9CLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWE5RSwrQkFBVSxhQUFDLE1BQTBCLEVBQUUsT0FBa0IsRUFBRSxLQUFnQjtJQWtCM0Usb0NBQWUsYUFBQyxNQUFnQyxFQUFFLE9BQWtCLEVBQUUsS0FBZ0I7Ozs7OztxQkFoSnhGO0VBMkRnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG4vKipcclxuICogQG5hbWUgTmF0aXZlVmlld1xyXG4gKiBAZGVzY3JpcHRpb24gU2hvd3MgdGhlIG5hdGl2ZSB2aWV3LlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBOYXRpdmVWaWV3IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9uYXRpdmUtdmlldy9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZVZpZXc6IE5hdGl2ZVZpZXcpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5uYXRpdmVWaWV3LmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0VmlldyB7XHJcbiAgc3VjY2VzczogYm9vbGVhbjtcclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbiAgdXJpPzogc3RyaW5nO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRBcHBJbnN0YWxsZWQgZXh0ZW5kcyBSZXN1bHRWaWV3IHtcclxuICBwYWNrYWdlTmFtZT86IHN0cmluZztcclxuICBhcHBsaWNhdGlvbkluZm8/OiBzdHJpbmc7XHJcbiAgYWN0aXZpdHlOYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5hdGl2ZVBhcmFtcyB7XHJcbiAgcGFja2FnZT86IHN0cmluZztcclxuICBwYWNrYWdlTmFtZT86IHN0cmluZztcclxuICBwYWNrYWdlQXBwPzogc3RyaW5nO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICB1cmk/OiBzdHJpbmc7XHJcbiAgc3Rvcnlib2FyZE5hbWU/OiBzdHJpbmc7XHJcbiAgdmlld0NvbnRyb2xsZXJOYW1lPzogc3RyaW5nO1xyXG4gIHBhcmFtcz86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOYXRpdmVNYXJrZXRQYXJhbXMgZXh0ZW5kcyBOYXRpdmVQYXJhbXMge1xyXG4gIG1hcmtldElkPzogc3RyaW5nO1xyXG59XHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdOYXRpdmVWaWV3JyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1uYXRpdmV2aWV3JyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tZmRldmVsb3Blci9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmV2aWV3JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmF0aXZlVmlldyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBTaG93cyB0aGUgbmF0aXZlIHZpZXcuXHJcbiAgICpcclxuICAgKiBEZWZpbmUgdGhlIGBwYWNrYWdlT3JDbGFzc2AgcGFyYW0gdG8gYSBwYWNrYWdlIChBbmRyb2lkKSBvciBhXHJcbiAgICogc3Rvcnlib2FyZC9jbGFzc25hbWUgKElPUylcclxuICAgKlxyXG4gICAqIGBgYHRzXHJcbiAgICpcclxuICAgKiAvL0FuZHJvaWRcclxuICAgKiBjb3Jkb3ZhLnBsdWdpbnMuTmF0aXZlVmlldy5zaG93KCdjb20ubXljb21wYW55JywgJ015QWN0aXZpdHknKVxyXG4gICAqIC50aGVuKCgpID0+IHtcclxuICAgKiAgICAvLyBEbyBzb21ldGhpbmdcclxuICAgKiB9KTtcclxuICAgKlxyXG4gICAqIC8vSU9TXHJcbiAgICogY29yZG92YS5wbHVnaW5zLk5hdGl2ZVZpZXcuc2hvdygnTXlTdG9yeWJvYXJkJywgJ015VUlWaWV3Q29udHJvbGxlcicpXHJcbiAgICogLnRoZW4oKCkgPT4ge1xyXG4gICAqICAgIC8vIERvIHNvbWV0aGluZ1xyXG4gICAqIH0pO1xyXG4gICAqXHJcbiAgICogLy9PUiBCYWNrIHRvIHByZXZpb3VzIFZpZXcgKElPUyBvbmx5KVxyXG4gICAqIGNvcmRvdmEucGx1Z2lucy5OYXRpdmVWaWV3LnNob3coKS50aGVuKCgpID0+IHtcclxuICAgKiAgICAvLyBEbyBzb21ldGhpbmdcclxuICAgKiB9KTtcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOYXRpdmVQYXJhbXN8c3RyaW5nfSBwYWNrYWdlT3JDbGFzcyBQYWNrYWdlIG9yIGNsYXNzIG5hbWUgb2YgdmlldyB0byBvcGVuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSBDbGFzcyBuYW1lIG9mIHZpZXcgdG8gb3BlblxyXG4gICAqIEBwYXJhbSB7YW55fSBbZXh0cmFQYXJhbXNdIFtPcHRpb25hbF0gUGFyYW1zIHRvIHNlbmQgdG8gYSBOYXRpdmUgdmlldyB0aGF0IHdpbGwgYmUgb3BlbmVkXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3N1Y2Nlc3NdIFtPcHRpb25hbF0gQ2FsbGJhY2sgd2hlbiBzdWNjZXNzLCBpZiB5b3UgZG9uJ3Qgd2FudCB1c2UgcHJvbWlzZSBcInRoZW4oKVwiXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBbT3B0aW9uYWxdIENhbGxiYWNrIHdoZW4gZXJyb3IgaGFwcGVucywgaWYgeW91IGRvbid0IHdhbnQgdXNlIHByb21pc2UgXCJjYXRjaCgpXCJcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hvdyhcclxuICAgIHBhY2thZ2VPckNsYXNzOiBOYXRpdmVQYXJhbXMgfCBzdHJpbmcsXHJcbiAgICBjbGFzc05hbWU/OiBzdHJpbmcsXHJcbiAgICBleHRyYVBhcmFtcz86IGFueSxcclxuICAgIHN1Y2Nlc3M/OiBGdW5jdGlvbixcclxuICAgIGVycm9yPzogRnVuY3Rpb25cclxuICApOiBQcm9taXNlPFJlc3VsdFZpZXc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIGEgc3BlY2lmaWMgYXBwIGlzIGluc3RhbGxlZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOYXRpdmVQYXJhbXN9IGNvbmZpZ1xyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtzdWNjZXNzXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MuIFVzZSBgLnRoZW4oKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGNhbGxiZWQgd2hlbiBhbiBlcnJvciBoYXBwZW5zLiBVc2UgYC5jYXRjaCgpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3VsdEFwcEluc3RhbGxlZD59IFJldHVybnMgZGF0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5zdGFsbGVkIGFwcFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjaGVja0lmQXBwSW5zdGFsbGVkKGNvbmZpZzogTmF0aXZlUGFyYW1zLCBzdWNjZXNzPzogRnVuY3Rpb24sIGVycm9yPzogRnVuY3Rpb24pOiBQcm9taXNlPFJlc3VsdEFwcEluc3RhbGxlZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgYSBzdG9yZS9tYXJrZXQgZm8gaW5zdGFsbCBhIHNwZWNpZmljIGFwcFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOYXRpdmVNYXJrZXRQYXJhbXN9IGNvbmZpZyBOYXRpdmUgcGFja2FnZSBhbmQvb3IgbWFya2V0SWQgdG8gc2hvdyBpbiBHb29nbGUgUGxheS9BcHBsZSBTdG9yZVxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtzdWNjZXNzXSBDYWxsYmFjayB3aGVuIHN1Y2Nlc3MuIFVzZSBgLnRoZW4oKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JdIENhbGxiYWNrIGNhbGxiZWQgd2hlbiBhbiBlcnJvciBoYXBwZW5zLiBVc2UgYC5jYXRjaCgpYCBQcm9taXNlIG1ldGhvZCwgaW5zdGVhZFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3VsdFZpZXc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzaG93TWFya2V0KGNvbmZpZzogTmF0aXZlTWFya2V0UGFyYW1zLCBzdWNjZXNzPzogRnVuY3Rpb24sIGVycm9yPzogRnVuY3Rpb24pOiBQcm9taXNlPFJlc3VsdFZpZXc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICMjIyBBTkRST0lEIE9OTFlcclxuICAgKlxyXG4gICAqIEdldCB0aGUgKipBbmRyb2lkKiogY3VycmVudCBidWlsZCB2YXJpYW50IEZMQVZPUlxyXG4gICAqIFRoaXMgaXMgZ3JlYXQgaWYgeW91IGNoYW5nZSB0aGUgRkxBVk9SIGluIGNvbXBpbGUgdGltZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlnLmNhdGNoRXJyb3JdIGBjb25maWcuY2F0Y2hFcnJvcmAgVHJ1ZSwgaWYgeW91IHdpc2ggY2F0Y2ggYSBKU09OIHdpdGggZXJyb3IgaW5mb3JtYXRpb25cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc3VjY2Vzc10gQ2FsbGJhY2sgd2hlbiBzdWNjZXNzLiBVc2UgYC50aGVuKClgIFByb21pc2UgbWV0aG9kLCBpbnN0ZWFkXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yXSBDYWxsYmFjayBjYWxsYmVkIHdoZW4gYW4gZXJyb3IgaGFwcGVucy4gVXNlIGAuY2F0Y2goKWAgUHJvbWlzZSBtZXRob2QsIGluc3RlYWRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgY3VycmVudCBGTEFWT1Igc3RyaW5nXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2FuZHJvaWQnXSxcclxuICB9KVxyXG4gIGdldEJ1aWxkVmFyaWFudChjb25maWc6IHsgY2F0Y2hFcnJvcj86IGJvb2xlYW4gfSwgc3VjY2Vzcz86IEZ1bmN0aW9uLCBlcnJvcj86IEZ1bmN0aW9uKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19