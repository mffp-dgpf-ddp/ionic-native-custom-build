import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var WebServer = /** @class */ (function (_super) {
    __extends(WebServer, _super);
    function WebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebServer.prototype.start = function (port) { return cordova(this, "start", { "callbackOrder": "reverse" }, arguments); };
    WebServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebServer.prototype.onRequest = function () { return cordova(this, "onRequest", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    WebServer.prototype.sendResponse = function (requestId, responseObject) { return cordova(this, "sendResponse", {}, arguments); };
    WebServer.pluginName = "WebServer";
    WebServer.plugin = "cordova-plugin-webserver";
    WebServer.pluginRef = "window.webserver";
    WebServer.repo = "https://github.com/bykof/cordova-plugin-webserver.git";
    WebServer.platforms = ["Android", "iOS"];
    WebServer = __decorate([
        Injectable()
    ], WebServer);
    return WebServer;
}(IonicNativePlugin));
export { WebServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlYi1zZXJ2ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUErREgsNkJBQWlCOzs7O0lBUTlDLHlCQUFLLGFBQUMsSUFBYTtJQVFuQix3QkFBSTtJQWFKLDZCQUFTO0lBV1QsZ0NBQVksYUFBQyxTQUFpQixFQUFFLGNBQXdCOzs7Ozs7SUF4QzdDLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUztvQkFqRXRCO0VBaUUrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2Uge1xyXG4gIHN0YXR1czogbnVtYmVyO1xyXG4gIGJvZHk/OiBzdHJpbmc7XHJcbiAgcGF0aD86IHN0cmluZztcclxuICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3Qge1xyXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xyXG4gIGJvZHk6IHN0cmluZztcclxuICBoZWFkZXJzOiBzdHJpbmc7XHJcbiAgbWV0aG9kOiAnUE9TVCcgfCAnR0VUJyB8ICdQVVQnIHwgJ1BBVENIJyB8ICdERUxFVEUnO1xyXG4gIHBhdGg6IHN0cmluZztcclxuICBxdWVyeTogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgV2ViIFNlcnZlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzdGFydCBhIGxvY2FsIGR5bmFtaWMgY29udGVudCB3ZWIgc2VydmVyIGZvciBhbmRyb2lkIGFuZCBpT1MgZGV2aWNlcy5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgV2ViU2VydmVyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS93ZWItc2VydmVyL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2ViU2VydmVyOiBXZWJTZXJ2ZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy53ZWJTZXJ2ZXIub25SZXF1ZXN0KCkuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gKiAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gKiAgIGNvbnN0IHJlczogUmVzcG9uc2UgPSB7XHJcbiAqICAgICBzdGF0dXM6IDIwMCxcclxuICogICAgIGJvZHk6ICcnLFxyXG4gKiAgICAgaGVhZGVyczoge1xyXG4gKiAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvaHRtbCdcclxuICogICAgIH1cclxuICogICB9O1xyXG4gKlxyXG4gKiAgIHRoaXMud2ViU2VydmVyLnNlbmRSZXNwb25zZShkYXRhLnJlcXVlc3RJZCwgcmVzKVxyXG4gKiAgICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqIH0pO1xyXG4gKlxyXG4gKiB0aGlzLndlYlNlcnZlci5zdGFydCg4MClcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIFJlc3BvbnNlXHJcbiAqIFJlcXVlc3RcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdXZWJTZXJ2ZXInLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlYnNlcnZlcicsXHJcbiAgcGx1Z2luUmVmOiAnd2luZG93LndlYnNlcnZlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ieWtvZi9jb3Jkb3ZhLXBsdWdpbi13ZWJzZXJ2ZXIuZ2l0JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2ViU2VydmVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RhcnQgeW91ciB3ZWJzZXJ2ZXIuXHJcbiAgICogQHBhcmFtIHBvcnQge251bWJlcn0gUG9ydCBudW1iZXIgKGRlZmF1bHQgdG8gODA4MClcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBzdGFydChwb3J0PzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RvcCB5b3VyIHdlYnNlcnZlci5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RvcCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgc3RyZWFtcyBIVFRQIHJlcXVlc3RzIHRvIGFuIG9ic2VydmVyLlxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8UmVxdWVzdD59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0byByZXNvbHZlIGFzIGEgUmVxdWVzdCBvYmplY3RcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3AnLFxyXG4gIH0pXHJcbiAgb25SZXF1ZXN0KCk6IE9ic2VydmFibGU8UmVxdWVzdD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBtZXRob2Qgc2VuZHMgYSByZXNwb25zZSB0byBhIHJlcXVlc3QuXHJcbiAgICogQHBhcmFtIHJlcXVlc3RJZCB7c3RyaW5nfSBSZXF1ZXN0IElEIHRvIHJlc3BvbmQgdG9cclxuICAgKiBAcGFyYW0gcmVzcG9uc2VPYmplY3Qge1Jlc3BvbnNlfSBSZXNwb25zZSBvYmplY3RcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZW5kUmVzcG9uc2UocmVxdWVzdElkOiBzdHJpbmcsIHJlc3BvbnNlT2JqZWN0OiBSZXNwb25zZSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==