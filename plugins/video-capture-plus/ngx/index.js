import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var VideoCapturePlus = /** @class */ (function (_super) {
    __extends(VideoCapturePlus, _super);
    function VideoCapturePlus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoCapturePlus.prototype.captureVideo = function (options) { return cordova(this, "captureVideo", { "callbackOrder": "reverse" }, arguments); };
    VideoCapturePlus.pluginName = "VideoCapturePlus";
    VideoCapturePlus.plugin = "cordova-plugin-video-capture-plus";
    VideoCapturePlus.pluginRef = "window.plugins.videocaptureplus";
    VideoCapturePlus.repo = "https://github.com/danielsogl/cordova-plugin-video-capture-plus";
    VideoCapturePlus.platforms = ["Android", "iOS"];
    VideoCapturePlus = __decorate([
        Injectable()
    ], VideoCapturePlus);
    return VideoCapturePlus;
}(IonicNativePlugin));
export { VideoCapturePlus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpZGVvLWNhcHR1cmUtcGx1cy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF3SWxDLG9DQUFpQjs7OztJQVNyRCx1Q0FBWSxhQUFDLE9BQWlDOzs7Ozs7SUFUbkMsZ0JBQWdCO1FBRDVCLFVBQVUsRUFBRTtPQUNBLGdCQUFnQjsyQkF6STdCO0VBeUlzQyxpQkFBaUI7U0FBMUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWFGaWxlIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmlsZSwgd2l0aG91dCBwYXRoIGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIG5hbWU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZnVsbCBwYXRoIG9mIHRoZSBmaWxlLCBpbmNsdWRpbmcgdGhlIG5hbWUuXHJcbiAgICovXHJcbiAgZnVsbFBhdGg6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgZmlsZSdzIG1pbWUgdHlwZVxyXG4gICAqL1xyXG4gIHR5cGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGRhdGUgYW5kIHRpbWUgd2hlbiB0aGUgZmlsZSB3YXMgbGFzdCBtb2RpZmllZC5cclxuICAgKi9cclxuICBsYXN0TW9kaWZpZWREYXRlOiBEYXRlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgZmlsZSwgaW4gYnl0ZXMuXHJcbiAgICovXHJcbiAgc2l6ZTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBSZXRyaWV2ZXMgdGhlIGZvcm1hdCBpbmZvcm1hdGlvbiBvZiB0aGUgbWVkaWEgZmlsZS5cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzQ2FsbGJhY2tcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZXJyb3JDYWxsYmFja11cclxuICAgKi9cclxuICBnZXRGb3JtYXREYXRhKHN1Y2Nlc3NDYWxsYmFjazogKGRhdGE6IE1lZGlhRmlsZURhdGEpID0+IGFueSwgZXJyb3JDYWxsYmFjaz86IChlcnI6IGFueSkgPT4gYW55KTogYW55O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRmlsZURhdGEge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBhY3R1YWwgZm9ybWF0IG9mIHRoZSBhdWRpbyBhbmQgdmlkZW8gY29udGVudC5cclxuICAgKi9cclxuICBjb2RlY3M6IHN0cmluZztcclxuICAvKipcclxuICAgKiBUaGUgYXZlcmFnZSBiaXRyYXRlIG9mIHRoZSBjb250ZW50LiBUaGUgdmFsdWUgaXMgemVybyBmb3IgaW1hZ2VzLlxyXG4gICAqL1xyXG4gIGJpdHJhdGU6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBpbWFnZSBvciB2aWRlbyBpbiBwaXhlbHMuIFRoZSB2YWx1ZSBpcyB6ZXJvIGZvciBhdWRpbyBjbGlwcy5cclxuICAgKi9cclxuICBoZWlnaHQ6IG51bWJlcjtcclxuICAvKipcclxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGltYWdlIG9yIHZpZGVvIGluIHBpeGVscy4gVGhlIHZhbHVlIGlzIHplcm8gZm9yIGF1ZGlvIGNsaXBzLlxyXG4gICAqL1xyXG4gIHdpZHRoOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdmlkZW8gb3Igc291bmQgY2xpcCBpbiBzZWNvbmRzLiBUaGUgdmFsdWUgaXMgemVybyBmb3IgaW1hZ2VzLlxyXG4gICAqL1xyXG4gIGR1cmF0aW9uOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9DYXB0dXJlUGx1c09wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBudW1iZXIgb2YgdmlkZW9zIHRvIHJlY29yZCwgZGVmYXVsdCAxIChvbiBpT1MgYWx3YXlzIDEpXHJcbiAgICovXHJcbiAgbGltaXQ/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1heCBkdXJhdGlvbiBpbiBzZWNvbmRzLCBkZWZhdWx0IDAsIHdoaWNoIGlzICdmb3JldmVyJ1xyXG4gICAqL1xyXG4gIGR1cmF0aW9uPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgdG8gdHJ1ZSB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBsb3cgcXVhbGl0eSBzZXR0aW5nXHJcbiAgICovXHJcbiAgaGlnaHF1YWxpdHk/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgdG8gdHJ1ZSB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBiYWNrZmFjaW5nIGNhbWVyYSBzZXR0aW5nLlxyXG4gICAqIFlvdSdsbCB3YW50IHRvIHNuaWZmIHRoZSB1c2VyYWdlbnQvZGV2aWNlIGFuZCBwYXNzIHRoZSBiZXN0IG92ZXJsYXkgYmFzZWQgb24gdGhhdC4uIGFzc3VtaW5nIGlwaG9uZSBoZXJlXHJcbiAgICovXHJcbiAgZnJvbnRjYW1lcmE/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBwdXQgdGhlIHBuZyBvdmVybGF5IGluIHlvdXIgYXNzZXRzIGZvbGRlclxyXG4gICAqL1xyXG4gIHBvcnRyYWl0T3ZlcmxheT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogIG5vdCBwYXNzaW5nIGFuIG92ZXJsYXkgbWVhbnMgbm8gaW1hZ2UgaXMgc2hvd24gZm9yIHRoZSBsYW5kc2NhcGUgb3JpZW50YXRpb25cclxuICAgKi9cclxuICBsYW5kc2NhcGVPdmVybGF5Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBpT1Mgb25seVxyXG4gICAqL1xyXG4gIG92ZXJsYXlUZXh0Pzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQGJldGFcclxuICogQG5hbWUgVmlkZW8gQ2FwdHVyZSBQbHVzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBvZmZlcnMgc29tZSB1c2VmdWwgZXh0cmFzIG9uIHRvcCBvZiB0aGUgZGVmYXVsdCBNZWRpYSBDYXB0dXJlIFBsdWdpbiBjYXBhYmlsaXRpZXM6XHJcbiAqIC0gSEQgcmVjb3JkaW5nLlxyXG4gKiAtIFN0YXJ0aW5nIHdpdGggdGhlIGZyb250IGNhbWVyYS5cclxuICogLSBBIGN1c3RvbSBvdmVybGF5IChjdXJyZW50bHkgaU9TIG9ubHkpLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBWaWRlb0NhcHR1cmVQbHVzLCBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucywgTWVkaWFGaWxlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS92aWRlby1jYXB0dXJlLXBsdXMvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSB2aWRlb0NhcHR1cmVQbHVzOiBWaWRlb0NhcHR1cmVQbHVzKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIGNvbnN0IG9wdGlvbnM6IFZpZGVvQ2FwdHVyZVBsdXNPcHRpb25zID0ge1xyXG4gKiAgICBsaW1pdDogMSxcclxuICogICAgaGlnaHF1YWxpdHk6IHRydWUsXHJcbiAqICAgIHBvcnRyYWl0T3ZlcmxheTogJ2Fzc2V0cy9pbWcvY2FtZXJhL292ZXJsYXkvcG9ydHJhaXQucG5nJyxcclxuICogICAgbGFuZHNjYXBlT3ZlcmxheTogJ2Fzc2V0cy9pbWcvY2FtZXJhL292ZXJsYXkvbGFuZHNjYXBlLnBuZydcclxuICogfVxyXG4gKlxyXG4gKiB0aGlzLnZpZGVvQ2FwdHVyZVBsdXMuY2FwdHVyZVZpZGVvKG9wdGlvbnMpLnRoZW4obWVkaWFmaWxlOiBNZWRpYUZpbGVbXSA9PiBjb25zb2xlLmxvZyhtZWRpYWZpbGUpLCBlcnJvciA9PiBjb25zb2xlLmxvZygnU29tZXRoaW5nIHdlbnQgd3JvbmcnKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBNZWRpYUZpbGVcclxuICogTWVkaWFGaWxlRGF0YVxyXG4gKiBWaWRlb0NhcHR1cmVQbHVzT3B0aW9uc1xyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ1ZpZGVvQ2FwdHVyZVBsdXMnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXZpZGVvLWNhcHR1cmUtcGx1cycsXHJcbiAgcGx1Z2luUmVmOiAnd2luZG93LnBsdWdpbnMudmlkZW9jYXB0dXJlcGx1cycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxzb2dsL2NvcmRvdmEtcGx1Z2luLXZpZGVvLWNhcHR1cmUtcGx1cycsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFZpZGVvQ2FwdHVyZVBsdXMgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHJlY29yZGluZ3NcclxuICAgKiBAcGFyYW0gW29wdGlvbnNdIHtWaWRlb0NhcHR1cmVQbHVzT3B0aW9uc30gQ29uZmlndXJlIG9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1lZGlhRmlsZVtdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBjYXB0dXJlVmlkZW8ob3B0aW9ucz86IFZpZGVvQ2FwdHVyZVBsdXNPcHRpb25zKTogUHJvbWlzZTxNZWRpYUZpbGVbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=