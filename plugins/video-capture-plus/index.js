var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var VideoCapturePlusOriginal = /** @class */ (function (_super) {
    __extends(VideoCapturePlusOriginal, _super);
    function VideoCapturePlusOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoCapturePlusOriginal.prototype.captureVideo = function (options) { return cordova(this, "captureVideo", { "callbackOrder": "reverse" }, arguments); };
    VideoCapturePlusOriginal.pluginName = "VideoCapturePlus";
    VideoCapturePlusOriginal.plugin = "cordova-plugin-video-capture-plus";
    VideoCapturePlusOriginal.pluginRef = "window.plugins.videocaptureplus";
    VideoCapturePlusOriginal.repo = "https://github.com/danielsogl/cordova-plugin-video-capture-plus";
    VideoCapturePlusOriginal.platforms = ["Android", "iOS"];
    return VideoCapturePlusOriginal;
}(IonicNativePlugin));
var VideoCapturePlus = new VideoCapturePlusOriginal();
export { VideoCapturePlus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpZGVvLWNhcHR1cmUtcGx1cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUF3SWxDLG9DQUFpQjs7OztJQVNyRCx1Q0FBWSxhQUFDLE9BQWlDOzs7Ozs7MkJBbEpoRDtFQXlJc0MsaUJBQWlCO1NBQTFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRmlsZSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbGUsIHdpdGhvdXQgcGF0aCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZ1bGwgcGF0aCBvZiB0aGUgZmlsZSwgaW5jbHVkaW5nIHRoZSBuYW1lLlxyXG4gICAqL1xyXG4gIGZ1bGxQYXRoOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGZpbGUncyBtaW1lIHR5cGVcclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkYXRlIGFuZCB0aW1lIHdoZW4gdGhlIGZpbGUgd2FzIGxhc3QgbW9kaWZpZWQuXHJcbiAgICovXHJcbiAgbGFzdE1vZGlmaWVkRGF0ZTogRGF0ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHNpemUgb2YgdGhlIGZpbGUsIGluIGJ5dGVzLlxyXG4gICAqL1xyXG4gIHNpemU6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0cmlldmVzIHRoZSBmb3JtYXQgaW5mb3JtYXRpb24gb2YgdGhlIG1lZGlhIGZpbGUuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3VjY2Vzc0NhbGxiYWNrXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yQ2FsbGJhY2tdXHJcbiAgICovXHJcbiAgZ2V0Rm9ybWF0RGF0YShzdWNjZXNzQ2FsbGJhY2s6IChkYXRhOiBNZWRpYUZpbGVEYXRhKSA9PiBhbnksIGVycm9yQ2FsbGJhY2s/OiAoZXJyOiBhbnkpID0+IGFueSk6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpYUZpbGVEYXRhIHtcclxuICAvKipcclxuICAgKiBUaGUgYWN0dWFsIGZvcm1hdCBvZiB0aGUgYXVkaW8gYW5kIHZpZGVvIGNvbnRlbnQuXHJcbiAgICovXHJcbiAgY29kZWNzOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogVGhlIGF2ZXJhZ2UgYml0cmF0ZSBvZiB0aGUgY29udGVudC4gVGhlIHZhbHVlIGlzIHplcm8gZm9yIGltYWdlcy5cclxuICAgKi9cclxuICBiaXRyYXRlOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgaW1hZ2Ugb3IgdmlkZW8gaW4gcGl4ZWxzLiBUaGUgdmFsdWUgaXMgemVybyBmb3IgYXVkaW8gY2xpcHMuXHJcbiAgICovXHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBpbWFnZSBvciB2aWRlbyBpbiBwaXhlbHMuIFRoZSB2YWx1ZSBpcyB6ZXJvIGZvciBhdWRpbyBjbGlwcy5cclxuICAgKi9cclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIFRoZSBsZW5ndGggb2YgdGhlIHZpZGVvIG9yIHNvdW5kIGNsaXAgaW4gc2Vjb25kcy4gVGhlIHZhbHVlIGlzIHplcm8gZm9yIGltYWdlcy5cclxuICAgKi9cclxuICBkdXJhdGlvbjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvQ2FwdHVyZVBsdXNPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIHZpZGVvcyB0byByZWNvcmQsIGRlZmF1bHQgMSAob24gaU9TIGFsd2F5cyAxKVxyXG4gICAqL1xyXG4gIGxpbWl0PzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBNYXggZHVyYXRpb24gaW4gc2Vjb25kcywgZGVmYXVsdCAwLCB3aGljaCBpcyAnZm9yZXZlcidcclxuICAgKi9cclxuICBkdXJhdGlvbj86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRvIHRydWUgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgbG93IHF1YWxpdHkgc2V0dGluZ1xyXG4gICAqL1xyXG4gIGhpZ2hxdWFsaXR5PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRvIHRydWUgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2ZhY2luZyBjYW1lcmEgc2V0dGluZy5cclxuICAgKiBZb3UnbGwgd2FudCB0byBzbmlmZiB0aGUgdXNlcmFnZW50L2RldmljZSBhbmQgcGFzcyB0aGUgYmVzdCBvdmVybGF5IGJhc2VkIG9uIHRoYXQuLiBhc3N1bWluZyBpcGhvbmUgaGVyZVxyXG4gICAqL1xyXG4gIGZyb250Y2FtZXJhPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogcHV0IHRoZSBwbmcgb3ZlcmxheSBpbiB5b3VyIGFzc2V0cyBmb2xkZXJcclxuICAgKi9cclxuICBwb3J0cmFpdE92ZXJsYXk/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICBub3QgcGFzc2luZyBhbiBvdmVybGF5IG1lYW5zIG5vIGltYWdlIGlzIHNob3duIGZvciB0aGUgbGFuZHNjYXBlIG9yaWVudGF0aW9uXHJcbiAgICovXHJcbiAgbGFuZHNjYXBlT3ZlcmxheT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogaU9TIG9ubHlcclxuICAgKi9cclxuICBvdmVybGF5VGV4dD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBiZXRhXHJcbiAqIEBuYW1lIFZpZGVvIENhcHR1cmUgUGx1c1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gb2ZmZXJzIHNvbWUgdXNlZnVsIGV4dHJhcyBvbiB0b3Agb2YgdGhlIGRlZmF1bHQgTWVkaWEgQ2FwdHVyZSBQbHVnaW4gY2FwYWJpbGl0aWVzOlxyXG4gKiAtIEhEIHJlY29yZGluZy5cclxuICogLSBTdGFydGluZyB3aXRoIHRoZSBmcm9udCBjYW1lcmEuXHJcbiAqIC0gQSBjdXN0b20gb3ZlcmxheSAoY3VycmVudGx5IGlPUyBvbmx5KS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgVmlkZW9DYXB0dXJlUGx1cywgVmlkZW9DYXB0dXJlUGx1c09wdGlvbnMsIE1lZGlhRmlsZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvdmlkZW8tY2FwdHVyZS1wbHVzL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlkZW9DYXB0dXJlUGx1czogVmlkZW9DYXB0dXJlUGx1cykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBjb25zdCBvcHRpb25zOiBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucyA9IHtcclxuICogICAgbGltaXQ6IDEsXHJcbiAqICAgIGhpZ2hxdWFsaXR5OiB0cnVlLFxyXG4gKiAgICBwb3J0cmFpdE92ZXJsYXk6ICdhc3NldHMvaW1nL2NhbWVyYS9vdmVybGF5L3BvcnRyYWl0LnBuZycsXHJcbiAqICAgIGxhbmRzY2FwZU92ZXJsYXk6ICdhc3NldHMvaW1nL2NhbWVyYS9vdmVybGF5L2xhbmRzY2FwZS5wbmcnXHJcbiAqIH1cclxuICpcclxuICogdGhpcy52aWRlb0NhcHR1cmVQbHVzLmNhcHR1cmVWaWRlbyhvcHRpb25zKS50aGVuKG1lZGlhZmlsZTogTWVkaWFGaWxlW10gPT4gY29uc29sZS5sb2cobWVkaWFmaWxlKSwgZXJyb3IgPT4gY29uc29sZS5sb2coJ1NvbWV0aGluZyB3ZW50IHdyb25nJykpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogTWVkaWFGaWxlXHJcbiAqIE1lZGlhRmlsZURhdGFcclxuICogVmlkZW9DYXB0dXJlUGx1c09wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdWaWRlb0NhcHR1cmVQbHVzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi12aWRlby1jYXB0dXJlLXBsdXMnLFxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLnZpZGVvY2FwdHVyZXBsdXMnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsc29nbC9jb3Jkb3ZhLXBsdWdpbi12aWRlby1jYXB0dXJlLXBsdXMnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBWaWRlb0NhcHR1cmVQbHVzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyByZWNvcmRpbmdzXHJcbiAgICogQHBhcmFtIFtvcHRpb25zXSB7VmlkZW9DYXB0dXJlUGx1c09wdGlvbnN9IENvbmZpZ3VyZSBvcHRpb25zXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxNZWRpYUZpbGVbXT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgY2FwdHVyZVZpZGVvKG9wdGlvbnM/OiBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucyk6IFByb21pc2U8TWVkaWFGaWxlW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19