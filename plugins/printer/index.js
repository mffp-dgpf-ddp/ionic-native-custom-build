var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, checkAvailability, getPromise } from '@ionic-native/core';
var PrinterOriginal = /** @class */ (function (_super) {
    __extends(PrinterOriginal, _super);
    function PrinterOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Checks whether the device is capable of printing (uses `check()` internally)
     * @returns {Promise<boolean>}
     */
    PrinterOriginal.prototype.isAvailable = function () {
        return this.check().then(function (res) { return Promise.resolve(res.avail); });
    };
    PrinterOriginal.prototype.check = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return getPromise(function (resolve) {
                    PrinterOriginal.getPlugin().canPrintItem(function (avail, count) {
                        resolve({ avail: avail, count: count });
                    });
                });
            }
        })();
    };
    PrinterOriginal.prototype.pick = function () { return cordova(this, "pick", {}, arguments); };
    PrinterOriginal.prototype.print = function (content, options) { return cordova(this, "print", { "successIndex": 2, "errorIndex": 4 }, arguments); };
    PrinterOriginal.pluginName = "Printer";
    PrinterOriginal.plugin = "cordova-plugin-printer";
    PrinterOriginal.pluginRef = "cordova.plugins.printer";
    PrinterOriginal.repo = "https://github.com/katzer/cordova-plugin-printer";
    PrinterOriginal.platforms = ["Android", "iOS", "Windows"];
    return PrinterOriginal;
}(IonicNativePlugin));
var Printer = new PrinterOriginal();
export { Printer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ByaW50ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8saURBQW9ELFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQXVLckUsMkJBQWlCOzs7O0lBQzVDOzs7T0FHRztJQUNILDZCQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFRLElBQUssT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFPRCx1QkFBSzs7O21EQUFpQjtnQkFDcEIsT0FBTyxVQUFVLENBQU0sVUFBQyxPQUFpQjtvQkFDdkMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFDLEtBQWMsRUFBRSxLQUFVO3dCQUMxRCxPQUFPLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDLENBQUM7b0JBQzVCLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2FBQ0o7OztJQU9ELHNCQUFJO0lBY0osdUJBQUssYUFBQyxPQUE4QixFQUFFLE9BQXNCOzs7Ozs7a0JBak45RDtFQXdLNkIsaUJBQWlCO1NBQWpDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFDaGVjaywgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiwgZ2V0UHJvbWlzZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5pbnRlcmZhY2UgRm9udE9wdGlvbnMge1xyXG4gIG5hbWU6IHN0cmluZzsgLy8gVGhlIG5hbWUgb2YgdGhlIGZvbnQgZmFtaWx5LiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICBzaXplOiBudW1iZXI7IC8vIFRoZSBzaXplIG9mIHRoZSBmb250LiBPbmx5IHN1cHBvcnRlZCBvbiBpT1MsIEFuZHJvaWRcclxuICBpdGFsaWM6IGJvb2xlYW47IC8vIFNldCB0byB0cnVlIHRvIGVuYWJsZSB0aGVzZSBmb250IHRyYWl0cy4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgYm9sZDogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgdG8gZW5hYmxlIHRoZXNlIGZvbnQgdHJhaXRzLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICBhbGlnbjogJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInIHwgJ2p1c3RpZmllZCc7IC8vIFBvc3NpYmxlIGFsaWdubWVudHMgYXJlIGxlZnQsIHJpZ2h0LCBjZW50ZXIgYW5kIGp1c3RpZmllZC4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgY29sb3I6IHN0cmluZzsgLy8gVGhlIGNvbG9yIG9mIHRoZSBmb250IGluIGhleGEtZGVjaW1hbCBSR0IgZm9ybWF0IC0gXCJGRjAwMDBcIiBtZWFucyByZWQuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSGVhZGVyRm9vdGVyTGFiZWxPcHRpb25zIHtcclxuICB0ZXh0OiBzdHJpbmc7IC8vIFRoZSBwbGFpbiB0ZXh0IHRvIGRpc3BsYXkuIFVzZSAlbGQgdG8gaW5kaWNhdGUgd2hlcmUgdG8gaW5zZXJ0IHRoZSBwYWdlIGluZGV4LiBGb3IgZXhhbXBsZSBcIlBhZ2UgJWxkXCIgd291bGQgcmVzdWx0IGludG8gXCJQYWdlIDFcIiwgXCJQYWdlIDJcIiwgLi4uLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICB0b3A6IHN0cmluZzsgLy8gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIHdoZXJlIHRvIHBsYWNlIHRoZSBsYWJlbCB3aXRoaW4gdGhlIGZvb3RlciBvciBoZWFkZXIgYXJlYS4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgcmlnaHQ6IHN0cmluZzsgLy8gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIHdoZXJlIHRvIHBsYWNlIHRoZSBsYWJlbCB3aXRoaW4gdGhlIGZvb3RlciBvciBoZWFkZXIgYXJlYS4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgbGVmdDogc3RyaW5nOyAvLyBUaGUgcmVsYXRpdmUgcG9zaXRpb24gd2hlcmUgdG8gcGxhY2UgdGhlIGxhYmVsIHdpdGhpbiB0aGUgZm9vdGVyIG9yIGhlYWRlciBhcmVhLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICBib3R0b206IHN0cmluZzsgLy8gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIHdoZXJlIHRvIHBsYWNlIHRoZSBsYWJlbCB3aXRoaW4gdGhlIGZvb3RlciBvciBoZWFkZXIgYXJlYS4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgZm9udDogRm9udE9wdGlvbnM7IC8vIFRoZSBmb250IGF0dHJpYnV0ZXMgZm9yIHRoZSBsYWJlbC4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgc2hvd1BhZ2VJbmRleDogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gZGlzcGxheSB0aGUgcGFnZSBpbmRleC4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJpbnRPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJpbnQgam9iIGFuZCB0aGUgZG9jdW1lbnRcclxuICAgKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgbnVtYmVyIG9mIGNvcGllcyBmb3IgdGhlIHByaW50IHRhc2suXHJcbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TLCBXaW5kb3dzXHJcbiAgICovXHJcbiAgY29waWVzPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBMaW1pdHMgdGhlIHBhZ2VzIHRvIHByaW50IGV2ZW4gdGhlIGRvY3VtZW50IGNvbnRhaW5zIG1vcmUuXHJcbiAgICogVG8gc2tpcCB0aGUgbGFzdCBuIHBhZ2VzIHlvdSBjYW4gYXNzaWduIGEgbmVnYXRpdmUgdmFsdWUgb24gaU9TLlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPUywgQW5kcm9pZFxyXG4gICAqL1xyXG4gIHBhZ2VDb3VudD86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogU3BlY2lmaWVzIHRoZSBkdXBsZXggbW9kZSB0byB1c2UgZm9yIHRoZSBwcmludCBqb2IuXHJcbiAgICogRWl0aGVyIGRvdWJsZS1zaWRlZCBvbiBzaG9ydCBzaXRlIChkdXBsZXg6J3Nob3J0JyksXHJcbiAgICogZG91YmxlLXNpZGVkIG9uIGxvbmcgc2l0ZSAoZHVwbGV4Oidsb25nJykgb3Igc2luZ2xlLXNpZGVkIChkdXBsZXg6J25vbmUnKS5cclxuICAgKi9cclxuICBkdXBsZXg/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHByaW50ZWQgY29udGVudCwgcG9ydHJhaXQgb3IgbGFuZHNjYXBlXHJcbiAgICogUG9ydHJhaXQgYnkgZGVmYXVsdC5cclxuICAgKi9cclxuICBvcmllbnRhdGlvbj86ICdsYW5kc2NhcGUnIHwgJ3BvcnRyYWl0JztcclxuXHJcbiAgLyoqXHJcbiAgICogSWYgeW91ciBhcHBsaWNhdGlvbiBvbmx5IHByaW50cyBibGFjayB0ZXh0LCBzZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gdHJ1ZSBjYW4gcmVzdWx0IGluIGJldHRlciBwZXJmb3JtYW5jZSBpbiBtYW55IGNhc2VzLlxyXG4gICAqIEZhbHNlIGJ5IGRlZmF1bHQuXHJcbiAgICovXHJcbiAgbW9ub2Nocm9tZT86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHlvdXIgYXBwbGljYXRpb24gb25seSBwcmludHMgYmxhY2sgdGV4dCwgc2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIHRydWUgY2FuIHJlc3VsdCBpbiBiZXR0ZXIgcGVyZm9ybWFuY2UgaW4gbWFueSBjYXNlcy5cclxuICAgKiBGYWxzZSBieSBkZWZhdWx0LlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPUywgV2luZG93c1xyXG4gICAqL1xyXG4gIHBob3RvPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgZG93bnNjYWxpbmcgdGhlIGltYWdlIHRvIGZpdCBpbnRvIHRoZSBjb250ZW50IGFyZWFkLlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIEFuZHJvaWRcclxuICAgKi9cclxuICBhdXRvRml0PzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIG5ldHdvcmsgVVJMIHRvIHRoZSBwcmludGVyLlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAqL1xyXG4gIHByaW50ZXI/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgdGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgY29udGVudCBhcmVhLlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAqL1xyXG4gIG1heEhlaWdodD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lcyB0aGUgbWF4aW11bSBzaXplIG9mIHRoZSBjb250ZW50IGFyZWEuXHJcbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgICovXHJcbiAgbWF4V2lkdGg/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0byBmYWxzZSB0byBhdm9pZCBtYXJnaW5zLlxyXG4gICAqIFRoZSBtYXJnaW5zIGZvciBlYWNoIHByaW50ZWQgcGFnZS4gRWFjaCBwcmludGVyIG1pZ2h0IGhhdmUgaXRzIG93biBtaW5pbXVtIG1hcmdpbnMgZGVwZW5kcyBvbiBtZWRpYSB0eXBlIGFuZCBwYXBlciBmb3JtYXQuXHJcbiAgICovXHJcbiAgbWFyZ2luPzpcclxuICAgIHwgYm9vbGVhblxyXG4gICAgfCB7XHJcbiAgICAgICAgdG9wPzogc3RyaW5nO1xyXG4gICAgICAgIGxlZnQ/OiBzdHJpbmc7XHJcbiAgICAgICAgcmlnaHQ/OiBzdHJpbmc7XHJcbiAgICAgICAgYm90dG9tPzogc3RyaW5nO1xyXG4gICAgICB9O1xyXG5cclxuICB1aT86IHtcclxuICAgIGhpZGVOdW1iZXJPZkNvcGllcz86IHN0cmluZzsgLy8gU2V0IHRvIHRydWUgdG8gaGlkZSB0aGUgY29udHJvbCBmb3IgdGhlIG51bWJlciBvZiBjb3BpZXMuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAgaGlkZVBhcGVyRm9ybWF0Pzogc3RyaW5nOyAvLyBTZXQgdG8gdHJ1ZSB0byBoaWRlIHRoZSBjb250cm9sIGZvciB0aGUgcGFwZXIgZm9ybWF0LiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICAgIHRvcD86IG51bWJlcjsgLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSBwcmludGVyIHBpY2tlci4gT25seSBzdXBwb3J0ZWQgb24gaVBhZFxyXG4gICAgbGVmdD86IG51bWJlcjsgLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSBwcmludGVyIHBpY2tlci4gT25seSBzdXBwb3J0ZWQgb24gaVBhZFxyXG4gICAgaGVpZ2h0PzogbnVtYmVyOyAvLyBUaGUgc2l6ZSBvZiB0aGUgcHJpbnRlciBwaWNrZXIuIE9ubHkgc3VwcG9ydGVkIG9uIGlQYWRcclxuICAgIHdpZHRoPzogbnVtYmVyOyAvLyBUaGUgc2l6ZSBvZiB0aGUgcHJpbnRlciBwaWNrZXIuIE9ubHkgc3VwcG9ydGVkIG9uIGlQYWRcclxuICB9O1xyXG5cclxuICBwYXBlcj86IHtcclxuICAgIHdpZHRoOiBzdHJpbmc7IC8vIFRoZSBkaW1lbnNpb25zIG9mIHRoZSBwYXBlciDigJMgaU9TIHdpbGwgd2lsbCB0cnkgdG8gY2hvb3NlIGEgZm9ybWF0IHdoaWNoIGZpdHMgYmVzdHMuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAgaGVpZ2h0OiBzdHJpbmc7IC8vIFRoZSBkaW1lbnNpb25zIG9mIHRoZSBwYXBlciDigJMgaU9TIHdpbGwgd2lsbCB0cnkgdG8gY2hvb3NlIGEgZm9ybWF0IHdoaWNoIGZpdHMgYmVzdHMuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAgbmFtZTogc3RyaW5nOyAvLyBUaGUgbmFtZSBvZiB0aGUgZm9ybWF0IGxpa2UgSXNvQTQgb3IgUm9sbDIySW5jaC4gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdXdwL2FwaS93aW5kb3dzLmdyYXBoaWNzLnByaW50aW5nLnByaW50bWVkaWFzaXplLiBPbmx5IHN1cHBvcnRlZCBvbiBXaW5kb3dzXHJcbiAgICBsZW5ndGg6IHN0cmluZzsgLy8gT24gcm9sbC1mZWQgcHJpbnRlcnMgeW91IGNhbiBkZWNpZGUgd2hlbiB0aGUgcHJpbnRlciBjdXRzIHRoZSBwYXBlci4gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdXdwL2FwaS93aW5kb3dzLmdyYXBoaWNzLnByaW50aW5nLnByaW50bWVkaWFzaXplLiBPbmx5IHN1cHBvcnRlZCBvbiBpT3NcclxuICB9O1xyXG5cclxuICBmb250PzogRm9udE9wdGlvbnM7XHJcblxyXG4gIGhlYWRlcj86IHtcclxuICAgIGhlaWdodDogc3RyaW5nOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBoZWFkZXIgb3IgZm9vdGVyIG9uIGVhY2ggcGFnZS4gT25seSBzdXBwb3J0ZWQgb24gaU9TXHJcbiAgICBsYWJlbHM6IHN0cmluZ1tdOyAvLyBBbiBhcnJheSBvZiBsYWJlbHMgdG8gZGlzcGxheS4gT25seSB1c2UgaWYgdGhlcmUgYXJlIG1vcmUgdGhlbiBvbmUuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAgbGFiZWw6IEhlYWRlckZvb3RlckxhYmVsT3B0aW9ucztcclxuICB9O1xyXG5cclxuICBmb290ZXI/OiB7XHJcbiAgICBoZWlnaHQ6IHN0cmluZzsgLy8gVGhlIGhlaWdodCBvZiB0aGUgaGVhZGVyIG9yIGZvb3RlciBvbiBlYWNoIHBhZ2UuIE9ubHkgc3VwcG9ydGVkIG9uIGlPU1xyXG4gICAgbGFiZWxzOiBzdHJpbmdbXTsgLy8gQW4gYXJyYXkgb2YgbGFiZWxzIHRvIGRpc3BsYXkuIE9ubHkgdXNlIGlmIHRoZXJlIGFyZSBtb3JlIHRoZW4gb25lLiBPbmx5IHN1cHBvcnRlZCBvbiBpT1NcclxuICAgIGxhYmVsOiBIZWFkZXJGb290ZXJMYWJlbE9wdGlvbnM7XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIFByaW50ZXJcclxuICogQGRlc2NyaXB0aW9uIFByaW50cyBkb2N1bWVudHMgb3IgSFRNTCByZW5kZXJlZCBjb250ZW50XHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFByaW50ZXIsIFByaW50T3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvcHJpbnRlci9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHByaW50ZXI6IFByaW50ZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5wcmludGVyLmlzQXZhaWxhYmxlKCkudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xyXG4gKlxyXG4gKiBsZXQgb3B0aW9uczogUHJpbnRPcHRpb25zID0ge1xyXG4gKiAgICAgIG5hbWU6ICdNeURvY3VtZW50JyxcclxuICogICAgICBkdXBsZXg6IHRydWUsXHJcbiAqICAgICAgb3JpZW50YXRpb246ICdsYW5kc2NhcGUnLFxyXG4gKiAgICAgIG1vbm9jaHJvbWU6IHRydWVcclxuICogfVxyXG4gKlxyXG4gKiB0aGlzLnByaW50ZXIucHJpbnQoY29udGVudCwgb3B0aW9ucykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogUHJpbnRPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnUHJpbnRlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcHJpbnRlcicsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnByaW50ZXInLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20va2F0emVyL2NvcmRvdmEtcGx1Z2luLXByaW50ZXInLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFByaW50ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGRldmljZSBpcyBjYXBhYmxlIG9mIHByaW50aW5nICh1c2VzIGBjaGVjaygpYCBpbnRlcm5hbGx5KVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2soKS50aGVuKChyZXM6IGFueSkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcy5hdmFpbCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIFRvIGNoZWNrIGlmIHByaW50aW5nIGlzIHN1cHBvcnRlZCBpbiBnZW5lcmFsXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmUgd2l0aCBhbiBvYmplY3QgaW5kaWNhdGluZyB3aGV0aGVyIHByaW50aW5nIGlzIGF2YWlsYWJsZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhQ2hlY2soKVxyXG4gIGNoZWNrKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gZ2V0UHJvbWlzZTxhbnk+KChyZXNvbHZlOiBGdW5jdGlvbikgPT4ge1xyXG4gICAgICBQcmludGVyLmdldFBsdWdpbigpLmNhblByaW50SXRlbSgoYXZhaWw6IGJvb2xlYW4sIGNvdW50OiBhbnkpID0+IHtcclxuICAgICAgICByZXNvbHZlKHsgYXZhaWwsIGNvdW50IH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheXMgYSBzeXN0ZW0gaW50ZXJmYWNlIGFsbG93aW5nIHRoZSB1c2VyIHRvIHNlbGVjdCBhbiBhdmFpbGFibGUgcHJpbnRlci4gVG8gc3BlYWsgd2l0aCBhIHByaW50ZXIgZGlyZWN0bHkgeW91IG5lZWQgdG8ga25vdyB0aGUgbmV0d29yayBhZGRyZXNzIGJ5IHBpY2tpbmcgdGhlbSBiZWZvcmUgdmlhIGBwcmludGVyLnBpY2tgLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHBpY2soKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbmRzIGNvbnRlbnQgdG8gdGhlIHByaW50ZXIuXHJcbiAgICogQHBhcmFtIGNvbnRlbnQge3N0cmluZyB8IEhUTUxFbGVtZW50fSBUaGUgY29udGVudCB0byBwcmludC4gQ2FuIGJlIGEgVVJMIG9yIGFuIEhUTUwgc3RyaW5nLiBJZiBhIEhUTUwgRE9NIE9iamVjdCBpcyBwcm92aWRlZCwgaXRzIGlubmVySHRtbCBwcm9wZXJ0eSB2YWx1ZSB3aWxsIGJlIHVzZWQuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMge1ByaW50T3B0aW9uc30gb3B0aW9uYWwuIFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHByaW50ZXJcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHN1Y2Nlc3NJbmRleDogMixcclxuICAgIGVycm9ySW5kZXg6IDQsXHJcbiAgfSlcclxuICBwcmludChjb250ZW50Pzogc3RyaW5nIHwgSFRNTEVsZW1lbnQsIG9wdGlvbnM/OiBQcmludE9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=