var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BlinkUpOriginal = /** @class */ (function (_super) {
    __extends(BlinkUpOriginal, _super);
    function BlinkUpOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BlinkUpOriginal.prototype.startBlinkUp = function (options) { return cordova(this, "startBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUpOriginal.prototype.flashWifiBlinkUp = function (options) { return cordova(this, "flashWifiBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUpOriginal.prototype.flashWPSBlinkUp = function (options) { return cordova(this, "flashWPSBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUpOriginal.prototype.abortBlinkUp = function () { return cordova(this, "abortBlinkUp", { "observable": true }, arguments); };
    BlinkUpOriginal.prototype.clearBlinkUpData = function () { return cordova(this, "clearBlinkUpData", { "observable": true }, arguments); };
    BlinkUpOriginal.pluginName = "BlinkUp";
    BlinkUpOriginal.plugin = "cordova-plugin-blinkup";
    BlinkUpOriginal.pluginRef = "blinkup";
    BlinkUpOriginal.repo = "https://github.com/SensorShare/cordova-plugin-blinkup";
    BlinkUpOriginal.platforms = ["Android", "iOS"];
    return BlinkUpOriginal;
}(IonicNativePlugin));
var BlinkUp = new BlinkUpOriginal();
export { BlinkUp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JsaW5rdXAvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2REwsMkJBQWlCOzs7O0lBVTVDLDhCQUFZLGFBQUMsT0FBdUI7SUFhcEMsa0NBQWdCLGFBQUMsT0FBMkI7SUFhNUMsaUNBQWUsYUFBQyxPQUEwQjtJQVcxQyw4QkFBWTtJQVdaLGtDQUFnQjs7Ozs7O2tCQXhIbEI7RUE4RDZCLGlCQUFpQjtTQUFqQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBvZiBhIGJsaW5rIHVwIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJsaW5rVXBPcHRpb25zIHtcclxuICBhcGlLZXk6IHN0cmluZztcclxuICBkZXZlbG9wbWVudFBsYW5JZD86IHN0cmluZztcclxuICBpc0luRGV2ZWxvcG1lbnQ/OiBib29sZWFuO1xyXG4gIHRpbWVvdXRNcz86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBvZiBhIGJsaW5rIHVwIHdpZmkgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmxpbmtVcFdpZmlPcHRpb25zIHtcclxuICBhcGlLZXk6IHN0cmluZztcclxuICB0aW1lb3V0TXM/OiBudW1iZXI7XHJcbiAgc3NpZDogc3RyaW5nO1xyXG4gIHBhc3N3b3JkOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2Ugb2YgYSBibGluayB1cCB3cHMgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmxpbmtVcFdQU09wdGlvbnMge1xyXG4gIGFwaUtleTogc3RyaW5nO1xyXG4gIHRpbWVvdXRNcz86IG51bWJlcjtcclxuICB3cHNQaW46IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEJsaW5rVXBcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEVsZWN0cmljIEltcCBCbGlua1VwIGlvbmljIHBsdWdpbi5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQmxpbmtVcCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYmxpbmt1cC9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdCBvcHRpb25zID0gPEJsaW5rVXBXaWZpT3B0aW9ucz57XHJcbiAqICAgIGFwaUtleTogJ0FQSV9LRVknLFxyXG4gKiAgICB0aW1lb3V0TXM6IDYwMDAwLFxyXG4gKiAgICBzc2lkOiAnTVlfU1NJRCcsXHJcbiAqICAgIHBhc3N3b3JkOiAnTVlfUEFTU1dPUkQnXHJcbiAqICB9XHJcbiAqICBCbGlua1VwLmZsYXNoV2lmaUJsaW5rVXAob3B0aW9ucykuc3Vic2NyaWJlKFxyXG4gKiAgICAgKHJlc3VsdCkgPT4gY29uc29sZS5sb2coJ0RvbmUnKSxcclxuICogICAgIChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IpXHJcbiAqICAgKVxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdCbGlua1VwJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1ibGlua3VwJyxcclxuICBwbHVnaW5SZWY6ICdibGlua3VwJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1NlbnNvclNoYXJlL2NvcmRvdmEtcGx1Z2luLWJsaW5rdXAnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCbGlua1VwIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIHN0YXJ0QmxpbmtVcCAtIHN0YXJ0cyB0aGUgYmxpbmt1cCBwcm9jZXNzXHJcbiAgICogQHBhcmFtIHttb2R1bGU6Ymxpbmt1cC5CbGlua1VwT3B0aW9uc30gb3B0aW9ucyBCbGlua1VwIE9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gT2JzZXJ2YWJsZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICBzdGFydEJsaW5rVXAob3B0aW9uczogQmxpbmtVcE9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZmxhc2hXaWZpQmxpbmtVcCAtIGludm9rZXMgdGhlIGZsYXNoIHdpZmkgcHJvY2Vzc1xyXG4gICAqIEBwYXJhbSB7bW9kdWxlOmJsaW5rdXAuQmxpbmtVcFdpZmlPcHRpb25zfSBvcHRpb25zIEJsaW5rVXAgV2lmaSBPcHRpb25zXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgZmxhc2hXaWZpQmxpbmtVcChvcHRpb25zOiBCbGlua1VwV2lmaU9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZmxhc2hXUFNCbGlua1VwIC0gaW52b2tlcyB0aGUgZmxhc2ggd3BzIHByb2Nlc3NcclxuICAgKiBAcGFyYW0ge21vZHVsZTpibGlua3VwLkJsaW5rVXBXUFNPcHRpb25zfSBvcHRpb25zIEJsaW5rVXAgV1BTIE9wdGlvbnNcclxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gT2JzZXJ2YWJsZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICBmbGFzaFdQU0JsaW5rVXAob3B0aW9uczogQmxpbmtVcFdQU09wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogYWJvcnRCbGlua1VwIC0gYWJvcnQgYmxpbmt1cCBwcm9jZXNzXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgYWJvcnRCbGlua1VwKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBjbGVhckJsaW5rVXBEYXRhIC0gY2xlYXIgd2lmaSBkYXRhXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgY2xlYXJCbGlua1VwRGF0YSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=