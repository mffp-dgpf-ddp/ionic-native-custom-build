import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var BlinkUp = /** @class */ (function (_super) {
    __extends(BlinkUp, _super);
    function BlinkUp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BlinkUp.prototype.startBlinkUp = function (options) { return cordova(this, "startBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUp.prototype.flashWifiBlinkUp = function (options) { return cordova(this, "flashWifiBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUp.prototype.flashWPSBlinkUp = function (options) { return cordova(this, "flashWPSBlinkUp", { "callbackOrder": "reverse", "observable": true }, arguments); };
    BlinkUp.prototype.abortBlinkUp = function () { return cordova(this, "abortBlinkUp", { "observable": true }, arguments); };
    BlinkUp.prototype.clearBlinkUpData = function () { return cordova(this, "clearBlinkUpData", { "observable": true }, arguments); };
    BlinkUp.pluginName = "BlinkUp";
    BlinkUp.plugin = "cordova-plugin-blinkup";
    BlinkUp.pluginRef = "blinkup";
    BlinkUp.repo = "https://github.com/SensorShare/cordova-plugin-blinkup";
    BlinkUp.platforms = ["Android", "iOS"];
    BlinkUp = __decorate([
        Injectable()
    ], BlinkUp);
    return BlinkUp;
}(IonicNativePlugin));
export { BlinkUp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JsaW5rdXAvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUE0RGQsMkJBQWlCOzs7O0lBVTVDLDhCQUFZLGFBQUMsT0FBdUI7SUFhcEMsa0NBQWdCLGFBQUMsT0FBMkI7SUFhNUMsaUNBQWUsYUFBQyxPQUEwQjtJQVcxQyw4QkFBWTtJQVdaLGtDQUFnQjs7Ozs7O0lBMURMLE9BQU87UUFEbkIsVUFBVSxFQUFFO09BQ0EsT0FBTztrQkE5RHBCO0VBOEQ2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2Ugb2YgYSBibGluayB1cCBvcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCbGlua1VwT3B0aW9ucyB7XHJcbiAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgZGV2ZWxvcG1lbnRQbGFuSWQ/OiBzdHJpbmc7XHJcbiAgaXNJbkRldmVsb3BtZW50PzogYm9vbGVhbjtcclxuICB0aW1lb3V0TXM/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2Ugb2YgYSBibGluayB1cCB3aWZpIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJsaW5rVXBXaWZpT3B0aW9ucyB7XHJcbiAgYXBpS2V5OiBzdHJpbmc7XHJcbiAgdGltZW91dE1zPzogbnVtYmVyO1xyXG4gIHNzaWQ6IHN0cmluZztcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogSW50ZXJmYWNlIG9mIGEgYmxpbmsgdXAgd3BzIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJsaW5rVXBXUFNPcHRpb25zIHtcclxuICBhcGlLZXk6IHN0cmluZztcclxuICB0aW1lb3V0TXM/OiBudW1iZXI7XHJcbiAgd3BzUGluOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBCbGlua1VwXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBFbGVjdHJpYyBJbXAgQmxpbmtVcCBpb25pYyBwbHVnaW4uXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEJsaW5rVXAgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JsaW5rdXAvbmd4JztcclxuICpcclxuICogY29uc3Qgb3B0aW9ucyA9IDxCbGlua1VwV2lmaU9wdGlvbnM+e1xyXG4gKiAgICBhcGlLZXk6ICdBUElfS0VZJyxcclxuICogICAgdGltZW91dE1zOiA2MDAwMCxcclxuICogICAgc3NpZDogJ01ZX1NTSUQnLFxyXG4gKiAgICBwYXNzd29yZDogJ01ZX1BBU1NXT1JEJ1xyXG4gKiAgfVxyXG4gKiAgQmxpbmtVcC5mbGFzaFdpZmlCbGlua1VwKG9wdGlvbnMpLnN1YnNjcmliZShcclxuICogICAgIChyZXN1bHQpID0+IGNvbnNvbGUubG9nKCdEb25lJyksXHJcbiAqICAgICAoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG4gKiAgIClcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQmxpbmtVcCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYmxpbmt1cCcsXHJcbiAgcGx1Z2luUmVmOiAnYmxpbmt1cCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9TZW5zb3JTaGFyZS9jb3Jkb3ZhLXBsdWdpbi1ibGlua3VwJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmxpbmtVcCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBzdGFydEJsaW5rVXAgLSBzdGFydHMgdGhlIGJsaW5rdXAgcHJvY2Vzc1xyXG4gICAqIEBwYXJhbSB7bW9kdWxlOmJsaW5rdXAuQmxpbmtVcE9wdGlvbnN9IG9wdGlvbnMgQmxpbmtVcCBPcHRpb25zXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgc3RhcnRCbGlua1VwKG9wdGlvbnM6IEJsaW5rVXBPcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZsYXNoV2lmaUJsaW5rVXAgLSBpbnZva2VzIHRoZSBmbGFzaCB3aWZpIHByb2Nlc3NcclxuICAgKiBAcGFyYW0ge21vZHVsZTpibGlua3VwLkJsaW5rVXBXaWZpT3B0aW9uc30gb3B0aW9ucyBCbGlua1VwIFdpZmkgT3B0aW9uc1xyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIGZsYXNoV2lmaUJsaW5rVXAob3B0aW9uczogQmxpbmtVcFdpZmlPcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZsYXNoV1BTQmxpbmtVcCAtIGludm9rZXMgdGhlIGZsYXNoIHdwcyBwcm9jZXNzXHJcbiAgICogQHBhcmFtIHttb2R1bGU6Ymxpbmt1cC5CbGlua1VwV1BTT3B0aW9uc30gb3B0aW9ucyBCbGlua1VwIFdQUyBPcHRpb25zXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIE9ic2VydmFibGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gIH0pXHJcbiAgZmxhc2hXUFNCbGlua1VwKG9wdGlvbnM6IEJsaW5rVXBXUFNPcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGFib3J0QmxpbmtVcCAtIGFib3J0IGJsaW5rdXAgcHJvY2Vzc1xyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIGFib3J0QmxpbmtVcCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY2xlYXJCbGlua1VwRGF0YSAtIGNsZWFyIHdpZmkgZGF0YVxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIGNsZWFyQmxpbmtVcERhdGEoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19