import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AllInOneSDK = /** @class */ (function (_super) {
    __extends(AllInOneSDK, _super);
    function AllInOneSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AllInOneSDK.prototype.startTransaction = function (options) { return cordova(this, "startTransaction", {}, arguments); };
    AllInOneSDK.pluginName = "AllInOneSDK";
    AllInOneSDK.plugin = "cordova-paytm-allinonesdk";
    AllInOneSDK.pluginRef = "AllInOneSDK";
    AllInOneSDK.repo = "https://github.com/paytm/paytm-allinonesdk-ionic-cordova.git";
    AllInOneSDK.platforms = ["Android", "iOS"];
    AllInOneSDK = __decorate([], AllInOneSDK);
    return AllInOneSDK;
}(IonicNativePlugin));
export { AllInOneSDK };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FsbC1pbi1vbmUtc2RrL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyw4QkFBMEYsTUFBTSxvQkFBb0IsQ0FBQzs7SUEwQzNGLCtCQUFpQjs7OztJQVVoRCxzQ0FBZ0IsYUFBQyxPQUE0Qjs7Ozs7O0lBVmxDLFdBQVcsa0JBQVgsV0FBVztzQkEzQ3hCO0VBMkNpQyxpQkFBaUI7U0FBckMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIENvcmRvdmFJbnN0YW5jZSwgSW5zdGFuY2VQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogQG5hbWUgQWxsSW5PbmVTREtcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFBheXRtIEFsbC1pbi1PbmUgU0RLIHBsdWdpbiBmb3IgQ29yZG92YS9Jb25pYyBBcHBsaWNhdGlvbnNcclxuICogUGF5dG0gQWxsLWluLU9uZSBTREsgcHJvdmlkZXMgYSBzd2lmdCwgc2VjdXJlIGFuZCBzZWFtbGVzcyBwYXltZW50IGV4cGVyaWVuY2UgdG8geW91ciB1c2VycyBieSBpbnZva2luZyB0aGUgUGF5dG0gYXBwIChpZiBpbnN0YWxsZWQgb24geW91ciB1c2Vy4oCZcyBzbWFydHBob25lKSB0byBjb21wbGV0ZSBwYXltZW50IGZvciB5b3VyIG9yZGVyLlxyXG4gKiBQYXl0bSBBbGwtaW4tT25lIFNESyBlbmFibGVzIHBheW1lbnQgYWNjZXB0YW5jZSB2aWEgUGF5dG0gd2FsbGV0LCBQYXl0bSBQYXltZW50cyBCYW5rLCBzYXZlZCBEZWJpdC9DcmVkaXQgY2FyZHMsIE5ldCBCYW5raW5nLCBCSElNIFVQSSBhbmQgRU1JIGFzIGF2YWlsYWJsZSBpbiB5b3VyIGN1c3RvbWVy4oCZcyBQYXl0bSBhY2NvdW50LiBJZiBQYXl0bSBhcHAgaXMgbm90IGluc3RhbGxlZCBvbiBhIGN1c3RvbWVyJ3MgZGV2aWNlLCB0aGUgdHJhbnNhY3Rpb24gd2lsbCBiZSBwcm9jZXNzZWQgdmlhIHdlYiB2aWV3IHdpdGhpbiB0aGUgQWxsLWluLU9uZSBTREsuXHJcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFBheXRtIEFsbC1pbi1PbmUgU0RLLCBwbGVhc2UgdmlzaXQgaHR0cHM6Ly9kZXZlbG9wZXIucGF5dG0uY29tL2RvY3MvYWxsLWluLW9uZS1zZGsvXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEFsbEluT25lU0RLIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9hbGwtaW4tb25lLXNkay9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsbEluT25lU0RLOiBBbGxJbk9uZVNESykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiBGb3IgYmVsb3cgcGFyYW1ldGVycyBzZWUgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLnBheXRtLmNvbS9kb2NzL2FsbC1pbi1vbmUtc2RrLylcclxuICogbGV0IHBheW1lbnRJbnRlbnQgPSB7IG1pZCA6IG1lcmNoYW50SUQsIG9yZGVySWQ6IG9yZGVySWQsIHR4blRva2VuOiB0cmFuc2FjdGlvblRva2VuLCBhbW91bnQ6IGFtb3VudCwgaXNTdGFnaW5nOiBpc1N0YWdpbmcsIGNhbGxiYWNrVXJsOmNhbGxCYWNrVVJMIH1cclxuICpcclxuICogdGhpcy5hbGxJbk9uZVNESy5zdGFydFRyYW5zYWN0aW9uKHBheW1lbnRJbnRlbnQpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICpcclxuICogRm9yIGlPUzpcclxuICogQWZ0ZXIgYWRkaW5nIHRoZSBwbHVnaW4sIG9wZW4gdGhlIGlPUyBwcm9qZWN0LCB5b3UgY2FuIGZpbmQgdGhlIHNhbWUgYXQgPHByb2plY3ROYW1lPi9wbGF0Zm9ybXMvaW9zLlxyXG4gKiBJbiBjYXNlIG1lcmNoYW50IGRvbuKAmXQgaGF2ZSBjYWxsYmFjayBVUkwsIEFkZCBhbiBlbnRyeSBpbnRvIEluZm8ucGxpc3QgTFNBcHBsaWNhdGlvblF1ZXJpZXNTY2hlbWVzKEFycmF5KSBJdGVtIDAgKFN0cmluZyktPiBwYXl0bVxyXG4gKiBBZGQgYSBVUkwgU2NoZW1lIOKAnHBheXRt4oCdK+KAnU1JROKAnVxyXG4gKlxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0FsbEluT25lU0RLJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBheXRtLWFsbGlub25lc2RrJyxcclxuICBwbHVnaW5SZWY6ICdBbGxJbk9uZVNESycsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wYXl0bS9wYXl0bS1hbGxpbm9uZXNkay1pb25pYy1jb3Jkb3ZhLmdpdCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCdpT1MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWxsSW5PbmVTREsgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIFBheXRtIEFwcGxpY2F0aW9uIGlzIGF2YWlsYWJsZSBvbiB0aGUgZGV2aWNlLlxyXG4gICAqIElmIFBheXRtIGV4aXN0cyB0aGVuIGl0IGludm9rZXMgUGF5dG0gQXBwbGljYXRpb24gd2l0aCB0aGUgcGFyYW1ldGVycyBzZW50IGFuZCBjcmVhdGVzIGFuIG9yZGVyLlxyXG4gICAqIElmIHRoZSBQYXl0bSBBcHBsaWNhdGlvbiBpcyBub3QgYXZhaWxhYmxlIHRoZSB0cmFuc2FjdGlvbiBpcyBjb250aW51ZWQgb24gYSB3ZWJWaWV3IHdpdGhpbiBBbGwtaW4tT25lIFNESy5cclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7UGF5bWVudEludGVudE1vZGVsfSBUaGVzZSBwYXJhbWV0ZXJzIGFyZSByZXF1aXJlZCBhbmQgd2lsbCBiZSB1c2VkIHRvIGNyZWF0ZSBhbiBvcmRlci5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFBheXRtUmVzcG9uc2U+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSB0cmFuc2FjdGlvbiBjb21wbGV0ZXMoYm90aCBmYWlsZWQgYW5kIHN1Y2Nlc3NmdWwpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydFRyYW5zYWN0aW9uKG9wdGlvbnMgOiBQYXltZW50SW50ZW50TW9kZWwpOiBQcm9taXNlPFBheXRtUmVzcG9uc2U+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogVGhlIHJlc3BvbnNlIHRoYXQgd2lsbCBiZSByZWNpZXZlZCB3aGVuIGFueSB0cmFuc2FjdGlvbiBpcyBjb21wbGV0ZWRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGF5dG1SZXNwb25zZXtcclxuICAgIG1lc3NhZ2UgOiBzdHJpbmc7XHJcbiAgICByZXNwb25zZSA6IHN0cmluZzsgLy8gQSBzdHJpbmdpZmllZCByZXNwb25zZSBvZiBhIGhhc2htYXAgcmV0dXJuZWQgZnJvbSBBbGwtaW4tT25lIFNES1xyXG59XHJcblxyXG4vKipcclxuICogRm9yIGJlbG93IHBhcmFtZXRlcnMgc2VlIFtkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5wYXl0bS5jb20vZG9jcy9hbGwtaW4tb25lLXNkay8pXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnRlbnRNb2RlbHtcclxuICAgIG1pZCA6IHN0cmluZzsgLy8gTWVyY2hhbnQgSURcclxuICAgIG9yZGVySWQgOiBzdHJpbmc7IC8vIE9yZGVyIElEXHJcbiAgICB0eG5Ub2tlbiA6IHN0cmluZzsgLy8gVHJhbnNhY3Rpb24gVG9rZW5cclxuICAgIGFtb3VudCA6IHN0cmluZzsgLy8gQW1vdW50XHJcbiAgICBpc1N0YWdpbmc6IGJvb2xlYW47IC8vIEVudmlyb25tZW50XHJcbiAgICBjYWxsYmFja1VybDogc3RyaW5nOyAvLyBDYWxsYmFjayBVUkxcclxufVxyXG4iXX0=