import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
var AppPreferences = /** @class */ (function (_super) {
    __extends(AppPreferences, _super);
    function AppPreferences() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppPreferences.prototype.fetch = function (dict, key) { return cordova(this, "fetch", { "callbackOrder": "reverse" }, arguments); };
    AppPreferences.prototype.store = function (dict, key, value) { return cordova(this, "store", { "callbackOrder": "reverse" }, arguments); };
    AppPreferences.prototype.remove = function (dict, key) { return cordova(this, "remove", { "callbackOrder": "reverse" }, arguments); };
    AppPreferences.prototype.clearAll = function () { return cordova(this, "clearAll", { "callbackOrder": "reverse" }, arguments); };
    AppPreferences.prototype.show = function () { return cordova(this, "show", { "callbackOrder": "reverse" }, arguments); };
    AppPreferences.prototype.watch = function (subscribe) { return cordova(this, "watch", { "observable": true }, arguments); };
    AppPreferences.prototype.suite = function (suiteName) { return cordova(this, "suite", { "platforms": ["Android"], "sync": true }, arguments); };
    AppPreferences.prototype.iosSuite = function (suiteName) { return cordova(this, "iosSuite", { "platforms": ["iOS"], "sync": true }, arguments); };
    AppPreferences.prototype.cloudSync = function () { return cordova(this, "cloudSync", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferences.prototype.defaults = function () { return cordova(this, "defaults", { "platforms": ["iOS", "Windows", "Windows Phone 8"] }, arguments); };
    AppPreferences.pluginName = "AppPreferences";
    AppPreferences.plugin = "cordova-plugin-app-preferences";
    AppPreferences.pluginRef = "plugins.appPreferences";
    AppPreferences.repo = "https://github.com/apla/me.apla.cordova.app-preferences";
    AppPreferences.platforms = ["Android", "BlackBerry 10", "Browser", "iOS", "macOS", "Windows 8", "Windows Phone"];
    AppPreferences = __decorate([
        Injectable()
    ], AppPreferences);
    return AppPreferences;
}(IonicNativePlugin));
export { AppPreferences };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1wcmVmZXJlbmNlcy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQTRCUCxrQ0FBaUI7Ozs7SUFXbkQsOEJBQUssYUFBQyxJQUFZLEVBQUUsR0FBWTtJQWVoQyw4QkFBSyxhQUFDLElBQVksRUFBRSxHQUFXLEVBQUUsS0FBVztJQWM1QywrQkFBTSxhQUFDLElBQVksRUFBRSxHQUFZO0lBWWpDLGlDQUFRO0lBWVIsNkJBQUk7SUFhSiw4QkFBSyxhQUFDLFNBQWtCO0lBZXhCLDhCQUFLLGFBQUMsU0FBaUI7SUFRdkIsaUNBQVEsYUFBQyxTQUFpQjtJQVkxQixrQ0FBUztJQVlULGlDQUFROzs7Ozs7SUE1SEcsY0FBYztRQUQxQixVQUFVLEVBQUU7T0FDQSxjQUFjO3lCQTlCM0I7RUE4Qm9DLGlCQUFpQjtTQUF4QyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFwcCBQcmVmZXJlbmNlc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byByZWFkIGFuZCB3cml0ZSBhcHAgcHJlZmVyZW5jZXNcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQXBwUHJlZmVyZW5jZXMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2FwcC1wcmVmZXJlbmNlcy9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcFByZWZlcmVuY2VzOiBBcHBQcmVmZXJlbmNlcykgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmFwcFByZWZlcmVuY2VzLmZldGNoKCdrZXknKS50aGVuKChyZXMpID0+IHsgY29uc29sZS5sb2cocmVzKTsgfSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKlxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0FwcFByZWZlcmVuY2VzJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHAtcHJlZmVyZW5jZXMnLFxyXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMuYXBwUHJlZmVyZW5jZXMnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBsYS9tZS5hcGxhLmNvcmRvdmEuYXBwLXByZWZlcmVuY2VzJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ0Jyb3dzZXInLCAnaU9TJywgJ21hY09TJywgJ1dpbmRvd3MgOCcsICdXaW5kb3dzIFBob25lJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFwcFByZWZlcmVuY2VzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEdldCBhIHByZWZlcmVuY2UgdmFsdWVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaWN0IERpY3Rpb25hcnkgZm9yIGtleSAoT1BUSU9OQUwpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBLZXlcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgZmV0Y2goZGljdDogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGEgcHJlZmVyZW5jZSB2YWx1ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpY3QgRGljdGlvbmFyeSBmb3Iga2V5IChPUFRJT05BTClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxyXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBWYWx1ZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBzdG9yZShkaWN0OiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZT86IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgdmFsdWUgZnJvbSBwcmVmZXJlbmNlc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRpY3QgRGljdGlvbmFyeSBmb3Iga2V5IChPUFRJT05BTClcclxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEtleVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICByZW1vdmUoZGljdDogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYXIgcHJlZmVyZW5jZXNcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXHJcbiAgfSlcclxuICBjbGVhckFsbCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBuYXRpdmUgcHJlZmVyZW5jZXMgaW50ZXJmYWNlXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxyXG4gIH0pXHJcbiAgc2hvdygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvdyBuYXRpdmUgcHJlZmVyZW5jZXMgaW50ZXJmYWNlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN1YnNjcmliZSB0cnVlIHZhbHVlIHRvIHN1YnNjcmliZSwgZmFsc2UgLSB1bnN1YnNjcmliZVxyXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIHdhdGNoKHN1YnNjcmliZTogYm9vbGVhbik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gbmFtZWQgY29uZmlndXJhdGlvbiBjb250ZXh0XHJcbiAgICogSW4gaU9TIHlvdSdsbCBnZXQgYSBzdWl0ZSBjb25maWd1cmF0aW9uLCBvbiBBbmRyb2lkIOKAlCBuYW1lZCBmaWxlXHJcbiAgICogU3VwcG9ydHM6IEFuZHJvaWQsIGlPU1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdWl0ZU5hbWUgc3VpdGUgbmFtZVxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEN1c3RvbSBvYmplY3QsIGJvdW5kIHRvIHRoYXQgc3VpdGVcclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxyXG4gICAgc3luYzogdHJ1ZSxcclxuICB9KVxyXG4gIHN1aXRlKHN1aXRlTmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcclxuICAgIHN5bmM6IHRydWUsXHJcbiAgfSlcclxuICBpb3NTdWl0ZShzdWl0ZU5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gY2xvdWQgc3luY2hyb25pemVkIGNvbmZpZ3VyYXRpb24gY29udGV4dFxyXG4gICAqIEN1cnJlbnRseSBzdXBwb3J0cyBXaW5kb3dzIGFuZCBpT1MvbWFjT1NcclxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDdXN0b20gb2JqZWN0LCBib3VuZCB0byB0aGF0IHN1aXRlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgcGxhdGZvcm1zOiBbJ2lPUycsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxyXG4gIH0pXHJcbiAgY2xvdWRTeW5jKCk6IE9iamVjdCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm4gZGVmYXVsdCBjb25maWd1cmF0aW9uIGNvbnRleHRcclxuICAgKiBDdXJyZW50bHkgc3VwcG9ydHMgV2luZG93cyBhbmQgaU9TL21hY09TXHJcbiAgICogQHJldHVybnMge09iamVjdH0gQ3VzdG9tIE9iamVjdCwgYm91bmQgdG8gdGhhdCBzdWl0ZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIHBsYXRmb3JtczogWydpT1MnLCAnV2luZG93cycsICdXaW5kb3dzIFBob25lIDgnXSxcclxuICB9KVxyXG4gIGRlZmF1bHRzKCk6IE9iamVjdCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==