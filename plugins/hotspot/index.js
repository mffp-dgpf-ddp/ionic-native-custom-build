var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HotspotOriginal = /** @class */ (function (_super) {
    __extends(HotspotOriginal, _super);
    function HotspotOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HotspotOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    HotspotOriginal.prototype.toggleWifi = function () { return cordova(this, "toggleWifi", {}, arguments); };
    HotspotOriginal.prototype.createHotspot = function (ssid, mode, password) { return cordova(this, "createHotspot", {}, arguments); };
    HotspotOriginal.prototype.startHotspot = function () { return cordova(this, "startHotspot", {}, arguments); };
    HotspotOriginal.prototype.configureHotspot = function (ssid, mode, password) { return cordova(this, "configureHotspot", {}, arguments); };
    HotspotOriginal.prototype.stopHotspot = function () { return cordova(this, "stopHotspot", {}, arguments); };
    HotspotOriginal.prototype.isHotspotEnabled = function () { return cordova(this, "isHotspotEnabled", {}, arguments); };
    HotspotOriginal.prototype.getAllHotspotDevices = function () { return cordova(this, "getAllHotspotDevices", {}, arguments); };
    HotspotOriginal.prototype.connectToWifi = function (ssid, password) { return cordova(this, "connectToWifi", {}, arguments); };
    HotspotOriginal.prototype.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) { return cordova(this, "connectToWifiAuthEncrypt", {}, arguments); };
    HotspotOriginal.prototype.addWifiNetwork = function (ssid, mode, password) { return cordova(this, "addWifiNetwork", {}, arguments); };
    HotspotOriginal.prototype.removeWifiNetwork = function (ssid) { return cordova(this, "removeWifiNetwork", {}, arguments); };
    HotspotOriginal.prototype.isConnectedToInternet = function () { return cordova(this, "isConnectedToInternet", {}, arguments); };
    HotspotOriginal.prototype.isConnectedToInternetViaWifi = function () { return cordova(this, "isConnectedToInternetViaWifi", {}, arguments); };
    HotspotOriginal.prototype.isWifiOn = function () { return cordova(this, "isWifiOn", {}, arguments); };
    HotspotOriginal.prototype.isWifiSupported = function () { return cordova(this, "isWifiSupported", {}, arguments); };
    HotspotOriginal.prototype.isWifiDirectSupported = function () { return cordova(this, "isWifiDirectSupported", {}, arguments); };
    HotspotOriginal.prototype.scanWifi = function () { return cordova(this, "scanWifi", {}, arguments); };
    HotspotOriginal.prototype.scanWifiByLevel = function () { return cordova(this, "scanWifiByLevel", {}, arguments); };
    HotspotOriginal.prototype.startWifiPeriodicallyScan = function (interval, duration) { return cordova(this, "startWifiPeriodicallyScan", {}, arguments); };
    HotspotOriginal.prototype.stopWifiPeriodicallyScan = function () { return cordova(this, "stopWifiPeriodicallyScan", {}, arguments); };
    HotspotOriginal.prototype.getNetConfig = function () { return cordova(this, "getNetConfig", {}, arguments); };
    HotspotOriginal.prototype.getConnectionInfo = function () { return cordova(this, "getConnectionInfo", {}, arguments); };
    HotspotOriginal.prototype.pingHost = function (ip) { return cordova(this, "pingHost", {}, arguments); };
    HotspotOriginal.prototype.getMacAddressOfHost = function (ip) { return cordova(this, "getMacAddressOfHost", {}, arguments); };
    HotspotOriginal.prototype.isDnsLive = function (ip) { return cordova(this, "isDnsLive", {}, arguments); };
    HotspotOriginal.prototype.isPortLive = function (ip) { return cordova(this, "isPortLive", {}, arguments); };
    HotspotOriginal.prototype.isRooted = function () { return cordova(this, "isRooted", {}, arguments); };
    HotspotOriginal.pluginName = "Hotspot";
    HotspotOriginal.plugin = "cordova-plugin-hotspot";
    HotspotOriginal.pluginRef = "cordova.plugins.hotspot";
    HotspotOriginal.repo = "https://github.com/hypery2k/cordova-hotspot-plugin";
    HotspotOriginal.platforms = ["Android"];
    return HotspotOriginal;
}(IonicNativePlugin));
var Hotspot = new HotspotOriginal();
export { Hotspot };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2hvdHNwb3QvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBbUkzQywyQkFBaUI7Ozs7SUFLNUMsNkJBQVc7SUFRWCw0QkFBVTtJQWNWLCtCQUFhLGFBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxRQUFnQjtJQVUxRCw4QkFBWTtJQWNaLGtDQUFnQixhQUFDLElBQVksRUFBRSxJQUFZLEVBQUUsUUFBZ0I7SUFVN0QsNkJBQVc7SUFVWCxrQ0FBZ0I7SUFRaEIsc0NBQW9CO0lBZ0JwQiwrQkFBYSxhQUFDLElBQVksRUFBRSxRQUFnQjtJQW9CNUMsMENBQXdCLGFBQ3RCLElBQVksRUFDWixRQUFnQixFQUNoQixjQUFzQixFQUN0QixVQUFvQjtJQW1CdEIsZ0NBQWMsYUFBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLFFBQWdCO0lBYzNELG1DQUFpQixhQUFDLElBQVk7SUFROUIsdUNBQXFCO0lBUXJCLDhDQUE0QjtJQVE1QiwwQkFBUTtJQVFSLGlDQUFlO0lBUWYsdUNBQXFCO0lBUXJCLDBCQUFRO0lBUVIsaUNBQWU7SUFRZiwyQ0FBeUIsYUFBQyxRQUFnQixFQUFFLFFBQWdCO0lBUTVELDBDQUF3QjtJQVF4Qiw4QkFBWTtJQVFaLG1DQUFpQjtJQVFqQiwwQkFBUSxhQUFDLEVBQVU7SUFZbkIscUNBQW1CLGFBQUMsRUFBVTtJQVk5QiwyQkFBUyxhQUFDLEVBQVU7SUFZcEIsNEJBQVUsYUFBQyxFQUFVO0lBVXJCLDBCQUFROzs7Ozs7a0JBMWFWO0VBb0k2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhvdHNwb3RDb25uZWN0aW9uSW5mbyB7XHJcbiAgLyoqXHJcbiAgICogICAgICBUaGUgc2VydmljZSBzZXQgaWRlbnRpZmllciAoU1NJRCkgb2YgdGhlIGN1cnJlbnQgODAyLjExIG5ldHdvcmsuXHJcbiAgICovXHJcbiAgU1NJRDogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiAgICAgIFRoZSBiYXNpYyBzZXJ2aWNlIHNldCBpZGVudGlmaWVyIChCU1NJRCkgb2YgdGhlIGN1cnJlbnQgYWNjZXNzIHBvaW50LlxyXG4gICAqL1xyXG4gIEJTU0lEOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgVGhlIGN1cnJlbnQgbGluayBzcGVlZCBpbiBNYnBzXHJcbiAgICovXHJcbiAgbGlua1NwZWVkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgVGhlIElQIEFkZHJlc3NcclxuICAgKi9cclxuICBJUEFkZHJlc3M6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogICAgICBFYWNoIGNvbmZpZ3VyZWQgbmV0d29yayBoYXMgYSB1bmlxdWUgc21hbGwgaW50ZWdlciBJRCwgdXNlZCB0byBpZGVudGlmeSB0aGUgbmV0d29yayB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyBvbiB0aGUgc3VwcGxpY2FudC5cclxuICAgKi9cclxuICBuZXR3b3JrSUQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIb3RzcG90TmV0d29yayB7XHJcbiAgLyoqXHJcbiAgICogICAgICBIdW1hbiByZWFkYWJsZSBuZXR3b3JrIG5hbWVcclxuICAgKi9cclxuICBTU0lEOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgTUFDIEFkZHJlc3Mgb2YgdGhlIGFjY2VzcyBwb2ludFxyXG4gICAqL1xyXG4gIEJTU0lEOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgVGhlIHByaW1hcnkgMjAgTUh6IGZyZXF1ZW5jeSAoaW4gTUh6KSBvZiB0aGUgY2hhbm5lbCBvdmVyIHdoaWNoIHRoZSBjbGllbnQgaXMgY29tbXVuaWNhdGluZyB3aXRoIHRoZSBhY2Nlc3MgcG9pbnQuXHJcbiAgICovXHJcbiAgZnJlcXVlbmN5OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgVGhlIGRldGVjdGVkIHNpZ25hbCBsZXZlbCBpbiBkQm0sIGFsc28ga25vd24gYXMgdGhlIFJTU0kuXHJcbiAgICovXHJcbiAgbGV2ZWw6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogICAgICBUaW1lc3RhbXAgaW4gbWljcm9zZWNvbmRzIChzaW5jZSBib290KSB3aGVuIHRoaXMgcmVzdWx0IHdhcyBsYXN0IHNlZW4uXHJcbiAgICovXHJcbiAgdGltZXN0YW1wOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgICAgRGVzY3JpYmVzIHRoZSBhdXRoZW50aWNhdGlvbiwga2V5IG1hbmFnZW1lbnQsIGFuZCBlbmNyeXB0aW9uIHNjaGVtZXMgc3VwcG9ydGVkIGJ5IHRoZSBhY2Nlc3MgcG9pbnQuXHJcbiAgICovXHJcbiAgY2FwYWJpbGl0aWVzOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSG90c3BvdE5ldHdvcmtDb25maWcge1xyXG4gIC8qKlxyXG4gICAqICAgRGV2aWNlIElQIEFkZHJlc3NcclxuICAgKi9cclxuICBkZXZpY2VJUEFkZHJlc3M6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogICBEZXZpY2UgTUFDIEFkZHJlc3NcclxuICAgKi9cclxuICBkZXZpY2VNYWNBZGRyZXNzOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqICAgR2F0ZXdheSBJUCBBZGRyZXNzXHJcbiAgICovXHJcbiAgZ2F0ZXdheUlQQWRkcmVzczogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiAgIEdhdGV3YXkgTUFDIEFkZHJlc3NcclxuICAgKi9cclxuICBnYXRld2F5TWFjQWRkcmVzczogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEhvdHNwb3REZXZpY2Uge1xyXG4gIC8qKlxyXG4gICAqICAgICAgSG90c3BvdCBJUCBBZGRyZXNzXHJcbiAgICovXHJcbiAgaXA6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogICAgICBIb3RzcG90IE1BQyBBZGRyZXNzXHJcbiAgICovXHJcbiAgbWFjOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYmV0YVxyXG4gKiBAbmFtZSBIb3RzcG90XHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIENvcmRvdmEgcGx1Z2luIGZvciBtYW5hZ2luZyBIb3RzcG90IG5ldHdvcmtzIG9uIEFuZHJvaWQuXHJcbiAqXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4taG90c3BvdGAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtIb3RzcG90IHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vaHlwZXJ5MmsvY29yZG92YS1ob3RzcG90LXBsdWdpbikuXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEhvdHNwb3QsIEhvdHNwb3ROZXR3b3JrIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9ob3RzcG90L25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaG90c3BvdDogSG90c3BvdCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmhvdHNwb3Quc2NhbldpZmkoKS50aGVuKChuZXR3b3JrczogSG90c3BvdE5ldHdvcmtbXSkgPT4ge1xyXG4gKiAgICAgY29uc29sZS5sb2cobmV0d29ya3MpO1xyXG4gKiB9KTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIEhvdHNwb3RDb25uZWN0aW9uSW5mb1xyXG4gKiBIb3RzcG90TmV0d29ya1xyXG4gKiBIb3RzcG90TmV0d29ya0NvbmZpZ1xyXG4gKiBIb3RzcG90RGV2aWNlXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnSG90c3BvdCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taG90c3BvdCcsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmhvdHNwb3QnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaHlwZXJ5MmsvY29yZG92YS1ob3RzcG90LXBsdWdpbicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSG90c3BvdCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdG9nZ2xlV2lmaSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZXMgYW5kIHN0YXJ0cyBob3RzcG90IHdpdGggU1NJRCBhbmQgUGFzc3dvcmRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICBTU0lEICAgICAgICAtIFNTSUQgb2YgeW91ciBuZXcgQWNjZXNzIFBvaW50XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgIG1vZGUgICAgICAgIC0gZW5jcnlwdGlvbiBtb2RlIChPcGVuLCBXRVAsIFdQQSwgV1BBX1BTSylcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgcGFzc3dvcmQgICAgLSBwYXNzd29yZCBmb3IgeW91ciBuZXcgQWNjZXNzIFBvaW50XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gICAgICAgIC0gUHJvbWlzZSB0byBjYWxsIG9uY2UgaG90c3BvdCBpcyBzdGFydGVkLCBvciByZWplY3QgdXBvbiBmYWlsdXJlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUhvdHNwb3Qoc3NpZDogc3RyaW5nLCBtb2RlOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFR1cm5zIG9uIEFjY2VzcyBQb2ludFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IC0gdHJ1ZSBpZiBBUCBpcyBzdGFydGVkXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0YXJ0SG90c3BvdCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbmZpZ3VyZXMgaG90c3BvdCB3aXRoIFNTSUQgYW5kIFBhc3N3b3JkXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgU1NJRCAgICAgICAgLSBTU0lEIG9mIHlvdXIgbmV3IEFjY2VzcyBQb2ludFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICBtb2RlICAgICAgICAtIGVuY3J5cHRpb24gbW9kZSAoT3BlbiwgV0VQLCBXUEEsIFdQQV9QU0spXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgIHBhc3N3b3JkICAgIC0gcGFzc3dvcmQgZm9yIHlvdXIgbmV3IEFjY2VzcyBQb2ludFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59ICAgICAgICAtIFByb21pc2UgdG8gY2FsbCB3aGVuIGhvdHNwb3QgaXMgY29uZmlndXJlZCwgb3IgcmVqZWN0IHVwb24gZmFpbHVyZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjb25maWd1cmVIb3RzcG90KHNzaWQ6IHN0cmluZywgbW9kZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUdXJucyBvZmYgQWNjZXNzIFBvaW50XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBQcm9taXNlIHRvIHR1cm4gb2ZmIHRoZSBob3RzcG90LCB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmVcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RvcEhvdHNwb3QoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgaG90c3BvdCBpcyBlbmFibGVkXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0gICAgLSBQcm9taXNlIHRoYXQgaG90c3BvdCBpcyBlbmFibGVkLCByZWplY3RlZCBpZiBpdCBpcyBub3QgZW5hYmxlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0hvdHNwb3RFbmFibGVkKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SG90c3BvdERldmljZVtdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QWxsSG90c3BvdERldmljZXMoKTogUHJvbWlzZTxIb3RzcG90RGV2aWNlW10+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbm5lY3QgdG8gYSBXaUZpIG5ldHdvcmtcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICBzc2lkXHJcbiAgICogICAgICBTU0lEIHRvIGNvbm5lY3RcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgcGFzc3dvcmRcclxuICAgKiAgICAgIHBhc3N3b3JkIHRvIHVzZVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICogICAgICBQcm9taXNlIHRoYXQgY29ubmVjdGlvbiB0byB0aGUgV2lGaSBuZXR3b3JrIHdhcyBzdWNjZXNzZnVsbCwgcmVqZWN0ZWQgaWYgdW5zdWNjZXNzZnVsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNvbm5lY3RUb1dpZmkoc3NpZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb25uZWN0IHRvIGEgV2lGaSBuZXR3b3JrXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICBzc2lkXHJcbiAgICogICAgICBTU0lEIHRvIGNvbm5lY3RcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICBwYXNzd29yZFxyXG4gICAqICAgICAgUGFzc3dvcmQgdG8gdXNlXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgYXV0aGVudGljYXRpb25cclxuICAgKiAgICAgIEF1dGhlbnRpY2F0aW9uIG1vZGVzIHRvIHVzZSAoTEVBUCwgU0hBUkVELCBPUEVOKVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGVuY3J5cHRpb25cclxuICAgKiAgICAgIEVuY3J5cHRpb24gbW9kZXMgdG8gdXNlIChDQ01QLCBUS0lQLCBXRVAxMDQsIFdFUDQwKVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XHJcbiAgICogICAgICBQcm9taXNlIHRoYXQgY29ubmVjdGlvbiB0byB0aGUgV2lGaSBuZXR3b3JrIHdhcyBzdWNjZXNzZnVsbCwgcmVqZWN0ZWQgaWYgdW5zdWNjZXNzZnVsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNvbm5lY3RUb1dpZmlBdXRoRW5jcnlwdChcclxuICAgIHNzaWQ6IHN0cmluZyxcclxuICAgIHBhc3N3b3JkOiBzdHJpbmcsXHJcbiAgICBhdXRoZW50aWNhdGlvbjogc3RyaW5nLFxyXG4gICAgZW5jcnlwdGlvbjogc3RyaW5nW11cclxuICApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBhIFdpRmkgbmV0d29ya1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgIHNzaWRcclxuICAgKiAgICAgIFNTSUQgb2YgbmV0d29ya1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICBtb2RlXHJcbiAgICogICAgICBBdXRoZW50aWNhdGlvbiBtb2RlIG9mIChPcGVuLCBXRVAsIFdQQSwgV1BBX1BTSylcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgcGFzc3dvcmRcclxuICAgKiAgICAgIFBhc3N3b3JkIGZvciBuZXR3b3JrXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKiAgICAgIFByb21pc2UgdGhhdCBhZGRpbmcgdGhlIFdpRmkgbmV0d29yayB3YXMgc3VjY2Vzc2Z1bGwsIHJlamVjdGVkIGlmIHVuc3VjY2Vzc2Z1bFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBhZGRXaWZpTmV0d29yayhzc2lkOiBzdHJpbmcsIG1vZGU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGEgV2lGaSBuZXR3b3JrXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgc3NpZFxyXG4gICAqICAgICAgU1NJRCBvZiBuZXR3b3JrXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICAgKiAgICAgIFByb21pc2UgdGhhdCByZW1vdmluZyB0aGUgV2lGaSBuZXR3b3JrIHdhcyBzdWNjZXNzZnVsbCwgcmVqZWN0ZWQgaWYgdW5zdWNjZXNzZnVsXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZVdpZmlOZXR3b3JrKHNzaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQ29ubmVjdGVkVG9JbnRlcm5ldCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0Nvbm5lY3RlZFRvSW50ZXJuZXRWaWFXaWZpKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzV2lmaU9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzV2lmaVN1cHBvcnRlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc1dpZmlEaXJlY3RTdXBwb3J0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIb3RzcG90TmV0d29ya1tdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2NhbldpZmkoKTogUHJvbWlzZTxIb3RzcG90TmV0d29ya1tdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIb3RzcG90TmV0d29ya1tdPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2NhbldpZmlCeUxldmVsKCk6IFByb21pc2U8SG90c3BvdE5ldHdvcmtbXT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RhcnRXaWZpUGVyaW9kaWNhbGx5U2NhbihpbnRlcnZhbDogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BXaWZpUGVyaW9kaWNhbGx5U2NhbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SG90c3BvdE5ldHdvcmtDb25maWc+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXROZXRDb25maWcoKTogUHJvbWlzZTxIb3RzcG90TmV0d29ya0NvbmZpZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SG90c3BvdENvbm5lY3Rpb25JbmZvPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Q29ubmVjdGlvbkluZm8oKTogUHJvbWlzZTxIb3RzcG90Q29ubmVjdGlvbkluZm8+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHBpbmdIb3N0KGlwOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBNQUMgQWRkcmVzcyBhc3NvY2lhdGVkIHdpdGggSVAgQWRkcmVzcyBmcm9tIEFSUCBGaWxlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgIGlwICAtIElQIEFkZHJlc3MgdGhhdCB5b3Ugd2FudCB0aGUgTUFDIEFkZHJlc3Mgb2ZcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59ICAtIEEgUHJvbWlzZSBmb3IgdGhlIE1BQyBBZGRyZXNzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldE1hY0FkZHJlc3NPZkhvc3QoaXA6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgSVAgaXMgbGl2ZSB1c2luZyBETlNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgaXAgIC0gSVAgQWRkcmVzcyB5b3Ugd2FudCB0byB0ZXN0XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBBIFByb21pc2UgZm9yIHdoZXRoZXIgdGhlIElQIEFkZHJlc3MgaXMgcmVhY2hhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRG5zTGl2ZShpcDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgSVAgaXMgbGl2ZSB1c2luZyBzb2NrZXQgQW5kIFBPUlRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAgICAgICAgaXAgIC0gSVAgQWRkcmVzcyB5b3Ugd2FudCB0byB0ZXN0XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBBIFByb21pc2UgZm9yIHdoZXRoZXIgdGhlIElQIEFkZHJlc3MgaXMgcmVhY2hhYmxlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzUG9ydExpdmUoaXA6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIGRldmljZSBpcyByb290ZWRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSAtIEEgUHJvbWlzZSBmb3Igd2hldGhlciB0aGUgZGV2aWNlIGlzIHJvb3RlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc1Jvb3RlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19