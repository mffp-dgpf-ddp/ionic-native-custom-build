import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, checkAvailability, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var JinsMeme = /** @class */ (function (_super) {
    __extends(JinsMeme, _super);
    function JinsMeme() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JinsMeme.prototype.setAppClientID = function (appClientId, clientSecret) { return cordova(this, "setAppClientID", {}, arguments); };
    JinsMeme.prototype.startScan = function () { return cordova(this, "startScan", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": true }, arguments); };
    JinsMeme.prototype.stopScan = function () { return cordova(this, "stopScan", {}, arguments); };
    JinsMeme.prototype.connect = function (target) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Observable(function (observer) {
                    var data = cordova.plugins.JinsMemePlugin.connect(target, observer.next.bind(observer), observer.complete.bind(observer), observer.error.bind(observer));
                    return data;
                });
            }
        })();
    };
    JinsMeme.prototype.setAutoConnect = function (flag) { return cordova(this, "setAutoConnect", {}, arguments); };
    JinsMeme.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    JinsMeme.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    JinsMeme.prototype.startDataReport = function () { return cordova(this, "startDataReport", { "observable": true, "clearFunction": "stopDataReport", "clearWithArgs": true }, arguments); };
    JinsMeme.prototype.stopDataReport = function () { return cordova(this, "stopDataReport", {}, arguments); };
    JinsMeme.prototype.getSDKVersion = function () { return cordova(this, "getSDKVersion", {}, arguments); };
    JinsMeme.prototype.getConnectedByOthers = function () { return cordova(this, "getConnectedByOthers", {}, arguments); };
    JinsMeme.prototype.isCalibrated = function () { return cordova(this, "isCalibrated", {}, arguments); };
    JinsMeme.prototype.getConnectedDeviceType = function () { return cordova(this, "getConnectedDeviceType", {}, arguments); };
    JinsMeme.prototype.getConnectedDeviceSubType = function () { return cordova(this, "getConnectedDeviceSubType", {}, arguments); };
    JinsMeme.prototype.getFWVersion = function () { return cordova(this, "getFWVersion", {}, arguments); };
    JinsMeme.prototype.getHWVersion = function () { return cordova(this, "getHWVersion", {}, arguments); };
    JinsMeme.prototype.isDataReceiving = function () { return cordova(this, "isDataReceiving", {}, arguments); };
    JinsMeme.pluginName = "JINS MEME";
    JinsMeme.plugin = "cordova-plugin-jins-meme";
    JinsMeme.pluginRef = "JinsMemePlugin";
    JinsMeme.repo = "https://github.com/BlyncSync/cordova-plugin-jins-meme";
    JinsMeme.platforms = ["Android", "iOS"];
    JinsMeme = __decorate([
        Injectable()
    ], JinsMeme);
    return JinsMeme;
}(IonicNativePlugin));
export { JinsMeme };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ppbnMtbWVtZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxpREFBb0QsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXNDSiw0QkFBaUI7Ozs7SUFXN0MsaUNBQWMsYUFBQyxXQUFtQixFQUFFLFlBQW9CO0lBWXhELDRCQUFTO0lBUVQsMkJBQVE7SUFXUiwwQkFBTyxhQUFDLE1BQWM7OzttREFBbUI7Z0JBQ3ZDLE9BQU8sSUFBSSxVQUFVLENBQU0sVUFBQyxRQUFhO29CQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQ2pELE1BQU0sRUFDTixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ2hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM5QixDQUFDO29CQUNGLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2FBQ0o7OztJQVFELGlDQUFjLGFBQUMsSUFBYTtJQVE1Qiw4QkFBVztJQVFYLDZCQUFVO0lBWVYsa0NBQWU7SUFRZixpQ0FBYztJQVNkLGdDQUFhO0lBUWIsdUNBQW9CO0lBUXBCLCtCQUFZO0lBUVoseUNBQXNCO0lBUXRCLDRDQUF5QjtJQVF6QiwrQkFBWTtJQVFaLCtCQUFZO0lBUVosa0NBQWU7Ozs7OztJQWpLSixRQUFRO1FBRHBCLFVBQVUsRUFBRTtPQUNBLFFBQVE7bUJBeENyQjtFQXdDOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFDaGVjaywgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgY29yZG92YTogYW55O1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEppbnMgTWVtZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIEpJTlMgTUVNRSBTREtcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgSmluc01lbWUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ppbnMtbWVtZS9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGppbnNNZW1lOiBKaW5zTWVtZSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLmppbnNNZW1lLnNldEFwcENsaWVudElEKGFwcENsaWVudElkOiBzdHJpbmcsIGNsaWVudFNlY3JldDogc3RyaW5nKS50aGVuKFxyXG4gKiAgIC8vIEJsdWV0b290aCBzaG91bGQgYmUgZW5hYmxlZCBhbmQgdGhlIEpJTlMgTUVNRSBwb3dlcmVkIG9uIChibGlua2luZyBibHVlIGxpZ2h0KVxyXG4gKiAgIHRoaXMuamluc01lbWUuc3RhcnRTY2FuKCkuc3Vic2NyaWJlKChtZW1lX2FkZHIpID0+IHtcclxuICogICAgIHRoaXMuamluc01lbWUuY29ubmVjdChtZW1lX2FkZHIpLnN1YnNjcmliZSgoY29ubmVjdFJlc3VsdCkgPT4ge1xyXG4gKiAgICAgICB0aGlzLm1lbWVTZXJ2aWNlLnN0YXJ0RGF0YVJlcG9ydCgpLnN1YnNjcmliZSgoZGF0YVJlcG9ydCkgPT4ge1xyXG4gKiAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFSZXBvcnQpO1xyXG4gKiAgICAgICB9KTtcclxuICogICAgIH0pO1xyXG4gKiAgIH0pO1xyXG4gKiAuY2F0Y2goY29uc29sZS5sb2coJ2ppbnNNZW1lLnNldEFwcENsaWVudElEIGF1dGhlbnRpY2F0aW9uIGVycm9yJykpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdKSU5TIE1FTUUnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWppbnMtbWVtZScsXHJcbiAgcGx1Z2luUmVmOiAnSmluc01lbWVQbHVnaW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vQmx5bmNTeW5jL2NvcmRvdmEtcGx1Z2luLWppbnMtbWVtZScsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEppbnNNZW1lIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEF1dGhlbnRpY2F0aW9uIGFuZCBhdXRob3JpemF0aW9uIG9mIEFwcCBhbmQgU0RLLlxyXG4gICAqIE11c3QgY2FsbCB0aGlzIG1ldGhvZCBmaXJzdC5cclxuICAgKiBTaWduIHVwIGZvciBhbiBhcHAgSUQgKGFuZCBnZXQgYW4gYXBwL2NsaWVudCBzZWNyZXQpIGF0IGRldmVsb3BlcnMuamlucy5jb21cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZXRBcHBDbGllbnRJRFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGllbnRTZWNyZXRcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRBcHBDbGllbnRJRChhcHBDbGllbnRJZDogc3RyaW5nLCBjbGllbnRTZWNyZXQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyBzY2FubmluZyBmb3IgSklOUyBNRU1FLlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wU2NhbicsXHJcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxyXG4gIH0pXHJcbiAgc3RhcnRTY2FuKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHNjYW5uaW5nIEpJTlMgTUVNRS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wU2NhbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBFc3RhYmxpc2hlcyBjb25uZWN0aW9uIHRvIEpJTlMgTUVNRS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YUNoZWNrKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICBjb25uZWN0KHRhcmdldDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxhbnk+KChvYnNlcnZlcjogYW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBjb3Jkb3ZhLnBsdWdpbnMuSmluc01lbWVQbHVnaW4uY29ubmVjdChcclxuICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSxcclxuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZS5iaW5kKG9ic2VydmVyKSxcclxuICAgICAgICBvYnNlcnZlci5lcnJvci5iaW5kKG9ic2VydmVyKVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGF1dG8gY29ubmVjdGlvbiBtb2RlLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZmxhZ1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldEF1dG9Db25uZWN0KGZsYWc6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBjb25uZWN0aW9uIHRvIEpJTlMgTUVNRSBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0Nvbm5lY3RlZCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBEaXNjb25uZWN0cyBmcm9tIEpJTlMgTUVNRS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyByZWNlaXZpbmcgcmVhbHRpbWUgZGF0YS5cclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHtcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcERhdGFSZXBvcnQnLFxyXG4gICAgY2xlYXJXaXRoQXJnczogdHJ1ZSxcclxuICB9KVxyXG4gIHN0YXJ0RGF0YVJlcG9ydCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBTdG9wcyByZWNlaXZpbmcgZGF0YS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wRGF0YVJlcG9ydCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIFNESyB2ZXJzaW9uLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0U0RLVmVyc2lvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIEpJTlMgTUVNRSBjb25uZWN0ZWQgd2l0aCBvdGhlciBhcHBzLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldENvbm5lY3RlZEJ5T3RoZXJzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgY2FsaWJyYXRpb24gc3RhdHVzXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNDYWxpYnJhdGVkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgZGV2aWNlIHR5cGUuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Q29ubmVjdGVkRGV2aWNlVHlwZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGhhcmR3YXJlIHZlcnNpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Q29ubmVjdGVkRGV2aWNlU3ViVHlwZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIEZXIFZlcnNpb24uXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0RldWZXJzaW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgSFcgVmVyc2lvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRIV1ZlcnNpb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyByZXNwb25zZSBhYm91dCB3aGV0aGVyIGRhdGEgd2FzIHJlY2VpdmVkIG9yIG5vdC5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0RhdGFSZWNlaXZpbmcoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19