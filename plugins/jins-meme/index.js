var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, checkAvailability, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var JinsMemeOriginal = /** @class */ (function (_super) {
    __extends(JinsMemeOriginal, _super);
    function JinsMemeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JinsMemeOriginal.prototype.setAppClientID = function (appClientId, clientSecret) { return cordova(this, "setAppClientID", {}, arguments); };
    JinsMemeOriginal.prototype.startScan = function () { return cordova(this, "startScan", { "observable": true, "clearFunction": "stopScan", "clearWithArgs": true }, arguments); };
    JinsMemeOriginal.prototype.stopScan = function () { return cordova(this, "stopScan", {}, arguments); };
    JinsMemeOriginal.prototype.connect = function (target) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Observable(function (observer) {
                    var data = cordova.plugins.JinsMemePlugin.connect(target, observer.next.bind(observer), observer.complete.bind(observer), observer.error.bind(observer));
                    return data;
                });
            }
        })();
    };
    JinsMemeOriginal.prototype.setAutoConnect = function (flag) { return cordova(this, "setAutoConnect", {}, arguments); };
    JinsMemeOriginal.prototype.isConnected = function () { return cordova(this, "isConnected", {}, arguments); };
    JinsMemeOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    JinsMemeOriginal.prototype.startDataReport = function () { return cordova(this, "startDataReport", { "observable": true, "clearFunction": "stopDataReport", "clearWithArgs": true }, arguments); };
    JinsMemeOriginal.prototype.stopDataReport = function () { return cordova(this, "stopDataReport", {}, arguments); };
    JinsMemeOriginal.prototype.getSDKVersion = function () { return cordova(this, "getSDKVersion", {}, arguments); };
    JinsMemeOriginal.prototype.getConnectedByOthers = function () { return cordova(this, "getConnectedByOthers", {}, arguments); };
    JinsMemeOriginal.prototype.isCalibrated = function () { return cordova(this, "isCalibrated", {}, arguments); };
    JinsMemeOriginal.prototype.getConnectedDeviceType = function () { return cordova(this, "getConnectedDeviceType", {}, arguments); };
    JinsMemeOriginal.prototype.getConnectedDeviceSubType = function () { return cordova(this, "getConnectedDeviceSubType", {}, arguments); };
    JinsMemeOriginal.prototype.getFWVersion = function () { return cordova(this, "getFWVersion", {}, arguments); };
    JinsMemeOriginal.prototype.getHWVersion = function () { return cordova(this, "getHWVersion", {}, arguments); };
    JinsMemeOriginal.prototype.isDataReceiving = function () { return cordova(this, "isDataReceiving", {}, arguments); };
    JinsMemeOriginal.pluginName = "JINS MEME";
    JinsMemeOriginal.plugin = "cordova-plugin-jins-meme";
    JinsMemeOriginal.pluginRef = "JinsMemePlugin";
    JinsMemeOriginal.repo = "https://github.com/BlyncSync/cordova-plugin-jins-meme";
    JinsMemeOriginal.platforms = ["Android", "iOS"];
    return JinsMemeOriginal;
}(IonicNativePlugin));
var JinsMeme = new JinsMemeOriginal();
export { JinsMeme };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ppbnMtbWVtZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxpREFBb0QsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXNDSiw0QkFBaUI7Ozs7SUFXN0MsaUNBQWMsYUFBQyxXQUFtQixFQUFFLFlBQW9CO0lBWXhELDRCQUFTO0lBUVQsMkJBQVE7SUFXUiwwQkFBTyxhQUFDLE1BQWM7OzttREFBbUI7Z0JBQ3ZDLE9BQU8sSUFBSSxVQUFVLENBQU0sVUFBQyxRQUFhO29CQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQ2pELE1BQU0sRUFDTixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDNUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ2hDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM5QixDQUFDO29CQUNGLE9BQU8sSUFBSSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2FBQ0o7OztJQVFELGlDQUFjLGFBQUMsSUFBYTtJQVE1Qiw4QkFBVztJQVFYLDZCQUFVO0lBWVYsa0NBQWU7SUFRZixpQ0FBYztJQVNkLGdDQUFhO0lBUWIsdUNBQW9CO0lBUXBCLCtCQUFZO0lBUVoseUNBQXNCO0lBUXRCLDRDQUF5QjtJQVF6QiwrQkFBWTtJQVFaLCtCQUFZO0lBUVosa0NBQWU7Ozs7OzttQkF6TWpCO0VBd0M4QixpQkFBaUI7U0FBbEMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgQ29yZG92YUNoZWNrLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBjb3Jkb3ZhOiBhbnk7XHJcblxyXG4vKipcclxuICogQG5hbWUgSmlucyBNZW1lXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgSklOUyBNRU1FIFNES1xyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBKaW5zTWVtZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvamlucy1tZW1lL25neCc7XHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgamluc01lbWU6IEppbnNNZW1lKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMuamluc01lbWUuc2V0QXBwQ2xpZW50SUQoYXBwQ2xpZW50SWQ6IHN0cmluZywgY2xpZW50U2VjcmV0OiBzdHJpbmcpLnRoZW4oXHJcbiAqICAgLy8gQmx1ZXRvb3RoIHNob3VsZCBiZSBlbmFibGVkIGFuZCB0aGUgSklOUyBNRU1FIHBvd2VyZWQgb24gKGJsaW5raW5nIGJsdWUgbGlnaHQpXHJcbiAqICAgdGhpcy5qaW5zTWVtZS5zdGFydFNjYW4oKS5zdWJzY3JpYmUoKG1lbWVfYWRkcikgPT4ge1xyXG4gKiAgICAgdGhpcy5qaW5zTWVtZS5jb25uZWN0KG1lbWVfYWRkcikuc3Vic2NyaWJlKChjb25uZWN0UmVzdWx0KSA9PiB7XHJcbiAqICAgICAgIHRoaXMubWVtZVNlcnZpY2Uuc3RhcnREYXRhUmVwb3J0KCkuc3Vic2NyaWJlKChkYXRhUmVwb3J0KSA9PiB7XHJcbiAqICAgICAgICAgY29uc29sZS5sb2coZGF0YVJlcG9ydCk7XHJcbiAqICAgICAgIH0pO1xyXG4gKiAgICAgfSk7XHJcbiAqICAgfSk7XHJcbiAqIC5jYXRjaChjb25zb2xlLmxvZygnamluc01lbWUuc2V0QXBwQ2xpZW50SUQgYXV0aGVudGljYXRpb24gZXJyb3InKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0pJTlMgTUVNRScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tamlucy1tZW1lJyxcclxuICBwbHVnaW5SZWY6ICdKaW5zTWVtZVBsdWdpbicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9CbHluY1N5bmMvY29yZG92YS1wbHVnaW4tamlucy1tZW1lJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSmluc01lbWUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQXV0aGVudGljYXRpb24gYW5kIGF1dGhvcml6YXRpb24gb2YgQXBwIGFuZCBTREsuXHJcbiAgICogTXVzdCBjYWxsIHRoaXMgbWV0aG9kIGZpcnN0LlxyXG4gICAqIFNpZ24gdXAgZm9yIGFuIGFwcCBJRCAoYW5kIGdldCBhbiBhcHAvY2xpZW50IHNlY3JldCkgYXQgZGV2ZWxvcGVycy5qaW5zLmNvbVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNldEFwcENsaWVudElEXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudFNlY3JldFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldEFwcENsaWVudElEKGFwcENsaWVudElkOiBzdHJpbmcsIGNsaWVudFNlY3JldDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHNjYW5uaW5nIGZvciBKSU5TIE1FTUUuXHJcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSh7XHJcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxyXG4gICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BTY2FuJyxcclxuICAgIGNsZWFyV2l0aEFyZ3M6IHRydWUsXHJcbiAgfSlcclxuICBzdGFydFNjYW4oKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogU3RvcHMgc2Nhbm5pbmcgSklOUyBNRU1FLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BTY2FuKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEVzdGFibGlzaGVzIGNvbm5lY3Rpb24gdG8gSklOUyBNRU1FLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRcclxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhQ2hlY2soe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICB9KVxyXG4gIGNvbm5lY3QodGFyZ2V0OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPGFueT4oKG9ic2VydmVyOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgZGF0YSA9IGNvcmRvdmEucGx1Z2lucy5KaW5zTWVtZVBsdWdpbi5jb25uZWN0KFxyXG4gICAgICAgIHRhcmdldCxcclxuICAgICAgICBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpLFxyXG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlLmJpbmQob2JzZXJ2ZXIpLFxyXG4gICAgICAgIG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgYXV0byBjb25uZWN0aW9uIG1vZGUuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBmbGFnXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0QXV0b0Nvbm5lY3QoZmxhZzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgd2hldGhlciBhIGNvbm5lY3Rpb24gdG8gSklOUyBNRU1FIGhhcyBiZWVuIGVzdGFibGlzaGVkLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQ29ubmVjdGVkKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIERpc2Nvbm5lY3RzIGZyb20gSklOUyBNRU1FLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHJlY2VpdmluZyByZWFsdGltZSBkYXRhLlxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcclxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wRGF0YVJlcG9ydCcsXHJcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlLFxyXG4gIH0pXHJcbiAgc3RhcnREYXRhUmVwb3J0KCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHJlY2VpdmluZyBkYXRhLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHN0b3BEYXRhUmVwb3J0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgU0RLIHZlcnNpb24uXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRTREtWZXJzaW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgSklOUyBNRU1FIGNvbm5lY3RlZCB3aXRoIG90aGVyIGFwcHMuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0Q29ubmVjdGVkQnlPdGhlcnMoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBjYWxpYnJhdGlvbiBzdGF0dXNcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0NhbGlicmF0ZWQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBkZXZpY2UgdHlwZS5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDb25uZWN0ZWREZXZpY2VUeXBlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgaGFyZHdhcmUgdmVyc2lvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDb25uZWN0ZWREZXZpY2VTdWJUeXBlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgRlcgVmVyc2lvbi5cclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRGV1ZlcnNpb24oKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBIVyBWZXJzaW9uLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldEhXVmVyc2lvbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHJlc3BvbnNlIGFib3V0IHdoZXRoZXIgZGF0YSB3YXMgcmVjZWl2ZWQgb3Igbm90LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRGF0YVJlY2VpdmluZygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=