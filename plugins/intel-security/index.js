var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IntelSecurityOriginal = /** @class */ (function (_super) {
    __extends(IntelSecurityOriginal, _super);
    function IntelSecurityOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * returns an IntelSecurityStorage object
         * @type {IntelSecurityStorage}
         */
        _this.storage = new IntelSecurityStorage();
        /**
         * Returns an IntelSecurityData object
         * @type {IntelSecurityData}
         */
        _this.data = new IntelSecurityData();
        return _this;
    }
    IntelSecurityOriginal.pluginName = "IntelSecurity";
    IntelSecurityOriginal.plugin = "com-intel-security-cordova-plugin";
    IntelSecurityOriginal.pluginRef = "intel.security";
    IntelSecurityOriginal.repo = "https://github.com/AppSecurityApi/com-intel-security-cordova-plugin";
    IntelSecurityOriginal.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    return IntelSecurityOriginal;
}(IonicNativePlugin));
var IntelSecurity = new IntelSecurityOriginal();
export { IntelSecurity };
var IntelSecurityData = /** @class */ (function () {
    function IntelSecurityData() {
    }
    IntelSecurityData.prototype.createFromData = function (options) { return cordova(this, "createFromData", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.createFromSealedData = function (options) { return cordova(this, "createFromSealedData", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getData = function (instanceID) { return cordova(this, "getData", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getSealedData = function (instanceID) { return cordova(this, "getSealedData", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getTag = function (instanceID) { return cordova(this, "getTag", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getPolicy = function (instanceID) { return cordova(this, "getPolicy", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getOwners = function (instanceID) { return cordova(this, "getOwners", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getCreator = function (instanceID) { return cordova(this, "getCreator", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.getWebOwners = function (instanceID) { return cordova(this, "getWebOwners", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.changeExtraKey = function (options) { return cordova(this, "changeExtraKey", { "otherPromise": true }, arguments); };
    IntelSecurityData.prototype.destroy = function (instanceID) { return cordova(this, "destroy", { "otherPromise": true }, arguments); };
    IntelSecurityData.pluginName = "IntelSecurity";
    IntelSecurityData.plugin = "com-intel-security-cordova-plugin";
    IntelSecurityData.pluginRef = "intel.security.secureData";
    return IntelSecurityData;
}());
export { IntelSecurityData };
var IntelSecurityStorage = /** @class */ (function () {
    function IntelSecurityStorage() {
    }
    IntelSecurityStorage.prototype.delete = function (options) { return cordova(this, "delete", { "otherPromise": true }, arguments); };
    IntelSecurityStorage.prototype.read = function (options) { return cordova(this, "read", { "otherPromise": true }, arguments); };
    IntelSecurityStorage.prototype.write = function (options) { return cordova(this, "write", { "otherPromise": true }, arguments); };
    IntelSecurityStorage.pluginName = "IntelSecurity";
    IntelSecurityStorage.plugin = "com-intel-security-cordova-plugin";
    IntelSecurityStorage.pluginRef = "intel.security.secureStorage";
    return IntelSecurityStorage;
}());
export { IntelSecurityStorage };
//# sourceMappingURL=data:application/json;base64,