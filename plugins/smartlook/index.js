var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SmartlookSetupConfigBuilder = /** @class */ (function () {
    function SmartlookSetupConfigBuilder(smartlookAPIKey) {
        this._smartlookSetupConfig = new SmartlookSetupConfig(smartlookAPIKey);
    }
    SmartlookSetupConfigBuilder.prototype.fps = function (fps) {
        this._smartlookSetupConfig.fps = fps;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.renderingMode = function (renderingMode) {
        this._smartlookSetupConfig.renderingMode = renderingMode;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSession = function (startNewSession) {
        this._smartlookSetupConfig.startNewSession = startNewSession;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.startNewSessionAndUser = function (startNewSessionAndUser) {
        this._smartlookSetupConfig.startNewSessionAndUser = startNewSessionAndUser;
        return this;
    };
    SmartlookSetupConfigBuilder.prototype.build = function () {
        return this._smartlookSetupConfig;
    };
    return SmartlookSetupConfigBuilder;
}());
export { SmartlookSetupConfigBuilder };
var SmartlookSetupConfig = /** @class */ (function () {
    function SmartlookSetupConfig(smartlookAPIKey) {
        this.smartlookAPIKey = smartlookAPIKey;
    }
    return SmartlookSetupConfig;
}());
export { SmartlookSetupConfig };
var SmartlookResetSession = /** @class */ (function () {
    function SmartlookResetSession(resetUser) {
        this.resetUser = resetUser;
    }
    return SmartlookResetSession;
}());
export { SmartlookResetSession };
var SmartlookUserIdentifier = /** @class */ (function () {
    function SmartlookUserIdentifier(identifier, sessionProperties) {
        this.identifier = identifier;
        this.sessionProperties = sessionProperties;
    }
    return SmartlookUserIdentifier;
}());
export { SmartlookUserIdentifier };
var SmartlookEventTrackingMode = /** @class */ (function () {
    function SmartlookEventTrackingMode(eventTrackingMode) {
        this.eventTrackingMode = eventTrackingMode;
    }
    SmartlookEventTrackingMode.FULL_TRACKING = function () {
        return new SmartlookEventTrackingMode('full_tracking');
    };
    SmartlookEventTrackingMode.IGNORE_USER_INTERACTION = function () {
        return new SmartlookEventTrackingMode('ignore_user_interaction');
    };
    SmartlookEventTrackingMode.NO_TRACKING = function () {
        return new SmartlookEventTrackingMode('no_tracking');
    };
    return SmartlookEventTrackingMode;
}());
export { SmartlookEventTrackingMode };
var SmartlookViewState = /** @class */ (function () {
    function SmartlookViewState() {
    }
    SmartlookViewState.START = 'start';
    SmartlookViewState.STOP = 'stop';
    return SmartlookViewState;
}());
export { SmartlookViewState };
var SmartlookNavigationEvent = /** @class */ (function () {
    function SmartlookNavigationEvent(name, viewState) {
        this.name = name;
        this.viewState = this.viewState;
    }
    return SmartlookNavigationEvent;
}());
export { SmartlookNavigationEvent };
var SmartlookCustomEvent = /** @class */ (function () {
    function SmartlookCustomEvent(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookCustomEvent;
}());
export { SmartlookCustomEvent };
var SmartlookTimedCustomEventStart = /** @class */ (function () {
    function SmartlookTimedCustomEventStart(name, eventProperties) {
        this.name = name;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStart;
}());
export { SmartlookTimedCustomEventStart };
var SmartlookTimedCustomEventStop = /** @class */ (function () {
    function SmartlookTimedCustomEventStop(eventId, eventProperties) {
        this.eventId = eventId;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventStop;
}());
export { SmartlookTimedCustomEventStop };
var SmartlookTimedCustomEventCancel = /** @class */ (function () {
    function SmartlookTimedCustomEventCancel(eventId, reason, eventProperties) {
        this.eventId = eventId;
        this.reason = reason;
        this.eventProperties = eventProperties;
    }
    return SmartlookTimedCustomEventCancel;
}());
export { SmartlookTimedCustomEventCancel };
var SmartlookGlobalEventProperties = /** @class */ (function () {
    function SmartlookGlobalEventProperties(globalEventProperties, immutable) {
        this.globalEventProperties = globalEventProperties;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperties;
}());
export { SmartlookGlobalEventProperties };
var SmartlookGlobalEventProperty = /** @class */ (function () {
    function SmartlookGlobalEventProperty(key, value, immutable) {
        this.key = key;
        this.value = value;
        this.immutable = immutable;
    }
    return SmartlookGlobalEventProperty;
}());
export { SmartlookGlobalEventProperty };
var SmartlookGlobalEventPropertyKey = /** @class */ (function () {
    function SmartlookGlobalEventPropertyKey(key) {
        this.key = key;
    }
    return SmartlookGlobalEventPropertyKey;
}());
export { SmartlookGlobalEventPropertyKey };
var SmartlookReferrer = /** @class */ (function () {
    function SmartlookReferrer(referrer, source) {
        this.referrer = referrer;
        this.source = source;
    }
    return SmartlookReferrer;
}());
export { SmartlookReferrer };
var SmartlookDashboardSessionUrl = /** @class */ (function () {
    function SmartlookDashboardSessionUrl(withCurrentTimestamp) {
        this.withCurrentTimestamp = withCurrentTimestamp;
    }
    return SmartlookDashboardSessionUrl;
}());
export { SmartlookDashboardSessionUrl };
var SmartlookRenderingMode = /** @class */ (function () {
    function SmartlookRenderingMode(renderingMode) {
        this.renderingMode = renderingMode;
    }
    SmartlookRenderingMode.NO_RENDERING = function () {
        return new SmartlookRenderingMode('no_rendering');
    };
    SmartlookRenderingMode.NATIVE = function () {
        return new SmartlookRenderingMode('native');
    };
    return SmartlookRenderingMode;
}());
export { SmartlookRenderingMode };
var SmartlookOriginal = /** @class */ (function (_super) {
    __extends(SmartlookOriginal, _super);
    function SmartlookOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SmartlookOriginal.prototype.setupAndStartRecording = function (config) { return cordova(this, "setupAndStartRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setup = function (config) { return cordova(this, "setup", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startRecording = function () { return cordova(this, "startRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.stopRecording = function () { return cordova(this, "stopRecording", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.isRecording = function () { return cordova(this, "isRecording", {}, arguments); };
    SmartlookOriginal.prototype.resetSession = function (resetSession) { return cordova(this, "resetSession", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startFullscreenSensitiveMode = function () { return cordova(this, "startFullscreenSensitiveMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.stopFullscreenSensitiveMode = function () { return cordova(this, "stopFullscreenSensitiveMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.isFullscreenSensitiveModeActive = function () { return cordova(this, "isFullscreenSensitiveModeActive", {}, arguments); };
    SmartlookOriginal.prototype.setUserIdentifier = function (identifier) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setEventTrackingMode = function (eventTrackingMode) { return cordova(this, "setEventTrackingMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackNavigationEvent = function (navigationEvent) { return cordova(this, "trackNavigationEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.startTimedCustomEvent = function (timedEvent) { return cordova(this, "startTimedCustomEvent", {}, arguments); };
    SmartlookOriginal.prototype.stopTimedCustomEvent = function (timedEvent) { return cordova(this, "stopTimedCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.cancelTimedCustomEvent = function (timedEvent) { return cordova(this, "cancelTimedCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.trackCustomEvent = function (event) { return cordova(this, "trackCustomEvent", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setGlobalEventProperties = function (properties) { return cordova(this, "setGlobalEventProperties", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setGlobalEventProperty = function (property) { return cordova(this, "setGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeGlobalEventProperty = function (property) { return cordova(this, "removeGlobalEventProperty", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.removeAllGlobalEventProperties = function () { return cordova(this, "removeAllGlobalEventProperties", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setReferrer = function (referrer) { return cordova(this, "setReferrer", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.getDashboardSessionUrl = function (smartlookDashboardSessionUrl) { return cordova(this, "getDashboardSessionUrl", {}, arguments); };
    SmartlookOriginal.prototype.getDashboardVisitorUrl = function () { return cordova(this, "getDashboardVisitorUrl", {}, arguments); };
    SmartlookOriginal.prototype.registerIntegrationListener = function (integrationListener) { return cordova(this, "registerIntegrationListener", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.setRenderingMode = function (renderingMode) { return cordova(this, "setRenderingMode", { "sync": true }, arguments); };
    SmartlookOriginal.prototype.unregisterIntegrationListener = function () { return cordova(this, "unregisterIntegrationListener", { "sync": true }, arguments); };
    SmartlookOriginal.pluginName = "Smartlook";
    SmartlookOriginal.plugin = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.pluginRef = "cordova.plugins.SmartlookPlugin";
    SmartlookOriginal.repo = "https://github.com/smartlook/cordova-smartlook.git";
    SmartlookOriginal.platforms = ["Android", "iOS"];
    return SmartlookOriginal;
}(IonicNativePlugin));
var Smartlook = new SmartlookOriginal();
export { Smartlook };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NtYXJ0bG9vay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFLdEUscUNBQVksZUFBdUI7UUFDakMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELHlDQUFHLEdBQUgsVUFBSSxHQUFXO1FBQ2IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsbURBQWEsR0FBYixVQUFjLGFBQXFCO1FBQ2pDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHFEQUFlLEdBQWYsVUFBZ0IsZUFBd0I7UUFDdEMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7UUFDN0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsNERBQXNCLEdBQXRCLFVBQXVCLHNCQUErQjtRQUNwRCxJQUFJLENBQUMscUJBQXFCLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7UUFDM0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsMkNBQUssR0FBTDtRQUNFLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO0lBQ3BDLENBQUM7c0NBaENIOzs7O0lBMENFLDhCQUFZLGVBQXVCO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3pDLENBQUM7K0JBNUNIOzs7O0lBa0RFLCtCQUFZLFNBQWlCO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FB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YUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFWTSxtQ0FBWSxHQUFuQjtRQUNFLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sNkJBQU0sR0FBYjtRQUNFLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO2lDQTVNSDs7OztJQW1RK0IsNkJBQWlCOzs7O0lBVzlDLDBDQUFzQixhQUFDLE1BQTRCO0lBY25ELHlCQUFLLGFBQUMsTUFBNEI7SUFRbEMsa0NBQWM7SUFRZCxpQ0FBYTtJQVNiLCtCQUFXO0lBVVgsZ0NBQVksYUFBQyxZQUFtQztJQVFoRCxnREFBNEI7SUFRNUIsK0NBQTJCO0lBUzNCLG1EQUErQjtJQVkvQixxQ0FBaUIsYUFBQyxVQUFtQztJQWFyRCx3Q0FBb0IsYUFBQyxpQkFBNkM7SUFXbEUsd0NBQW9CLGFBQUMsZUFBeUM7SUFhOUQseUNBQXFCLGFBQUMsVUFBMEM7SUFZaEUsd0NBQW9CLGFBQUMsVUFBeUM7SUFhOUQsMENBQXNCLGFBQUMsVUFBMkM7SUFXbEUsb0NBQWdCLGFBQUMsS0FBMkI7SUFZNUMsNENBQXdCLGFBQUMsVUFBMEM7SUFhbkUsMENBQXNCLGFBQUMsUUFBc0M7SUFVN0QsNkNBQXlCLGFBQUMsUUFBeUM7SUFRbkUsa0RBQThCO0lBWTlCLCtCQUFXLGFBQUMsUUFBMkI7SUFXdkMsMENBQXNCLGFBQUMsNEJBQTBEO0lBU2pGLDBDQUFzQjtJQWN0QiwrQ0FBMkIsYUFBQyxtQkFBaUQ7SUFVN0Usb0NBQWdCLGFBQUMsYUFBcUM7SUFRdEQsaURBQTZCOzs7Ozs7b0JBeGhCL0I7RUFtUStCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydGxvb2tTZXR1cENvbmZpZ0J1aWxkZXIge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX3NtYXJ0bG9va1NldHVwQ29uZmlnOiBTbWFydGxvb2tTZXR1cENvbmZpZztcclxuXHJcbiAgY29uc3RydWN0b3Ioc21hcnRsb29rQVBJS2V5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3NtYXJ0bG9va1NldHVwQ29uZmlnID0gbmV3IFNtYXJ0bG9va1NldHVwQ29uZmlnKHNtYXJ0bG9va0FQSUtleSk7XHJcbiAgfVxyXG5cclxuICBmcHMoZnBzOiBudW1iZXIpOiBTbWFydGxvb2tTZXR1cENvbmZpZ0J1aWxkZXIge1xyXG4gICAgdGhpcy5fc21hcnRsb29rU2V0dXBDb25maWcuZnBzID0gZnBzO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICByZW5kZXJpbmdNb2RlKHJlbmRlcmluZ01vZGU6IHN0cmluZyk6IFNtYXJ0bG9va1NldHVwQ29uZmlnQnVpbGRlciB7XHJcbiAgICB0aGlzLl9zbWFydGxvb2tTZXR1cENvbmZpZy5yZW5kZXJpbmdNb2RlID0gcmVuZGVyaW5nTW9kZTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc3RhcnROZXdTZXNzaW9uKHN0YXJ0TmV3U2Vzc2lvbjogYm9vbGVhbik6IFNtYXJ0bG9va1NldHVwQ29uZmlnQnVpbGRlciB7XHJcbiAgICB0aGlzLl9zbWFydGxvb2tTZXR1cENvbmZpZy5zdGFydE5ld1Nlc3Npb24gPSBzdGFydE5ld1Nlc3Npb247XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN0YXJ0TmV3U2Vzc2lvbkFuZFVzZXIoc3RhcnROZXdTZXNzaW9uQW5kVXNlcjogYm9vbGVhbik6IFNtYXJ0bG9va1NldHVwQ29uZmlnQnVpbGRlciB7XHJcbiAgICB0aGlzLl9zbWFydGxvb2tTZXR1cENvbmZpZy5zdGFydE5ld1Nlc3Npb25BbmRVc2VyID0gc3RhcnROZXdTZXNzaW9uQW5kVXNlcjtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgYnVpbGQoKTogU21hcnRsb29rU2V0dXBDb25maWcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NtYXJ0bG9va1NldHVwQ29uZmlnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va1NldHVwQ29uZmlnIHtcclxuICBwcml2YXRlIHNtYXJ0bG9va0FQSUtleTogc3RyaW5nO1xyXG4gIGZwczogbnVtYmVyO1xyXG4gIHJlbmRlcmluZ01vZGU6IHN0cmluZztcclxuICBzdGFydE5ld1Nlc3Npb246IGJvb2xlYW47XHJcbiAgc3RhcnROZXdTZXNzaW9uQW5kVXNlcjogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3Ioc21hcnRsb29rQVBJS2V5OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuc21hcnRsb29rQVBJS2V5ID0gc21hcnRsb29rQVBJS2V5O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va1Jlc2V0U2Vzc2lvbiB7XHJcbiAgcHJpdmF0ZSByZXNldFVzZXI6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocmVzZXRVc2VyOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucmVzZXRVc2VyID0gcmVzZXRVc2VyO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va1VzZXJJZGVudGlmaWVyIHtcclxuICBwcml2YXRlIGlkZW50aWZpZXI6IHN0cmluZztcclxuICBwcml2YXRlIHNlc3Npb25Qcm9wZXJ0aWVzOiB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoaWRlbnRpZmllcjogc3RyaW5nLCBzZXNzaW9uUHJvcGVydGllcz86IHt9KSB7XHJcbiAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xyXG4gICAgdGhpcy5zZXNzaW9uUHJvcGVydGllcyA9IHNlc3Npb25Qcm9wZXJ0aWVzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlIHtcclxuICBwcml2YXRlIGV2ZW50VHJhY2tpbmdNb2RlOiBzdHJpbmc7XHJcblxyXG4gIHN0YXRpYyBGVUxMX1RSQUNLSU5HKCk6IFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlIHtcclxuICAgIHJldHVybiBuZXcgU21hcnRsb29rRXZlbnRUcmFja2luZ01vZGUoJ2Z1bGxfdHJhY2tpbmcnKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBJR05PUkVfVVNFUl9JTlRFUkFDVElPTigpOiBTbWFydGxvb2tFdmVudFRyYWNraW5nTW9kZSB7XHJcbiAgICByZXR1cm4gbmV3IFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlKCdpZ25vcmVfdXNlcl9pbnRlcmFjdGlvbicpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIE5PX1RSQUNLSU5HKCk6IFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlIHtcclxuICAgIHJldHVybiBuZXcgU21hcnRsb29rRXZlbnRUcmFja2luZ01vZGUoJ25vX3RyYWNraW5nJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihldmVudFRyYWNraW5nTW9kZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmV2ZW50VHJhY2tpbmdNb2RlID0gZXZlbnRUcmFja2luZ01vZGU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rVmlld1N0YXRlIHtcclxuICBzdGF0aWMgU1RBUlQgPSAnc3RhcnQnO1xyXG4gIHN0YXRpYyBTVE9QID0gJ3N0b3AnO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rTmF2aWdhdGlvbkV2ZW50IHtcclxuICBwcml2YXRlIG5hbWU6IHN0cmluZztcclxuICBwcml2YXRlIHZpZXdTdGF0ZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHZpZXdTdGF0ZT86IHN0cmluZykge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMudmlld1N0YXRlID0gdGhpcy52aWV3U3RhdGU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rQ3VzdG9tRXZlbnQge1xyXG4gIHByaXZhdGUgbmFtZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgZXZlbnRQcm9wZXJ0aWVzOiB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBldmVudFByb3BlcnRpZXM/OiB7fSkge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuZXZlbnRQcm9wZXJ0aWVzID0gZXZlbnRQcm9wZXJ0aWVzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRTdGFydCB7XHJcbiAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBldmVudFByb3BlcnRpZXM6IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGV2ZW50UHJvcGVydGllcz86IHt9KSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5ldmVudFByb3BlcnRpZXMgPSBldmVudFByb3BlcnRpZXM7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rVGltZWRDdXN0b21FdmVudFN0b3Age1xyXG4gIHByaXZhdGUgZXZlbnRJZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgZXZlbnRQcm9wZXJ0aWVzOiB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoZXZlbnRJZDogc3RyaW5nLCBldmVudFByb3BlcnRpZXM/OiB7fSkge1xyXG4gICAgdGhpcy5ldmVudElkID0gZXZlbnRJZDtcclxuICAgIHRoaXMuZXZlbnRQcm9wZXJ0aWVzID0gZXZlbnRQcm9wZXJ0aWVzO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRDYW5jZWwge1xyXG4gIHByaXZhdGUgZXZlbnRJZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgcmVhc29uOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBldmVudFByb3BlcnRpZXM6IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihldmVudElkOiBzdHJpbmcsIHJlYXNvbjogc3RyaW5nLCBldmVudFByb3BlcnRpZXM/OiB7fSkge1xyXG4gICAgdGhpcy5ldmVudElkID0gZXZlbnRJZDtcclxuICAgIHRoaXMucmVhc29uID0gcmVhc29uO1xyXG4gICAgdGhpcy5ldmVudFByb3BlcnRpZXMgPSBldmVudFByb3BlcnRpZXM7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0aWVzIHtcclxuICBwcml2YXRlIGdsb2JhbEV2ZW50UHJvcGVydGllczoge307XHJcbiAgcHJpdmF0ZSBpbW11dGFibGU6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGdsb2JhbEV2ZW50UHJvcGVydGllczoge30sIGltbXV0YWJsZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5nbG9iYWxFdmVudFByb3BlcnRpZXMgPSBnbG9iYWxFdmVudFByb3BlcnRpZXM7XHJcbiAgICB0aGlzLmltbXV0YWJsZSA9IGltbXV0YWJsZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydGxvb2tHbG9iYWxFdmVudFByb3BlcnR5IHtcclxuICBwcml2YXRlIGtleTogc3RyaW5nO1xyXG4gIHByaXZhdGUgdmFsdWU6IHN0cmluZztcclxuICBwcml2YXRlIGltbXV0YWJsZTogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3Ioa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGltbXV0YWJsZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmltbXV0YWJsZSA9IGltbXV0YWJsZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydGxvb2tHbG9iYWxFdmVudFByb3BlcnR5S2V5IHtcclxuICBwcml2YXRlIGtleTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZykge1xyXG4gICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rUmVmZXJyZXIge1xyXG4gIHByaXZhdGUgcmVmZXJyZXI6IHN0cmluZztcclxuICBwcml2YXRlIHNvdXJjZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZWZlcnJlcjogc3RyaW5nLCBzb3VyY2U6IHN0cmluZykge1xyXG4gICAgdGhpcy5yZWZlcnJlciA9IHJlZmVycmVyO1xyXG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rRGFzaGJvYXJkU2Vzc2lvblVybCB7XHJcbiAgcHJpdmF0ZSB3aXRoQ3VycmVudFRpbWVzdGFtcDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3Iod2l0aEN1cnJlbnRUaW1lc3RhbXA6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMud2l0aEN1cnJlbnRUaW1lc3RhbXAgPSB3aXRoQ3VycmVudFRpbWVzdGFtcDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU21hcnRsb29rSW50ZWdyYXRpb25MaXN0ZW5lciB7XHJcbiAgb25TZXNzaW9uUmVhZHk6IChkYXNoYm9hcmRTZXNzaW9uVXJsOiBzdHJpbmcpID0+IGFueTtcclxuICBvblZpc2l0b3JSZWFkeTogKGRhc2hib2FyZFZpc2l0b3JVcmw6IHN0cmluZykgPT4gYW55O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRsb29rUmVuZGVyaW5nTW9kZSB7XHJcbiAgcHJpdmF0ZSByZW5kZXJpbmdNb2RlOiBzdHJpbmc7XHJcblxyXG4gIHN0YXRpYyBOT19SRU5ERVJJTkcoKTogU21hcnRsb29rUmVuZGVyaW5nTW9kZSB7XHJcbiAgICByZXR1cm4gbmV3IFNtYXJ0bG9va1JlbmRlcmluZ01vZGUoJ25vX3JlbmRlcmluZycpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIE5BVElWRSgpOiBTbWFydGxvb2tSZW5kZXJpbmdNb2RlIHtcclxuICAgIHJldHVybiBuZXcgU21hcnRsb29rUmVuZGVyaW5nTW9kZSgnbmF0aXZlJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJpbmdNb2RlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucmVuZGVyaW5nTW9kZSA9IHJlbmRlcmluZ01vZGU7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgU21hcnRsb29rXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBPZmZpY2lhbCBTbWFydGxvb2sgU0RLIHBsdWdpbi5cclxuICogRnVsbCBkb2N1bWVudGF0aW9uIGNhbiBiZSBmb3VuZCBoZXJlOiBodHRwczovL3NtYXJ0bG9vay5naXRodWIuaW8vZG9jcy9zZGsvaW9uaWMvXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IFNtYXJ0bG9vaywgU21hcnRsb29rU2V0dXBDb25maWcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NtYXJ0bG9vay9uZ3gnO1xyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogQENvbXBvbmVudCggLi4uIClcclxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcbiAqICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNtYXJ0bG9vazogU21hcnRsb29rKSB7XHJcbiAqICAgICAgICB0aGlzLnBsYXRmb3JtLnJlYWR5KCkudGhlbigoKSA9PiB7XHJcbiAqICAgICAgICAgICAgdGhpcy5zbWFydGxvb2suc2V0dXBBbmRTdGFydFJlY29yZGluZyhuZXcgU21hcnRsb29rU2V0dXBDb25maWcoXCJZT1VSIEFQSSBLRVlcIikpO1xyXG4gKiAgICAgICAgfVxyXG4gKiAgICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBAY2xhc3Nlc1xyXG4gKiBTbWFydGxvb2tTZXR1cENvbmZpZ0J1aWxkZXJcclxuICogU21hcnRsb29rU2V0dXBDb25maWdcclxuICogU21hcnRsb29rUmVzZXRTZXNzaW9uXHJcbiAqIFNtYXJ0bG9va1VzZXJJZGVudGlmaWVyXHJcbiAqIFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlXHJcbiAqIFNtYXJ0bG9va05hdmlnYXRpb25FdmVudFxyXG4gKiBTbWFydGxvb2tWaWV3U3RhdGVcclxuICogU21hcnRsb29rQ3VzdG9tRXZlbnRcclxuICogU21hcnRsb29rVGltZWRDdXN0b21FdmVudFN0YXJ0XHJcbiAqIFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRTdG9wXHJcbiAqIFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRDYW5jZWxcclxuICogU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0aWVzXHJcbiAqIFNtYXJ0bG9va0dsb2JhbEV2ZW50UHJvcGVydHlcclxuICogU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0eUtleVxyXG4gKiBTbWFydGxvb2tSZWZlcnJlclxyXG4gKiBTbWFydGxvb2tEYXNoYm9hcmRTZXNzaW9uVXJsXHJcbiAqIFNtYXJ0bG9va1JlbmRlcmluZ01vZGVcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTbWFydGxvb2snLFxyXG4gIHBsdWdpbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zbWFydGxvb2svY29yZG92YS1zbWFydGxvb2suZ2l0JyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuU21hcnRsb29rUGx1Z2luJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0bG9vay9jb3Jkb3ZhLXNtYXJ0bG9vay5naXQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTbWFydGxvb2sgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2V0dXAgYW5kIHN0YXJ0IFNtYXJ0bG9vayBTREsgcmVjb3JkaW5nLlxyXG4gICAqIEBwYXJhbSBjb25maWcgU21hcnRsb29rU2V0dXBDb25maWcgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSBjb25maWcuc21hcnRsb29rQVBJS2V5IChyZXF1aXJlZCkgU21hcnRsb29rIEFQSSBrZXkgKHlvdSBjYW4gb2J0YWluIGl0IGluIHlvdXIgZGFzaGJvYXJkKS5cclxuICAgKiBAcGFyYW0gY29uZmlnLmZwcyAob3B0aW9uYWwpIHJlY29yZGVkIHZpZGVvIGZyYW1lcmF0ZSAoYWxsb3dlZCB2YWx1ZXMgMi0xMCBmcHMpLlxyXG4gICAqIEBwYXJhbSBvcHRpb25zLnJlbmRlcmluZ01vZGUgKG9wdGlvbmFsKSBNb2RlIGRlZmluaW5nIHRoZSB2aWRlbyBvdXRwdXQgb2YgcmVjb3JkaW5nLlxyXG4gICAqIEBwYXJhbSBvcHRpb25zLnN0YXJ0TmV3U2Vzc2lvbiAob3B0aW9uYWwpIElmIHRydWUgbmV3IHNlc3Npb24gaXMgZ29pbmcgdG8gYmUgY3JlYXRlZFxyXG4gICAqIEBwYXJhbSBvcHRpb25zLnN0YXJ0TmV3U2Vzc2lvbkFuZFVzZXIgKG9wdGlvbmFsKSBJZiB0cnVlIG5ldyBzZXNzaW9uIGFuZCB2aXNpdG9yIGlzIGdvaW5nIHRvIGJlIGNyZWF0ZWRcclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXR1cEFuZFN0YXJ0UmVjb3JkaW5nKGNvbmZpZzogU21hcnRsb29rU2V0dXBDb25maWcpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHVwL2luaXRpYWxpemUgU21hcnRsb29rIFNESy4gVGhpcyBtZXRob2QgRE9FU04nVCBzdGFydCB0aGUgcmVjb3JkaW5nIChAc2VlIHN0YXJ0KCkpXHJcbiAgICogQHBhcmFtIGNvbmZpZyBTbWFydGxvb2tTZXR1cENvbmZpZyBvYmplY3QuXHJcbiAgICogQHBhcmFtIGNvbmZpZy5zbWFydGxvb2tBUElLZXkgKHJlcXVpcmVkKSBTbWFydGxvb2sgQVBJIGtleSAoeW91IGNhbiBvYnRhaW4gaXQgaW4geW91ciBkYXNoYm9hcmQpLlxyXG4gICAqIEBwYXJhbSBjb25maWcuZnBzIChvcHRpb25hbCkgcmVjb3JkZWQgdmlkZW8gZnJhbWVyYXRlIChhbGxvd2VkIHZhbHVlcyAyLTEwIGZwcykuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMucmVuZGVyaW5nTW9kZSAob3B0aW9uYWwpIE1vZGUgZGVmaW5pbmcgdGhlIHZpZGVvIG91dHB1dCBvZiByZWNvcmRpbmcuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuc3RhcnROZXdTZXNzaW9uIChvcHRpb25hbCkgSWYgdHJ1ZSBuZXcgc2Vzc2lvbiBpcyBnb2luZyB0byBiZSBjcmVhdGVkXHJcbiAgICogQHBhcmFtIG9wdGlvbnMuc3RhcnROZXdTZXNzaW9uQW5kVXNlciAob3B0aW9uYWwpIElmIHRydWUgbmV3IHNlc3Npb24gYW5kIHZpc2l0b3IgaXMgZ29pbmcgdG8gYmUgY3JlYXRlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldHVwKGNvbmZpZzogU21hcnRsb29rU2V0dXBDb25maWcpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0IFNESyByZWNvcmRpbmcuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3RhcnRSZWNvcmRpbmcoKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wIFNESyByZWNvcmRpbmcuIFJlY29yZGluZyB3aWxsIHN0YXJ0IGFnYWluIHdoZW4geW91IGNhbGwgc3RhcnQoKS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzdG9wUmVjb3JkaW5nKCk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgU0RLIGlzIGN1cnJlbnRseSByZWNvcmRpbmcuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBpc1JlY29yZGluZyBib29sZWFuLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc1JlY29yZGluZygpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0cyBjdXJyZW50IHNlc3Npb24gYW5kIG5ldyBzZXNzaW9uIGluIGRhc2hib2FyZCBpcyBjcmVhdGVkLlxyXG4gICAqIEBwYXJhbSByZXNldFNlc3Npb24gU21hcnRsb29rUmVzZXRTZXNzaW9uIG9iamVjdC5cclxuICAgKiBAcGFyYW0gcmVzZXRTZXNzaW9uLnJlc2V0VXNlciBJZiBzZXQgdG8gVFJVRSBuZXcgdmlzaXRvciBpcyBjcmVhdGVkIGluIHRoZSBkYXNoYm9hcmQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgcmVzZXRTZXNzaW9uKHJlc2V0U2Vzc2lvbjogU21hcnRsb29rUmVzZXRTZXNzaW9uKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXaGVuIHlvdSBzdGFydCBzZW5zaXRpdmUgbW9kZSBTREsgcmVjb3JkcyBibGFuayB2aWRlb3MgKHNpbmdsZSBjb2xvcikgYnV0IFNESyBzdGlsbCBzZW5kcyBhbmFseXRpYyBldmVudHMuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3RhcnRGdWxsc2NyZWVuU2Vuc2l0aXZlTW9kZSgpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3Agc2Vuc2l0aXZlIG1vZGUgLT4gU0RLIHJlY29yZHMgdmlkZW8uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3RvcEZ1bGxzY3JlZW5TZW5zaXRpdmVNb2RlKCk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgZnVsbHNjcmVlbiBzZW5zaXRpdmUgbW9kZSBpcyBhY3RpdmUuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBpc0Z1bGxzY3JlZW5TZW5zaXRpdmVNb2RlQWN0aXZlIGJvb2xlYW4uXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzRnVsbHNjcmVlblNlbnNpdGl2ZU1vZGVBY3RpdmUoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJZGVudGlmeSB1c2VyLlxyXG4gICAqIEBwYXJhbSBpZGVudGlmaWVyIFNtYXJ0bG9va1VzZXJJZGVudGlmaWVyIG9iamVjdC5cclxuICAgKiBAcGFyYW0gaWRlbnRpZmllci5pZGVuZmllciAocmVxdWlyZWQpIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdXNlciBhbmQgaGlzIHJlY29yZHMuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IHdpbGwgc2VlIHRoaXMgSWQgaW4gU21hcnRsb29rIGRhc2hib2FyZCBzbyB5b3UgY2FuIHBhaXIgcmVjb3JkcyB3aXRoIGNvbmNyZXRlIHVzZXIuXHJcbiAgICogQHBhcmFtIGlkZW50aWZpZXIuc2Vzc2lvblByb3BlcnRpZXMgKG9wdGlvbmFsKSBjdXN0b20gc2Vzc2lvbiBwcm9wZXJ0aWVzIG9iamVjdC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRVc2VySWRlbnRpZmllcihpZGVudGlmaWVyOiBTbWFydGxvb2tVc2VySWRlbnRpZmllcik6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogWW91IGNhbiBjb25maWd1cmUgd2hpY2ggZXZlbnRzIGFyZSBiZWluZyB0cmFja2VkIGJ5IHNldHRpbmcgZXZlbnRUcmFja2luZ01vZGUuXHJcbiAgICogQHBhcmFtIGV2ZW50VHJhY2tpbmdNb2RlIENhbiBiZSBvbiBvZjpcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgLSBTbWFydGxvb2tFdmVudFRyYWNraW5nTW9kZS5GVUxMX1RSQUNLSU5HKCkgdHJhY2tzIGV2ZXJ5dGhpbmcuXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIC0gU21hcnRsb29rRXZlbnRUcmFja2luZ01vZGUuSUdOT1JFX1VTRVJfSU5URVJBQ1RJT04oKSB3aWxsIG5vdCB0cmFjayB0b3VjaGVzLFxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzLCBrZXlib2FyZCwgc2VsZWN0b3IgZXZlbnRzLlxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAtIFNtYXJ0bG9va0V2ZW50VHJhY2tpbmdNb2RlLk5PX1RSQUNLSU5HKCkgbm90IGdvbm5hIHRyYWNrIGFueSBldmVudHMgLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEV2ZW50VHJhY2tpbmdNb2RlKGV2ZW50VHJhY2tpbmdNb2RlOiBTbWFydGxvb2tFdmVudFRyYWNraW5nTW9kZSk6IHZvaWQge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVHJhY2sgY3VzdG9tIG5hdmlnYXRpb24gZXZlbnQuXHJcbiAgICogQHBhcmFtIG5hdmlnYXRpb25FdmVudCBTbWFydGxvb2tOYXZpZ2F0aW9uRXZlbnQgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSBuYXZpZ2F0aW9uRXZlbnQubmFtZSBDb250cm9sZXIvQWN0aXZpdHkvUGFnZSBuYW1lLlxyXG4gICAqIEBwYXJhbSBuYXZpZ2F0aW9uRXZlbnQudmlld1N0YXRlIE9uZSBvZiBTbWFydGxvb2tWaWV3U3RhdGUuU1RBUlQgb3IgU21hcnRsb29rVmlld1N0YXRlLlNUT1AuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgdHJhY2tOYXZpZ2F0aW9uRXZlbnQobmF2aWdhdGlvbkV2ZW50OiBTbWFydGxvb2tOYXZpZ2F0aW9uRXZlbnQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYWNrIGN1c3RvbSBldmVudC5cclxuICAgKiBAcGFyYW0gdGltZWRFdmVudCBTbWFydGxvb2tUaW1lZEN1c3RvbUV2ZW50U3RhcnQgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB0aW1lZEV2ZW50Lm5hbWUgKHJlcXVpcmVkKSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSBldmVudCBpbiBkYXNoYm9hcmQuXHJcbiAgICogQHBhcmFtIHRpbWVkRXZlbnQuZXZlbnRQcm9wZXJ0aWVzIChvcHRpb25hbCkgdGltZWQgZXZlbnQgcHJvcGVydGllcyBvYmplY3QuIFRoZXNlIHByb3BlcnRpZXNcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBnb2luZyB0byBiZSBtZXJnZWQgd2l0aCBwcm9wZXJ0aWVzIHBhc3NlZCBpbiBzdG9wL2NhbmNlbC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHdpdGggZXZlbnRJZCBzdHJpbmcgKEBzZWUgc3RvcFRpbWVkQ3VzdG9tRXZlbnQoKSwgQHNlZSBjYW5jZWxUaW1lZEN1c3RvbUV2ZW50KCkpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydFRpbWVkQ3VzdG9tRXZlbnQodGltZWRFdmVudDogU21hcnRsb29rVGltZWRDdXN0b21FdmVudFN0YXJ0KTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3BzIHRpbWVkIGV2ZW50LiBEdXJhdGlvbiBmcm9tIGFjY29yZGluZyBzdGFydCBpcyBjYWxjdWxhdGVkIGFuZCBzZW5kIHdpdGggdGhlIGV2ZW50LlxyXG4gICAqIEBwYXJhbSB0aW1lZEV2ZW50IFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRTdG9wIG9iamVjdC5cclxuICAgKiBAcGFyYW0gdGltZWRFdmVudC5ldmVudElkIChyZXF1aXJlZCkgVW5pcXVlIGV2ZW50IGlkIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxyXG4gICAqIEBwYXJhbSB0aW1lZEV2ZW50LmV2ZW50UHJvcGVydGllcyAob3B0aW9uYWwpIHRpbWVkIGV2ZW50IHByb3BlcnRpZXMgb2JqZWN0LiBUaGVzZSBwcm9wZXJ0aWVzXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgZ29pbmcgdG8gYmUgbWVyZ2VkIHdpdGggcHJvcGVydGllcyBwYXNzZWQgaW4gc3RhcnQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgc3RvcFRpbWVkQ3VzdG9tRXZlbnQodGltZWRFdmVudDogU21hcnRsb29rVGltZWRDdXN0b21FdmVudFN0b3ApOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbmNlbHMgdGltZWQgZXZlbnQuIEl0IGNhbGN1bGF0ZXMgZXZlbnQgZHVyYXRpb24gYW5kIG5vdGVzIHRoYXQgdGhpcyBldmVudCBoYXMgZmFpbGVkLlxyXG4gICAqIEBwYXJhbSB0aW1lZEV2ZW50IFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRDYW5jZWwgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB0aW1lZEV2ZW50LmV2ZW50SWQgKHJlcXVpcmVkKSBVbmlxdWUgZXZlbnQgaWQgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuXHJcbiAgICogQHBhcmFtIHRpbWVkRXZlbnQucmVhc29uIChyZXF1aXJlZCkgU2hvcnQgc3RyaW5nIGRlc2NyaXB0aW9uIGV4cGxhaW5pbmcgd2h5IHRoZSBldmVudCB3YXMgY2FuY2VsZWQuXHJcbiAgICogQHBhcmFtIHRpbWVkRXZlbnQuZXZlbnRQcm9wZXJ0aWVzIChvcHRpb25hbCkgdGltZWQgZXZlbnQgcHJvcGVydGllcyBvYmplY3QuIFRoZXNlIHByb3BlcnRpZXNcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBnb2luZyB0byBiZSBtZXJnZWQgd2l0aCBwcm9wZXJ0aWVzIHBhc3NlZCBpbiBzdGFydC5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBjYW5jZWxUaW1lZEN1c3RvbUV2ZW50KHRpbWVkRXZlbnQ6IFNtYXJ0bG9va1RpbWVkQ3VzdG9tRXZlbnRDYW5jZWwpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYWNrIGN1c3RvbSBldmVudC5cclxuICAgKiBAcGFyYW0gZXZlbnQgU21hcnRsb29rQ3VzdG9tRXZlbnQgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSBldmVudC5uYW1lIChyZXF1aXJlZCkgc3RyaW5nIHVzZWQgdG8gaWRlbnRpZnkgZXZlbnQuXHJcbiAgICogQHBhcmFtIGV2ZW50LmV2ZW50UHJvcGVydGllcyAob3B0aW9uYWwpIGV2ZW50IHByb3BlcnRpZXMgb2JqZWN0LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHRyYWNrQ3VzdG9tRXZlbnQoZXZlbnQ6IFNtYXJ0bG9va0N1c3RvbUV2ZW50KTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgZ2xvYmFsIGV2ZW50IHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIGV2ZXJ5IHRyYWNrZWQgZXZlbnQuXHJcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0aWVzIG9iamVjdC5cclxuICAgKiBAcGFyYW0gcHJvcGVydGllcy5nbG9iYWxFdmVudFByb3BlcnRpZXMgKHJlcXVpcmVkKSBnbG9iYWwgZXZlbnQgcHJvcGVydGllcyBvYmplY3QuXHJcbiAgICogQHBhcmFtIHByb3BlcnRpZXMuaW1tdXRhYmxlIChyZXF1aXJlZCkgSWYgc2V0IHRvIFRSVUUgdGhlc2UgcHJvcGVydGllcyBoYXZlIGhpZ2hlciBwcmlvcml0eVxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhbiBtdXRhYmxlIG9uZXMgYW5kIGFsc28gdGhleSBjYW5ub3QgYmUgY2hhbmdlZCAob25seSByZW1vdmVkKS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRHbG9iYWxFdmVudFByb3BlcnRpZXMocHJvcGVydGllczogU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0aWVzKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBTREsgaXMgY3VycmVudGx5IHJlY29yZGluZy5cclxuICAgKiBAcGFyYW0gcHJvcGVydHkgU21hcnRsb29rR2xvYmFsRXZlbnRQcm9wZXJ0eSBvYmplY3QuXHJcbiAgICogQHBhcmFtIHByb3BlcnR5LmtleSAocmVxdWlyZWQpIGdsb2JhbCBwcm9wZXJ0eSBrZXkuXHJcbiAgICogQHBhcmFtIHByb3BlcnR5LnZhbHVlIChyZXF1aXJlZCkgZ2xvYmFsIHByb3BlcnR5IHZhbHVlLlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eS5pbW11dGFibGUgKHJlcXVpcmVkKSBJZiBzZXQgdG8gVFJVRSB0aGVzZSBwcm9wZXJ0aWVzIGhhdmUgaGlnaGVyIHByaW9yaXR5XHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICB0aGFuIG11dGFibGUgb25lcyBhbmQgYWxzbyB0aGV5IGNhbm5vdCBiZSBjaGFuZ2VkIChvbmx5IHJlbW92ZWQpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHNldEdsb2JhbEV2ZW50UHJvcGVydHkocHJvcGVydHk6IFNtYXJ0bG9va0dsb2JhbEV2ZW50UHJvcGVydHkpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBwcm9wZXJ0eSBmcm9tIGdsb2JhbCBldmVudCBwcm9wZXJ0aWVzLlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eSBTbWFydGxvb2tHbG9iYWxFdmVudFByb3BlcnR5S2V5IG9iamVjdC5cclxuICAgKiBAcGFyYW0gcHJvcGVydHkua2V5IChyZXF1aXJlZCkgR2xvYmFsIHByb3BlcnR5IGtleS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICByZW1vdmVHbG9iYWxFdmVudFByb3BlcnR5KHByb3BlcnR5OiBTbWFydGxvb2tHbG9iYWxFdmVudFByb3BlcnR5S2V5KTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYWxsIHByb3BlcnRpZXMgZnJvbSBnbG9iYWwgZXZlbnQgcHJvcGVydGllcy5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICByZW1vdmVBbGxHbG9iYWxFdmVudFByb3BlcnRpZXMoKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQb3NzaWJpbGl0eSB0byBtYW51YWxseSBzZXQgcmVmZXJyZXIgYW5kIHNvdXJjZSBvZiB0aGUgaW5zdGFsbGF0aW9uIHZpc2libGUgaW4gZGFzaGJvYXJkXHJcbiAgICogYW5kIGFjY2Vzc2libGUgdmlhIGZpbHRlcnMuXHJcbiAgICogQHBhcmFtIHJlZmVycmVyIFNtYXJ0bG9va1JlZmVycmVyIG9iamVjdC5cclxuICAgKiBAcGFyYW0gcmVmZXJyZXIucmVmZXJyZXIgKHJlcXVpcmVkKSBEZXNpcmVkIHJlZmVycmVyIHZhbHVlLlxyXG4gICAqIEBwYXJhbSByZWZlcnJlci5zb3VyY2UgKHJlcXVpcmVkKSBEZXNpcmVkIHNvdXJjZSwgaS5lLiBjb20uYW5kcm9pZC52ZW5kaW5nIG9yIGNvbS5hbWF6b24udmVuZXppYS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRSZWZlcnJlcihyZWZlcnJlcjogU21hcnRsb29rUmVmZXJyZXIpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9idGFpbiBzZXNzaW9uIFVSTCBsZWFkaW5nIHRvIG91ciBkYXNoYm9hcmQuXHJcbiAgICogQHBhcmFtIHNtYXJ0bG9va0Rhc2hib2FyZFNlc3Npb25VcmwgU21hcnRsb29rRGFzaGJvYXJkU2Vzc2lvblVybCBvYmplY3QuXHJcbiAgICogQHBhcmFtIHNtYXJ0bG9va0Rhc2hib2FyZFNlc3Npb25Vcmwud2l0aEN1cnJlbnRUaW1lc3RhbXAgSWYgc2V0IHRvIFRSVUUgcmVjb3JkIHdpbGwgc3RhcnQgYXQgY3VycmVudCB0aW1lc3RhbXAuXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGRhc2hib2FyZCBzZXNzaW9uIFVSTCBzdHJpbmcuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldERhc2hib2FyZFNlc3Npb25Vcmwoc21hcnRsb29rRGFzaGJvYXJkU2Vzc2lvblVybDogU21hcnRsb29rRGFzaGJvYXJkU2Vzc2lvblVybCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPYnRhaW4gdmlzaXRvciBVUkwgbGVhZGluZyB0byBvdXIgZGFzaGJvYXJkLlxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBkYXNoYm9hcmQgdmlzaXRvciBVUkwgc3RyaW5nLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXREYXNoYm9hcmRWaXNpdG9yVXJsKCk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnRlZ3JhdGlvbiBsaXN0ZW5lciBjYW4gYmUgdXNlZCB0byBvYnRhaW4gZGFzaGJvYXJkIFVSTCBmb3IgY3VycmVudCBzZXNzaW9uIGFuZCB2aXNpdG9yLlxyXG4gICAqIFRoZXNlIFVSTHMgY2FuIGJlIHByb3BhZ2F0ZWQgdG8gdmFyaW91cyBhbmFseXRpYyB0b29scy9TREtzLlxyXG4gICAqIEBwYXJhbSBpbnRlZ3JhdGlvbkxpc3RlbmVyIFNtYXJ0bG9va0ludGVncmF0aW9uTGlzdGVuZXIgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSBpbnRlZ3JhdGlvbkxpc3RlbmVyLm9uU2Vzc2lvblJlYWR5IENhbGxlZCB3aGVuIGRhc2hib2FyZCBzZXNzaW9uIFVSTCBpcyByZWFkeS4gTm90ZSB0aGF0IHRoaXMgVVJMIGNhbiBiZSBhY2Nlc2VkIG9ubHkgYnkgdXNlclxyXG4gICAqIHRoYXQgaGFzIGFjY2VzcyB0byBTbWFydGxvb2sgZGFzaGJvYXJkIChpdCBpcyBub3QgcHVibGljIHNoYXJlIGxpbmspLlxyXG4gICAqIEBwYXJhbSBpbnRlZ3JhdGlvbkxpc3RlbmVyLm9uVmlzaXRvclJlYWR5IENhbGxlZCB3aGVuIGRhc2hib2FyZCB2aXNpdG9yIFVSTCBpcyByZWFkeS4gTm90ZSB0aGF0IHRoaXMgVVJMIGNhbiBiZSBhY2Nlc2VkIG9ubHkgYnkgdXNlclxyXG4gICAqIHRoYXQgaGFzIGFjY2VzcyB0byBTbWFydGxvb2sgZGFzaGJvYXJkIChpdCBpcyBub3QgcHVibGljIHNoYXJlIGxpbmspLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxyXG4gIHJlZ2lzdGVySW50ZWdyYXRpb25MaXN0ZW5lcihpbnRlZ3JhdGlvbkxpc3RlbmVyOiBTbWFydGxvb2tJbnRlZ3JhdGlvbkxpc3RlbmVyKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCeSBjaGFuZ2luZyByZW5kZXJpbmcgbW9kZSB5b3UgY2FuIGFkanVzdCB0aGUgd2F5IHdlIHJlbmRlciB0aGUgYXBwbGljYXRpb24gZm9yIHJlY29yZGluZ3MuXHJcbiAgICogQHBhcmFtIG9wdGlvbnMucmVuZGVyaW5nTW9kZSBNb2RlIGRlZmluaW5nIHRoZSB2aWRlbyBvdXRwdXQgb2YgcmVjb3JkaW5nLiBDdXJlbnRseSBvbmx5XHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTbWFydGxvb2tSZW5kZXJpbmdNb2RlLk5PX1JFTkRFUklORygpIGFuZCBTbWFydGxvb2tSZW5kZXJpbmdNb2RlLk5BVElWRSgpIGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcclxuICBzZXRSZW5kZXJpbmdNb2RlKHJlbmRlcmluZ01vZGU6IFNtYXJ0bG9va1JlbmRlcmluZ01vZGUpOiB2b2lkIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVucmVnaXN0ZXIgSW50ZWdyYXRpb24gbGlzdGVuZXIgKEBzZWUgcmVnaXN0ZXJJbnRlZ3JhdGlvbkxpc3RlbmVyKCkpXHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXHJcbiAgdW5yZWdpc3RlckludGVncmF0aW9uTGlzdGVuZXIoKTogdm9pZCB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==