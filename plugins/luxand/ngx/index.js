import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Luxand = /** @class */ (function (_super) {
    __extends(Luxand, _super);
    function Luxand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Luxand.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    Luxand.prototype.register = function (params) { return cordova(this, "register", {}, arguments); };
    Luxand.prototype.login = function (params) { return cordova(this, "login", {}, arguments); };
    Luxand.prototype.clear = function (id) { return cordova(this, "clear", {}, arguments); };
    Luxand.prototype.clearMemory = function () { return cordova(this, "clearMemory", {}, arguments); };
    Luxand.pluginName = "Luxand";
    Luxand.plugin = "codova-plugin-luxand";
    Luxand.pluginRef = "window.Luxand";
    Luxand.repo = "https://github.com/molobala/cordova-plugin-luxand";
    Luxand.platforms = ["Android", "iOS"];
    Luxand = __decorate([
        Injectable()
    ], Luxand);
    return Luxand;
}(IonicNativePlugin));
export { Luxand };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2x1eGFuZC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEyRjVDLDBCQUFpQjs7OztJQU8zQyxxQkFBSSxhQUFDLE1BQW9CO0lBU3pCLHlCQUFRLGFBQUMsTUFBMkI7SUFTcEMsc0JBQUssYUFBQyxNQUEyQjtJQVNqQyxzQkFBSyxhQUFDLEVBQVU7SUFRaEIsNEJBQVc7Ozs7OztJQTFDQSxNQUFNO1FBRGxCLFVBQVUsRUFBRTtPQUNBLE1BQU07aUJBNUZuQjtFQTRGNEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMdXhhbmRDb25maWcge1xyXG4gIC8qKiBUaGUgbGljZW5jZSBrZXkgZ290dGVuIGZyb20gTHV4YW5kICovXHJcbiAgbGljZW5jZTogc3RyaW5nO1xyXG4gIC8qKiBUaGUgaW50ZXJuYWwgZGF0YWJhc2UgbmFtZSB0aGUgdHJhY2tlciBzaG91bGQgdXNlICovXHJcbiAgZGJuYW1lOiBzdHJpbmc7XHJcbiAgLyoqIHRoZSBudW1iZXIgb2YgcmV0cmllcyB3aGVuIHJlZ2lzdGVyaW5nIG9yIGlkZW50aWZ5aW5nIGEgZmFjZSAqL1xyXG4gIGxvZ2luVHJ5Q291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPTUxGYWNpYWxEYXRhIHtcclxuICAvKiogVGhlIHN0YXR1cyBtZXNzYWdlICovXHJcbiAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgLyoqIFRoZSBtZXNzYWdlIHJldHVybmVkIGJ5IHRoZSBwbHVnaW4gKi9cclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgLyoqIFRoZSB1bmlxdWUgbmFtZSBnZW5lcmF0ZWQgYW5kIGFzc29jaWF0ZWQgdG8gYSBmYWNlIHdoZW4gcmVnaXN0ZXJpbmcgKi9cclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgLyoqIFRoZSB1bmlxdWUgaWQgTHV4YW5kIEZhY2UgU0RLIHRyYWNrZXIgYXNzb2NpYXRlcyB0byBhIGZhY2UgaW4gaXQncyBpbnRlcm5hbCBkYXRhYmFzZSAqL1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgLyoqIEV4dHJhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBmYWNlIGluY2x1ZGluZyBhZ2UsIGV4cHJlc3Npb25zICovXHJcbiAgZXh0cmE6IHtcclxuICAgIEFHRT86IGFueTtcclxuICAgIEdFTkRFUj86IGFueTtcclxuICAgIEVZRVNPUEVORUQ/OiBhbnk7XHJcbiAgICBTTUlMRTogYW55O1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBMdXhhbmRcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGxldCB5b3UgaW50ZWdyYXRlIEx1eGFuZCBGYWNlIFNESyBpbnRvIHlvdXIgaW9uaWMgcHJvamVjdHMsIHNvIHlvdSBjYW4gaW1wbGVtZW50IGZhY2UgYXV0aGVudGljYXRpb24gZWFzaWx5IGluIHlvdXIgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIEB1c2FnZVxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IEx1eGFuZCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbHV4YW5kJztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsdXhhbmQ6IEx1eGFuZCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiAvL2luaXQgTHV4YW5kICBGYWNlIFNES1xyXG4gKlxyXG4gKiB0aGlzLmx1eGFuZC5pbml0KHtcclxuICogIGxpY2VuY2U6IFwiXCIsXHJcbiAqICBkYm5hbWU6IFwiZGF0YS5kYXRcIixcclxuICogIGxvZ2luVHJ5Q291bnQ6IDNcclxuICogfSlcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqIC8vIHJlZ2lzdGVyIGEgZmFjZVxyXG4gKiB0aGlzLmx1eGFuZC5yZWdpc3Rlcih7XHJcbiAqICB0aW1lb3V0OiAyMDAwMC8vMjAgc2Vjb25kc1xyXG4gKiB9KVxyXG4gKiAudGhlbihyPT57XHJcbiAqICBjb25zb2xlLmxvZyhcIllvdXIgRkFDRSBJRDpcIiwgci5pZCk7XHJcbiAqICBjb25zb2xlLmxvZyhcIllvdXIgQUdFOlwiLCByLmV4dHJhLkFHRSk7XHJcbiAqICBjb25zb2xlLmxvZyhcIllvdXIgR0VOREVSOlwiLCByLmV4dHJhLkdFTkRFUik7XHJcbiAqICBjb25zb2xlLmxvZyhcIlNJTUlMSU5HOlwiLCByLmV4dHJhLlNNSUxFPjM1PyBcIllFU1wiOiBcIk5PXCIpO1xyXG4gKiAgY29uc29sZS5sb2coXCJFWUUgT1BFTkVEOlwiLCByLmV4dHJhLkVZRVNPUEVORUQ+NDU/IFwiWUVTXCI6IFwiTk9cIik7XHJcbiAqIH0pXHJcbiAqIC5jYXRjaChlcnI9PntcclxuICogIGlmKGVyci5tZXNzZ2FlID09PSBcIkFscmVhZHkgcmVnaXN0ZXJlZFwiKSB7XHJcbiAqICAgIC8vZXh0cmEgZGF0YSBhdmFpbGFibGVcclxuICogICAgY29uc29sZS5sb2coXCJZb3VyIEFHRTpcIiwgci5leHRyYS5BR0UpO1xyXG4gKiAgICBjb25zb2xlLmxvZyhcIllvdXIgR0VOREVSOlwiLCByLmV4dHJhLkdFTkRFUik7XHJcbiAqICAgIGNvbnNvbGUubG9nKFwiU0lNSUxJTkc6XCIsIHIuZXh0cmEuU01JTEU+MzU/IFwiWUVTXCI6IFwiTk9cIik7XHJcbiAqICAgIGNvbnNvbGUubG9nKFwiRVlFIE9QRU5FRDpcIiwgci5leHRyYS5FWUVTT1BFTkVEPjQ1PyBcIllFU1wiOiBcIk5PXCIpO1xyXG4gKiAgfVxyXG4gKiB9KVxyXG4gKiAvL3RvIGxvZ2luIHVzaW5nIGEgZmFjZVxyXG4gKiB0aGlzLmx1eGFuZC5sb2dpbih7XHJcbiAqIHRpbWVvdXQ6IDIwMDAwXHJcbiAqIH0pLnRoZW4ocj0+Y29uc29sZS5sb2cocikpXHJcbiAqIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogT01MRmFjaWFsRGF0YVxyXG4gKiBMdXhhbmRDb25maWdcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdMdXhhbmQnLFxyXG4gIHBsdWdpbjogJ2NvZG92YS1wbHVnaW4tbHV4YW5kJyxcclxuICBwbHVnaW5SZWY6ICd3aW5kb3cuTHV4YW5kJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21vbG9iYWxhL2NvcmRvdmEtcGx1Z2luLWx1eGFuZCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEx1eGFuZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIEx1eGFuZCBTREtcclxuICAgKiBAcGFyYW0gY29uZmlnIHtMdXhhbmRDb25maWd9IEx1eGFuZENvbmZpZyBjb25maWd1cmF0aW9uIG9iamVjdCB0byB1c2UgdG8gaW5pdCB0aGUgU0RLXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSAvLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIEx1eGFuZCBGYWNlU0RLIGlzIGluaXRpYWxpemVkIHN1Y2Nlc2ZmdWxseVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0KGNvbmZpZzogTHV4YW5kQ29uZmlnKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogSWRlbnRpZnkgbWV0aG9kZSwgdHJ5IHRvIHJlZ2lzdGVyIGEgZmFjZSBpbiBpbnRlcm5hbCBkYXRhIGJhc2VcclxuICAgKiBAcGFyYW0gcGFyYW1zIHthbnl9IEFsbG93IHRvIHNwZWNpZnkgdGhlIHRpbWVvdXQgdmFsdWVcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE9NTEZhY2lhbERhdGE+fSAvLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmUgaWYgYSBmYWNlIGhhcyBiZWVuIGRldGVjdGVkIGFuZCBzYXZlZCBieSB0aGUgdHJhY2tlciBpbiB0aGUgaW50ZXJuYWwgZGF0YWJhc2VcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgcmVnaXN0ZXIocGFyYW1zOiB7IHRpbWVvdXQ6IG51bWJlciB9KTogUHJvbWlzZTxPTUxGYWNpYWxEYXRhPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIExvZ2luIG1ldGhvZCwgdHJ5IHRvIGF1dGhlbnRpY2F0ZWQgYSBmYWNlXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7YW55fSBBbGxvdyB0byBzcGVjaWZ5IHRoZSB0aW1lb3V0IHZhbHVlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxPTUxGYWNpYWxEYXRhPn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgbG9naW4ocGFyYW1zOiB7IHRpbWVvdXQ6IG51bWJlciB9KTogUHJvbWlzZTxPTUxGYWNpYWxEYXRhPiB7XHJcbiAgICByZXR1cm47IC8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZSBpZiBhIGZhY2UgaXMgcmVjb2duaXplIHN1Y2Nlc3NmdWxseVxyXG4gIH1cclxuICAvKipcclxuICAgKiBjbGVhciBtZXRob2QsIHRyeSB0byByZW1vdmUgYSBmYWNlIGZyb20gaW50ZXJuYWwgZGF0YWJhc2VcclxuICAgKiBAcGFyYW0gaWQge251bWJlcn1cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFyKGlkOiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBjbGVhck1lbW9yeSBtZXRob2QsIHRyeSB0byBjbGVhciBpbnRlcm5hbCBkYXRhYmFzZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY2xlYXJNZW1vcnkoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19