var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LuxandOriginal = /** @class */ (function (_super) {
    __extends(LuxandOriginal, _super);
    function LuxandOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LuxandOriginal.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    LuxandOriginal.prototype.register = function (params) { return cordova(this, "register", {}, arguments); };
    LuxandOriginal.prototype.login = function (params) { return cordova(this, "login", {}, arguments); };
    LuxandOriginal.prototype.clear = function (id) { return cordova(this, "clear", {}, arguments); };
    LuxandOriginal.prototype.clearMemory = function () { return cordova(this, "clearMemory", {}, arguments); };
    LuxandOriginal.pluginName = "Luxand";
    LuxandOriginal.plugin = "codova-plugin-luxand";
    LuxandOriginal.pluginRef = "window.Luxand";
    LuxandOriginal.repo = "https://github.com/molobala/cordova-plugin-luxand";
    LuxandOriginal.platforms = ["Android", "iOS"];
    return LuxandOriginal;
}(IonicNativePlugin));
var Luxand = new LuxandOriginal();
export { Luxand };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2x1eGFuZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEyRjVDLDBCQUFpQjs7OztJQU8zQyxxQkFBSSxhQUFDLE1BQW9CO0lBU3pCLHlCQUFRLGFBQUMsTUFBMkI7SUFTcEMsc0JBQUssYUFBQyxNQUEyQjtJQVNqQyxzQkFBSyxhQUFDLEVBQVU7SUFRaEIsNEJBQVc7Ozs7OztpQkF0SWI7RUE0RjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTHV4YW5kQ29uZmlnIHtcclxuICAvKiogVGhlIGxpY2VuY2Uga2V5IGdvdHRlbiBmcm9tIEx1eGFuZCAqL1xyXG4gIGxpY2VuY2U6IHN0cmluZztcclxuICAvKiogVGhlIGludGVybmFsIGRhdGFiYXNlIG5hbWUgdGhlIHRyYWNrZXIgc2hvdWxkIHVzZSAqL1xyXG4gIGRibmFtZTogc3RyaW5nO1xyXG4gIC8qKiB0aGUgbnVtYmVyIG9mIHJldHJpZXMgd2hlbiByZWdpc3RlcmluZyBvciBpZGVudGlmeWluZyBhIGZhY2UgKi9cclxuICBsb2dpblRyeUNvdW50OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT01MRmFjaWFsRGF0YSB7XHJcbiAgLyoqIFRoZSBzdGF0dXMgbWVzc2FnZSAqL1xyXG4gIHN0YXR1czogc3RyaW5nO1xyXG4gIC8qKiBUaGUgbWVzc2FnZSByZXR1cm5lZCBieSB0aGUgcGx1Z2luICovXHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIC8qKiBUaGUgdW5pcXVlIG5hbWUgZ2VuZXJhdGVkIGFuZCBhc3NvY2lhdGVkIHRvIGEgZmFjZSB3aGVuIHJlZ2lzdGVyaW5nICovXHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIC8qKiBUaGUgdW5pcXVlIGlkIEx1eGFuZCBGYWNlIFNESyB0cmFja2VyIGFzc29jaWF0ZXMgdG8gYSBmYWNlIGluIGl0J3MgaW50ZXJuYWwgZGF0YWJhc2UgKi9cclxuICBpZDogbnVtYmVyO1xyXG4gIC8qKiBFeHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZmFjZSBpbmNsdWRpbmcgYWdlLCBleHByZXNzaW9ucyAqL1xyXG4gIGV4dHJhOiB7XHJcbiAgICBBR0U/OiBhbnk7XHJcbiAgICBHRU5ERVI/OiBhbnk7XHJcbiAgICBFWUVTT1BFTkVEPzogYW55O1xyXG4gICAgU01JTEU6IGFueTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgTHV4YW5kXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGlzIHBsdWdpbiBsZXQgeW91IGludGVncmF0ZSBMdXhhbmQgRmFjZSBTREsgaW50byB5b3VyIGlvbmljIHByb2plY3RzLCBzbyB5b3UgY2FuIGltcGxlbWVudCBmYWNlIGF1dGhlbnRpY2F0aW9uIGVhc2lseSBpbiB5b3VyIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBMdXhhbmQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2x1eGFuZCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbHV4YW5kOiBMdXhhbmQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogLy9pbml0IEx1eGFuZCAgRmFjZSBTREtcclxuICpcclxuICogdGhpcy5sdXhhbmQuaW5pdCh7XHJcbiAqICBsaWNlbmNlOiBcIlwiLFxyXG4gKiAgZGJuYW1lOiBcImRhdGEuZGF0XCIsXHJcbiAqICBsb2dpblRyeUNvdW50OiAzXHJcbiAqIH0pXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKiAvLyByZWdpc3RlciBhIGZhY2VcclxuICogdGhpcy5sdXhhbmQucmVnaXN0ZXIoe1xyXG4gKiAgdGltZW91dDogMjAwMDAvLzIwIHNlY29uZHNcclxuICogfSlcclxuICogLnRoZW4ocj0+e1xyXG4gKiAgY29uc29sZS5sb2coXCJZb3VyIEZBQ0UgSUQ6XCIsIHIuaWQpO1xyXG4gKiAgY29uc29sZS5sb2coXCJZb3VyIEFHRTpcIiwgci5leHRyYS5BR0UpO1xyXG4gKiAgY29uc29sZS5sb2coXCJZb3VyIEdFTkRFUjpcIiwgci5leHRyYS5HRU5ERVIpO1xyXG4gKiAgY29uc29sZS5sb2coXCJTSU1JTElORzpcIiwgci5leHRyYS5TTUlMRT4zNT8gXCJZRVNcIjogXCJOT1wiKTtcclxuICogIGNvbnNvbGUubG9nKFwiRVlFIE9QRU5FRDpcIiwgci5leHRyYS5FWUVTT1BFTkVEPjQ1PyBcIllFU1wiOiBcIk5PXCIpO1xyXG4gKiB9KVxyXG4gKiAuY2F0Y2goZXJyPT57XHJcbiAqICBpZihlcnIubWVzc2dhZSA9PT0gXCJBbHJlYWR5IHJlZ2lzdGVyZWRcIikge1xyXG4gKiAgICAvL2V4dHJhIGRhdGEgYXZhaWxhYmxlXHJcbiAqICAgIGNvbnNvbGUubG9nKFwiWW91ciBBR0U6XCIsIHIuZXh0cmEuQUdFKTtcclxuICogICAgY29uc29sZS5sb2coXCJZb3VyIEdFTkRFUjpcIiwgci5leHRyYS5HRU5ERVIpO1xyXG4gKiAgICBjb25zb2xlLmxvZyhcIlNJTUlMSU5HOlwiLCByLmV4dHJhLlNNSUxFPjM1PyBcIllFU1wiOiBcIk5PXCIpO1xyXG4gKiAgICBjb25zb2xlLmxvZyhcIkVZRSBPUEVORUQ6XCIsIHIuZXh0cmEuRVlFU09QRU5FRD40NT8gXCJZRVNcIjogXCJOT1wiKTtcclxuICogIH1cclxuICogfSlcclxuICogLy90byBsb2dpbiB1c2luZyBhIGZhY2VcclxuICogdGhpcy5sdXhhbmQubG9naW4oe1xyXG4gKiB0aW1lb3V0OiAyMDAwMFxyXG4gKiB9KS50aGVuKHI9PmNvbnNvbGUubG9nKHIpKVxyXG4gKiAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcclxuICpcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIE9NTEZhY2lhbERhdGFcclxuICogTHV4YW5kQ29uZmlnXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnTHV4YW5kJyxcclxuICBwbHVnaW46ICdjb2RvdmEtcGx1Z2luLWx1eGFuZCcsXHJcbiAgcGx1Z2luUmVmOiAnd2luZG93Lkx1eGFuZCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tb2xvYmFsYS9jb3Jkb3ZhLXBsdWdpbi1sdXhhbmQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMdXhhbmQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBMdXhhbmQgU0RLXHJcbiAgICogQHBhcmFtIGNvbmZpZyB7THV4YW5kQ29uZmlnfSBMdXhhbmRDb25maWcgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gdXNlIHRvIGluaXQgdGhlIFNES1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiBMdXhhbmQgRmFjZVNESyBpcyBpbml0aWFsaXplZCBzdWNjZXNmZnVsbHlcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaW5pdChjb25maWc6IEx1eGFuZENvbmZpZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIElkZW50aWZ5IG1ldGhvZGUsIHRyeSB0byByZWdpc3RlciBhIGZhY2UgaW4gaW50ZXJuYWwgZGF0YSBiYXNlXHJcbiAgICogQHBhcmFtIHBhcmFtcyB7YW55fSBBbGxvdyB0byBzcGVjaWZ5IHRoZSB0aW1lb3V0IHZhbHVlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxPTUxGYWNpYWxEYXRhPn0gLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlIGlmIGEgZmFjZSBoYXMgYmVlbiBkZXRlY3RlZCBhbmQgc2F2ZWQgYnkgdGhlIHRyYWNrZXIgaW4gdGhlIGludGVybmFsIGRhdGFiYXNlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlZ2lzdGVyKHBhcmFtczogeyB0aW1lb3V0OiBudW1iZXIgfSk6IFByb21pc2U8T01MRmFjaWFsRGF0YT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBMb2dpbiBtZXRob2QsIHRyeSB0byBhdXRoZW50aWNhdGVkIGEgZmFjZVxyXG4gICAqIEBwYXJhbSBwYXJhbXMge2FueX0gQWxsb3cgdG8gc3BlY2lmeSB0aGUgdGltZW91dCB2YWx1ZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8T01MRmFjaWFsRGF0YT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGxvZ2luKHBhcmFtczogeyB0aW1lb3V0OiBudW1iZXIgfSk6IFByb21pc2U8T01MRmFjaWFsRGF0YT4ge1xyXG4gICAgcmV0dXJuOyAvLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmUgaWYgYSBmYWNlIGlzIHJlY29nbml6ZSBzdWNjZXNzZnVsbHlcclxuICB9XHJcbiAgLyoqXHJcbiAgICogY2xlYXIgbWV0aG9kLCB0cnkgdG8gcmVtb3ZlIGEgZmFjZSBmcm9tIGludGVybmFsIGRhdGFiYXNlXHJcbiAgICogQHBhcmFtIGlkIHtudW1iZXJ9XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjbGVhcihpZDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogY2xlYXJNZW1vcnkgbWV0aG9kLCB0cnkgdG8gY2xlYXIgaW50ZXJuYWwgZGF0YWJhc2VcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNsZWFyTWVtb3J5KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==