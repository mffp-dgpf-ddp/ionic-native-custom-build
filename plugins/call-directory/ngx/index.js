import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CallDirectory = /** @class */ (function (_super) {
    __extends(CallDirectory, _super);
    function CallDirectory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallDirectory.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    CallDirectory.prototype.addIdentification = function (items) { return cordova(this, "addIdentification", {}, arguments); };
    CallDirectory.prototype.removeIdentification = function (items) { return cordova(this, "removeIdentification", {}, arguments); };
    CallDirectory.prototype.removeAllIdentification = function () { return cordova(this, "removeAllIdentification", {}, arguments); };
    CallDirectory.prototype.getAllItems = function () { return cordova(this, "getAllItems", {}, arguments); };
    CallDirectory.prototype.reloadExtension = function () { return cordova(this, "reloadExtension", {}, arguments); };
    CallDirectory.prototype.getLog = function () { return cordova(this, "getLog", {}, arguments); };
    CallDirectory.pluginName = "CallDirectory";
    CallDirectory.plugin = "cordova-plugin-call-directory";
    CallDirectory.pluginRef = "CallDirectory";
    CallDirectory.repo = "https://github.com/GEDYSIntraWare/cordova-plugin-call-directory";
    CallDirectory.install = "cordova plugin add cordova-plugin-call-directory --variable EXT_NAME=\"Cordova-Directory\" --variable ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=\"NO\"";
    CallDirectory.installVariables = ["EXT_NAME", "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES"];
    CallDirectory.platforms = ["iOS"];
    CallDirectory = __decorate([
        Injectable()
    ], CallDirectory);
    return CallDirectory;
}(IonicNativePlugin));
export { CallDirectory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhbGwtZGlyZWN0b3J5L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1EckMsaUNBQWlCOzs7O0lBTWxELG1DQUFXO0lBVVgseUNBQWlCLGFBQUMsS0FBMEI7SUFVNUMsNENBQW9CLGFBQUMsS0FBMEI7SUFTL0MsK0NBQXVCO0lBU3ZCLG1DQUFXO0lBU1gsdUNBQWU7SUFTZiw4QkFBTTs7Ozs7Ozs7SUE5REssYUFBYTtRQUR6QixVQUFVLEVBQUU7T0FDQSxhQUFhO3dCQXBEMUI7RUFvRG1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbERpcmVjdG9yeUl0ZW0ge1xyXG4gIGxhYmVsOiBzdHJpbmc7XHJcbiAgbnVtYmVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbERpcmVjdG9yeUxvZyB7XHJcbiAgcGx1Z2luOiBzdHJpbmdbXTtcclxuICBleHRlbnNpb246IHN0cmluZ1tdO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgQ2FsbCBEaXJlY3RvcnlcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoaXMgcGx1Z2luIGNhbiBhZGQgcGhvbmUgbnVtYmVycyB0byBhbiBDYWxsa2l0IGNhbGwgZGlyZWN0b3J5IGV4dGVuc2lvbi4gQ2FsbCBgcmVsb2FkRXh0ZW5zaW9uYCBhZnRlciB1c2luZyBgYWRkSWRlbnRpZmljYXRpb25gIGFuZCBgcmVtb3ZlSWRlbnRpZmljYXRpb25gXHJcbiAqIHRvIHByb2Nlc3MgdGhlIGNoYW5nZXMgaW4gdGhlIGNhbGwgZGlyZWN0b3J5IGV4dGVuc2lvbi5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2FsbERpcmVjdG9yeSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2FsbC1kaXJlY3Rvcnkvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYWxsRGlyZWN0b3J5OiBDYWxsRGlyZWN0b3J5KSB7IH1cclxuICpcclxuICpcclxuICogbGV0IGl0ZW1zID0gW3tsYWJlbDogXCJIZWxsb1wiLCBudW1iZXI6IFwiMTIzXCJ9XTtcclxuICogdGhpcy5jYWxsRGlyZWN0b3J5LmFkZElkZW50aWZpY2F0aW9uKGl0ZW1zKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogdGhpcy5jYWxsRGlyZWN0b3J5LnJlbG9hZEV4dGVuc2lvbigpXHJcbiAqICAgLnRoZW4ocmVzOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBASW50ZXJmYWNlc1xyXG4gKiBDYWxsRGlyZWN0b3J5SXRlbVxyXG4gKiBDYWxsRGlyZWN0b3J5TG9nXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnQ2FsbERpcmVjdG9yeScsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnknLFxyXG4gIHBsdWdpblJlZjogJ0NhbGxEaXJlY3RvcnknLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vR0VEWVNJbnRyYVdhcmUvY29yZG92YS1wbHVnaW4tY2FsbC1kaXJlY3RvcnknLFxyXG4gIGluc3RhbGw6XHJcbiAgICAnY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWNhbGwtZGlyZWN0b3J5IC0tdmFyaWFibGUgRVhUX05BTUU9XCJDb3Jkb3ZhLURpcmVjdG9yeVwiIC0tdmFyaWFibGUgQUxXQVlTX0VNQkVEX1NXSUZUX1NUQU5EQVJEX0xJQlJBUklFUz1cIk5PXCInLFxyXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnRVhUX05BTUUnLCAnQUxXQVlTX0VNQkVEX1NXSUZUX1NUQU5EQVJEX0xJQlJBUklFUyddLFxyXG4gIHBsYXRmb3JtczogWydpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQ2FsbERpcmVjdG9yeSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZSBhbmQgZW5hYmxlZFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHdpdGggcmVzdWx0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGlkZW50aWZpY2F0aW9uIG51bWJlcnNcclxuICAgKiBAcGFyYW0ge0NhbGxEaXJlY3RvcnlJdGVtW119IGl0ZW1zIFNldCBvZiBudW1iZXJzIHdpdGggbGFiZWxzXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbnVtYmVycyBhcmUgYWRkZWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYWRkSWRlbnRpZmljYXRpb24oaXRlbXM6IENhbGxEaXJlY3RvcnlJdGVtW10pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGlkZW50aWZpY2F0aW9uIG51bWJlcnNcclxuICAgKiBAcGFyYW0ge0NhbGxEaXJlY3RvcnlJdGVtW119IGl0ZW1zIFNldCBvZiBudW1iZXJzIHdpdGggYXJiaXRyYXJ5IGxhYmVsXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gbnVtYmVycyBhcmUgcmVtb3ZlZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZW1vdmVJZGVudGlmaWNhdGlvbihpdGVtczogQ2FsbERpcmVjdG9yeUl0ZW1bXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYWxsIGl0ZW1zIGZyb20gY2FsbCBkaXJlY3RvcnkuIFJlZnJlc2hlcyBpbW1lZGlhdGVseS5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbW92ZUFsbElkZW50aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIG51bWJlcnMgYW5kIGxhYmVscyBpbiBjYWxsIGRpcmVjdG9yeVxyXG4gICAqIEByZXR1cm4ge0NhbGxEaXJlY3RvcnlJdGVtW119IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBhbGwgaXRlbXNcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0QWxsSXRlbXMoKTogUHJvbWlzZTxDYWxsRGlyZWN0b3J5SXRlbVtdPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWxvYWQgZXh0ZW5zaW9uIHRvIHByb2Nlc3MgcXVldWVkIGNoYW5nZXNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIGFmdGVyIHJlZnJlc2ggd2l0aCBtZXNzYWdlXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHJlbG9hZEV4dGVuc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGxvZyBmcm9tIHBsdWdpbiBhbmQgY2FsbCBkaXJlY3RvcnkgZXh0ZW5zaW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxDYWxsRGlyZWN0b3J5TG9nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBvYmplY3Qgb2YgbG9nIG1lc3NhZ2VzXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldExvZygpOiBQcm9taXNlPENhbGxEaXJlY3RvcnlMb2c+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19