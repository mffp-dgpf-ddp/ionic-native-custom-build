import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, checkAvailability } from '@ionic-native/core';
var AbbyyRTR = /** @class */ (function (_super) {
    __extends(AbbyyRTR, _super);
    function AbbyyRTR() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbbyyRTR.prototype.startTextCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startTextCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTR.prototype.startDataCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startDataCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTR.pluginName = "AbbyyRTR";
    AbbyyRTR.plugin = "cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTR.pluginRef = "AbbyyRtrSdk";
    AbbyyRTR.repo = "https://github.com/abbyysdk/RTR-SDK.Cordova";
    AbbyyRTR.install = "ionic cordova plugin add cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTR.platforms = ["Android", "iOS"];
    AbbyyRTR = __decorate([
        Injectable()
    ], AbbyyRTR);
    return AbbyyRTR;
}(IonicNativePlugin));
export { AbbyyRTR };
//# sourceMappingURL=data:application/json;base64,