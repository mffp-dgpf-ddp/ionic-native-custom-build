var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CalendarOriginal = /** @class */ (function (_super) {
    __extends(CalendarOriginal, _super);
    function CalendarOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarOriginal.prototype.hasReadWritePermission = function () { return cordova(this, "hasReadWritePermission", {}, arguments); };
    CalendarOriginal.prototype.hasReadPermission = function () { return cordova(this, "hasReadPermission", {}, arguments); };
    CalendarOriginal.prototype.hasWritePermission = function () { return cordova(this, "hasWritePermission", {}, arguments); };
    CalendarOriginal.prototype.requestWritePermission = function () { return cordova(this, "requestWritePermission", {}, arguments); };
    CalendarOriginal.prototype.requestReadPermission = function () { return cordova(this, "requestReadPermission", {}, arguments); };
    CalendarOriginal.prototype.requestReadWritePermission = function () { return cordova(this, "requestReadWritePermission", {}, arguments); };
    CalendarOriginal.prototype.createCalendar = function (nameOrOptions) { return cordova(this, "createCalendar", {}, arguments); };
    CalendarOriginal.prototype.deleteCalendar = function (name) { return cordova(this, "deleteCalendar", {}, arguments); };
    CalendarOriginal.prototype.getCalendarOptions = function () { return cordova(this, "getCalendarOptions", { "sync": true }, arguments); };
    CalendarOriginal.prototype.getCreateCalendarOptions = function () { return cordova(this, "getCreateCalendarOptions", { "sync": true }, arguments); };
    CalendarOriginal.prototype.createEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "createEvent", {}, arguments); };
    CalendarOriginal.prototype.createEventWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "createEventWithOptions", {}, arguments); };
    CalendarOriginal.prototype.createEventInteractively = function (title, location, notes, startDate, endDate) { return cordova(this, "createEventInteractively", {}, arguments); };
    CalendarOriginal.prototype.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "createEventInteractivelyWithOptions", {}, arguments); };
    CalendarOriginal.prototype.findEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "findEvent", {}, arguments); };
    CalendarOriginal.prototype.findEventWithOptions = function (title, location, notes, startDate, endDate, options) { return cordova(this, "findEventWithOptions", {}, arguments); };
    CalendarOriginal.prototype.listEventsInRange = function (startDate, endDate) { return cordova(this, "listEventsInRange", { "platforms": ["Android"] }, arguments); };
    CalendarOriginal.prototype.listCalendars = function () { return cordova(this, "listCalendars", {}, arguments); };
    CalendarOriginal.prototype.findAllEventsInNamedCalendar = function (calendarName) { return cordova(this, "findAllEventsInNamedCalendar", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate) { return cordova(this, "modifyEvent", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, filterOptions, newOptions) { return cordova(this, "modifyEventWithOptions", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.deleteEvent = function (title, location, notes, startDate, endDate) { return cordova(this, "deleteEvent", {}, arguments); };
    CalendarOriginal.prototype.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName) { return cordova(this, "deleteEventFromNamedCalendar", { "platforms": ["iOS"] }, arguments); };
    CalendarOriginal.prototype.deleteEventById = function (id, fromDate) { return cordova(this, "deleteEventById", {}, arguments); };
    CalendarOriginal.prototype.openCalendar = function (date) { return cordova(this, "openCalendar", {}, arguments); };
    CalendarOriginal.pluginName = "Calendar";
    CalendarOriginal.plugin = "cordova-plugin-calendar";
    CalendarOriginal.pluginRef = "plugins.calendar";
    CalendarOriginal.repo = "https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin";
    CalendarOriginal.platforms = ["Android", "iOS"];
    return CalendarOriginal;
}(IonicNativePlugin));
var Calendar = new CalendarOriginal();
export { Calendar };
//# sourceMappingURL=data:application/json;base64,