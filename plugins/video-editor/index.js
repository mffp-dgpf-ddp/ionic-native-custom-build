var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var VideoEditorOriginal = /** @class */ (function (_super) {
    __extends(VideoEditorOriginal, _super);
    function VideoEditorOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.OptimizeForNetworkUse = {
            NO: 0,
            YES: 1,
        };
        _this.OutputFileType = {
            M4V: 0,
            MPEG4: 1,
            M4A: 2,
            QUICK_TIME: 3,
        };
        return _this;
    }
    VideoEditorOriginal.prototype.transcodeVideo = function (options) { return cordova(this, "transcodeVideo", { "callbackOrder": "reverse" }, arguments); };
    VideoEditorOriginal.prototype.trim = function (options) { return cordova(this, "trim", { "callbackOrder": "reverse", "platforms": ["iOS"] }, arguments); };
    VideoEditorOriginal.prototype.createThumbnail = function (options) { return cordova(this, "createThumbnail", { "callbackOrder": "reverse" }, arguments); };
    VideoEditorOriginal.prototype.getVideoInfo = function (options) { return cordova(this, "getVideoInfo", { "callbackOrder": "reverse" }, arguments); };
    VideoEditorOriginal.pluginName = "VideoEditor";
    VideoEditorOriginal.plugin = "cordova-plugin-video-editor";
    VideoEditorOriginal.pluginRef = "VideoEditor";
    VideoEditorOriginal.repo = "https://github.com/jbavari/cordova-plugin-video-editor";
    VideoEditorOriginal.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    return VideoEditorOriginal;
}(IonicNativePlugin));
var VideoEditor = new VideoEditorOriginal();
export { VideoEditor };
//# sourceMappingURL=data:application/json;base64,