import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var JumioNetverifyConfig = /** @class */ (function () {
    function JumioNetverifyConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioNetverifyConfig;
}());
export { JumioNetverifyConfig };
var JumioDocVerificationConfig = /** @class */ (function () {
    function JumioDocVerificationConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioDocVerificationConfig;
}());
export { JumioDocVerificationConfig };
var JumioAuthenticationConfig = /** @class */ (function () {
    function JumioAuthenticationConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return JumioAuthenticationConfig;
}());
export { JumioAuthenticationConfig };
var BAMConfig = /** @class */ (function () {
    function BAMConfig(config) {
        if (config) {
            Object.assign(this, config);
        }
    }
    return BAMConfig;
}());
export { BAMConfig };
var NetverifyDocumentData = /** @class */ (function () {
    function NetverifyDocumentData() {
    }
    return NetverifyDocumentData;
}());
export { NetverifyDocumentData };
var MRZData = /** @class */ (function () {
    function MRZData() {
    }
    return MRZData;
}());
export { MRZData };
var BAMCardInformation = /** @class */ (function () {
    function BAMCardInformation() {
    }
    return BAMCardInformation;
}());
export { BAMCardInformation };
var Jumio = /** @class */ (function (_super) {
    __extends(Jumio, _super);
    function Jumio() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Jumio.prototype.initNetverify = function (apiToken, apiSecret, dataCenter, netverifyConfig) { return cordova(this, "initNetverify", {}, arguments); };
    Jumio.prototype.startNetverify = function () { return cordova(this, "startNetverify", { "callbackOrder": "reverse" }, arguments); };
    Jumio.prototype.initDocumentVerification = function (apiToken, apiSecret, dataCenter, docVerificationConfig) { return cordova(this, "initDocumentVerification", {}, arguments); };
    Jumio.prototype.startDocumentVerification = function () { return cordova(this, "startDocumentVerification", { "callbackOrder": "reverse" }, arguments); };
    Jumio.prototype.initAuthentication = function (apiToken, apiSecret, dataCenter, authenticationConfig) { return cordova(this, "initAuthentication", {}, arguments); };
    Jumio.prototype.startAuthentication = function () { return cordova(this, "startAuthentication", { "callbackOrder": "reverse" }, arguments); };
    Jumio.prototype.initBAM = function (apiToken, apiSecret, dataCenter, bamConfig) { return cordova(this, "initBAM", {}, arguments); };
    Jumio.prototype.startBAM = function () { return cordova(this, "startBAM", { "callbackOrder": "reverse" }, arguments); };
    Jumio.pluginName = "Jumio";
    Jumio.plugin = "jumio-cordova";
    Jumio.pluginRef = "Jumio";
    Jumio.repo = "https://github.com/danielzen/jumio-cordova";
    Jumio.platforms = ["Android", "iOS"];
    Jumio = __decorate([
        Injectable()
    ], Jumio);
    return Jumio;
}(IonicNativePlugin));
export { Jumio };
//# sourceMappingURL=data:application/json;base64,