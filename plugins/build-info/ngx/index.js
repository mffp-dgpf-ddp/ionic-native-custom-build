import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var BuildInfo = /** @class */ (function (_super) {
    __extends(BuildInfo, _super);
    function BuildInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BuildInfo.prototype, "baseUrl", {
        get: function () { return cordovaPropertyGet(this, "baseUrl"); },
        set: function (value) { cordovaPropertySet(this, "baseUrl", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "packageName", {
        get: function () { return cordovaPropertyGet(this, "packageName"); },
        set: function (value) { cordovaPropertySet(this, "packageName", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "basePackageName", {
        get: function () { return cordovaPropertyGet(this, "basePackageName"); },
        set: function (value) { cordovaPropertySet(this, "basePackageName", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "displayName", {
        get: function () { return cordovaPropertyGet(this, "displayName"); },
        set: function (value) { cordovaPropertySet(this, "displayName", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "name", {
        get: function () { return cordovaPropertyGet(this, "name"); },
        set: function (value) { cordovaPropertySet(this, "name", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "version", {
        get: function () { return cordovaPropertyGet(this, "version"); },
        set: function (value) { cordovaPropertySet(this, "version", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "versionCode", {
        get: function () { return cordovaPropertyGet(this, "versionCode"); },
        set: function (value) { cordovaPropertySet(this, "versionCode", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "debug", {
        get: function () { return cordovaPropertyGet(this, "debug"); },
        set: function (value) { cordovaPropertySet(this, "debug", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "buildType", {
        get: function () { return cordovaPropertyGet(this, "buildType"); },
        set: function (value) { cordovaPropertySet(this, "buildType", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "flavor", {
        get: function () { return cordovaPropertyGet(this, "flavor"); },
        set: function (value) { cordovaPropertySet(this, "flavor", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "buildDate", {
        get: function () { return cordovaPropertyGet(this, "buildDate"); },
        set: function (value) { cordovaPropertySet(this, "buildDate", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "installDate", {
        get: function () { return cordovaPropertyGet(this, "installDate"); },
        set: function (value) { cordovaPropertySet(this, "installDate", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildInfo.prototype, "windows", {
        get: function () { return cordovaPropertyGet(this, "windows"); },
        set: function (value) { cordovaPropertySet(this, "windows", value); },
        enumerable: true,
        configurable: true
    });
    BuildInfo.pluginName = "BuildInfo";
    BuildInfo.plugin = "cordova-plugin-buildinfo";
    BuildInfo.pluginRef = "BuildInfo";
    BuildInfo.repo = "https://github.com/lynrin/cordova-plugin-buildinfo";
    BuildInfo.platforms = ["Android", "iOS", "Windows", "macOS", "browser", "Electron"];
    BuildInfo = __decorate([
        Injectable()
    ], BuildInfo);
    return BuildInfo;
}(IonicNativePlugin));
export { BuildInfo };
//# sourceMappingURL=data:application/json;base64,