var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import { Observable } from 'rxjs';
var AdmobOriginal = /** @class */ (function (_super) {
    __extends(AdmobOriginal, _super);
    function AdmobOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdmobOriginal.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    AdmobOriginal.prototype.createBannerView = function (options) { return cordova(this, "createBannerView", {}, arguments); };
    AdmobOriginal.prototype.showBannerAd = function (show) { return cordova(this, "showBannerAd", {}, arguments); };
    AdmobOriginal.prototype.destroyBannerView = function () { return cordova(this, "destroyBannerView", {}, arguments); };
    AdmobOriginal.prototype.requestInterstitialAd = function (options) { return cordova(this, "requestInterstitialAd", {}, arguments); };
    AdmobOriginal.prototype.showInterstitialAd = function () { return cordova(this, "showInterstitialAd", {}, arguments); };
    AdmobOriginal.prototype.requestRewardedAd = function (options) { return cordova(this, "requestRewardedAd", {}, arguments); };
    AdmobOriginal.prototype.showRewardedAd = function () { return cordova(this, "showRewardedAd", {}, arguments); };
    AdmobOriginal.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLoaded", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onAdFailedToLoad = function () { return cordova(this, "onAdFailedToLoad", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdFailedToLoad", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onAdOpened = function () { return cordova(this, "onAdOpened", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdOpened", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onAdClosed = function () { return cordova(this, "onAdClosed", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdClosed", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onAdLeftApplication = function () { return cordova(this, "onAdLeftApplication", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLeftApplication", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onRewardedAd = function () { return cordova(this, "onRewardedAd", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAd", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onRewardedAdVideoStarted = function () { return cordova(this, "onRewardedAdVideoStarted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoStarted", "element": "document" }, arguments); };
    AdmobOriginal.prototype.onRewardedAdVideoCompleted = function () { return cordova(this, "onRewardedAdVideoCompleted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoCompleted", "element": "document" }, arguments); };
    Object.defineProperty(AdmobOriginal.prototype, "AD_SIZE", {
        get: function () { return cordovaPropertyGet(this, "AD_SIZE"); },
        set: function (value) { cordovaPropertySet(this, "AD_SIZE", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdmobOriginal.prototype, "AD_TYPE", {
        get: function () { return cordovaPropertyGet(this, "AD_TYPE"); },
        set: function (value) { cordovaPropertySet(this, "AD_TYPE", value); },
        enumerable: true,
        configurable: true
    });
    AdmobOriginal.pluginName = "AdMob";
    AdmobOriginal.plugin = "cordova-admob";
    AdmobOriginal.pluginRef = "admob";
    AdmobOriginal.repo = "https://github.com/appfeel/admob-google-cordova";
    AdmobOriginal.platforms = ["Android", "iOS", "Browser"];
    return AdmobOriginal;
}(IonicNativePlugin));
var Admob = new AdmobOriginal();
export { Admob };
//# sourceMappingURL=data:application/json;base64,