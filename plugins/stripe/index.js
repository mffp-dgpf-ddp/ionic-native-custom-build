var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var StripeOriginal = /** @class */ (function (_super) {
    __extends(StripeOriginal, _super);
    function StripeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StripeOriginal.prototype.setPublishableKey = function (publishableKey) { return cordova(this, "setPublishableKey", {}, arguments); };
    StripeOriginal.prototype.createCardToken = function (params) { return cordova(this, "createCardToken", {}, arguments); };
    StripeOriginal.prototype.createBankAccountToken = function (params) { return cordova(this, "createBankAccountToken", {}, arguments); };
    StripeOriginal.prototype.validateCardNumber = function (cardNumber) { return cordova(this, "validateCardNumber", {}, arguments); };
    StripeOriginal.prototype.validateCVC = function (cvc) { return cordova(this, "validateCVC", {}, arguments); };
    StripeOriginal.prototype.validateExpiryDate = function (expMonth, expYear) { return cordova(this, "validateExpiryDate", {}, arguments); };
    StripeOriginal.prototype.getCardType = function (cardNumber) { return cordova(this, "getCardType", {}, arguments); };
    StripeOriginal.pluginName = "Stripe";
    StripeOriginal.plugin = "cordova-plugin-stripe";
    StripeOriginal.pluginRef = "cordova.plugins.stripe";
    StripeOriginal.repo = "https://github.com/zyramedia/cordova-plugin-stripe";
    StripeOriginal.platforms = ["Android", "Browser", "iOS"];
    return StripeOriginal;
}(IonicNativePlugin));
var Stripe = new StripeOriginal();
export { Stripe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3N0cmlwZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFnSjVDLDBCQUFpQjs7OztJQU8zQyxrQ0FBaUIsYUFBQyxjQUFzQjtJQVV4QyxnQ0FBZSxhQUFDLE1BQTZCO0lBVTdDLHVDQUFzQixhQUFDLE1BQStCO0lBVXRELG1DQUFrQixhQUFDLFVBQWtCO0lBVXJDLDRCQUFXLGFBQUMsR0FBVztJQVd2QixtQ0FBa0IsYUFBQyxRQUFnQixFQUFFLE9BQWU7SUFVcEQsNEJBQVcsYUFBQyxVQUFrQjs7Ozs7O2lCQXJOaEM7RUFpSjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQ2FyZFRva2VuUGFyYW1zIHtcclxuICAvKipcclxuICAgKiBDYXJkIG51bWJlclxyXG4gICAqL1xyXG4gIG51bWJlcjogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEV4cGlyeSBtb250aFxyXG4gICAqL1xyXG4gIGV4cE1vbnRoOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogRXhwaXJ5IHllYXJcclxuICAgKi9cclxuICBleHBZZWFyOiBudW1iZXI7XHJcbiAgLyoqXHJcbiAgICogQ1ZDIC8gQ1ZWXHJcbiAgICovXHJcbiAgY3ZjPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENhcmRob2xkZXIgbmFtZVxyXG4gICAqL1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWRkcmVzcyBsaW5lIDFcclxuICAgKi9cclxuICBhZGRyZXNzX2xpbmUxPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFkZHJlc3MgbGluZSAyXHJcbiAgICovXHJcbiAgYWRkcmVzc19saW5lMj86IHN0cmluZztcclxuICAvKipcclxuICAgKiBDaXR5XHJcbiAgICovXHJcbiAgYWRkcmVzc19jaXR5Pzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIFN0YXRlIC8gUHJvdmluY2VcclxuICAgKi9cclxuICBhZGRyZXNzX3N0YXRlPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnlcclxuICAgKi9cclxuICBhZGRyZXNzX2NvdW50cnk/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogUG9zdGFsIGNvZGUgLyBaSVAgQ29kZVxyXG4gICAqL1xyXG4gIHBvc3RhbENvZGU/OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogMy1sZXR0ZXIgSVNPIGNvZGUgZm9yIGN1cnJlbmN5XHJcbiAgICovXHJcbiAgY3VycmVuY3k/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyaXBlQmFua0FjY291bnRQYXJhbXMge1xyXG4gIC8qKlxyXG4gICAqIFJvdXRpbmcgbnVtYmVyLlxyXG4gICAqL1xyXG4gIHJvdXRpbmdfbnVtYmVyOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWNjb3VudCBudW1iZXIuXHJcbiAgICovXHJcbiAgYWNjb3VudF9udW1iZXI6IHN0cmluZztcclxuICAvKipcclxuICAgKiBDdXJyZW5jeSBjb2RlLiBFeGFtcGxlOiBgVVNEYC5cclxuICAgKi9cclxuICBjdXJyZW5jeTogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENvdW50cnkgY29kZS4gRXhhbXBsZTogYFVTYC5cclxuICAgKi9cclxuICBjb3VudHJ5OiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICogQWNjb3VudCBob2xkZXIgbmFtZS5cclxuICAgKi9cclxuICBhY2NvdW50X2hvbGRlcl9uYW1lPzogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEFjY291bnQgaG9sZGVyIHR5cGUuIFRoaXMgY2FuIGJlIGBpbmRpdmlkdWFsYCBvciBgY29tcGFueWAuXHJcbiAgICovXHJcbiAgYWNjb3VudF9ob2xkZXJfdHlwZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdHJpcGVDYXJkVG9rZW5SZXMge1xyXG4gIC8qKlxyXG4gICAqIENhcmQgT2JqZWN0LlxyXG4gICAqL1xyXG4gIGNhcmQ6IHtcclxuICAgIGJyYW5kOiBzdHJpbmc7XHJcbiAgICBleHBfbW9udGg6IG51bWJlcjtcclxuICAgIGV4cF95ZWFyOiBudW1iZXI7XHJcbiAgICBmdW5kaW5nOiBzdHJpbmc7XHJcbiAgICBsYXN0NDogc3RyaW5nO1xyXG4gIH07XHJcbiAgLyoqXHJcbiAgICogVG9rZW4gUmVxdWVzdCBEYXRlIFRpbWUuXHJcbiAgICovXHJcbiAgY3JlYXRlZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIENhcmQgVG9rZW4uXHJcbiAgICovXHJcbiAgaWQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiBTb3VyY2UgVHlwZSAoY2FyZCBvciBhY2NvdW50KS5cclxuICAgKi9cclxuICB0eXBlOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTdHJpcGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgcGx1Z2luIHRoYXQgYWxsb3dzIHlvdSB0byB1c2UgU3RyaXBlJ3MgTmF0aXZlIFNES3MgZm9yIEFuZHJvaWQgYW5kIGlPUy5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU3RyaXBlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zdHJpcGUvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzdHJpcGU6IFN0cmlwZSkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKiB0aGlzLnN0cmlwZS5zZXRQdWJsaXNoYWJsZUtleSgnbXlfcHVibGlzaGFibGVfa2V5Jyk7XHJcbiAqXHJcbiAqIGxldCBjYXJkID0ge1xyXG4gKiAgbnVtYmVyOiAnNDI0MjQyNDI0MjQyNDI0MicsXHJcbiAqICBleHBNb250aDogMTIsXHJcbiAqICBleHBZZWFyOiAyMDIwLFxyXG4gKiAgY3ZjOiAnMjIwJ1xyXG4gKiB9XHJcbiAqXHJcbiAqIHRoaXMuc3RyaXBlLmNyZWF0ZUNhcmRUb2tlbihjYXJkKVxyXG4gKiAgICAudGhlbih0b2tlbiA9PiBjb25zb2xlLmxvZyh0b2tlbi5pZCkpXHJcbiAqICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBTdHJpcGVDYXJkVG9rZW5QYXJhbXNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTdHJpcGUnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXN0cmlwZScsXHJcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnN0cmlwZScsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS96eXJhbWVkaWEvY29yZG92YS1wbHVnaW4tc3RyaXBlJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBTdHJpcGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogU2V0IHB1Ymxpc2hhYmxlIGtleVxyXG4gICAqIEBwYXJhbSBwdWJsaXNoYWJsZUtleSB7c3RyaW5nfSBQdWJsaXNoYWJsZSBrZXlcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRQdWJsaXNoYWJsZUtleShwdWJsaXNoYWJsZUtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgQ3JlZGl0IENhcmQgVG9rZW5cclxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVDYXJkVG9rZW5QYXJhbXN9IENyZWRpdCBjYXJkIGluZm9ybWF0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxTdHJpcGVDYXJkVG9rZW5SZXM+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuIG9iamVjdCwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNyZWF0ZUNhcmRUb2tlbihwYXJhbXM6IFN0cmlwZUNhcmRUb2tlblBhcmFtcyk6IFByb21pc2U8U3RyaXBlQ2FyZFRva2VuUmVzPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBiYW5rIGFjY291bnQgdG9rZW5cclxuICAgKiBAcGFyYW0gcGFyYW1zIHtTdHJpcGVCYW5rQWNjb3VudFBhcmFtc30gQmFuayBhY2NvdW50IGluZm9ybWF0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRva2VuLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY3JlYXRlQmFua0FjY291bnRUb2tlbihwYXJhbXM6IFN0cmlwZUJhbmtBY2NvdW50UGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFZhbGlkYXRlcyBhIGNyZWRpdCBjYXJkIG51bWJlclxyXG4gICAqIEBwYXJhbSBjYXJkTnVtYmVyIHtzdHJpbmd9IENyZWRpdCBjYXJkIG51bWJlclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB0aGUgbnVtYmVyIGlzIHZhbGlkLCBhbmQgcmVqZWN0cyBpZiBpdCdzIGludmFsaWRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmFsaWRhdGVDYXJkTnVtYmVyKGNhcmROdW1iZXI6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZXMgYSBDVkMgbnVtYmVyXHJcbiAgICogQHBhcmFtIGN2YyB7c3RyaW5nfSBDVkMgbnVtYmVyXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBudW1iZXIgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2YWxpZGF0ZUNWQyhjdmM6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZXMgYW4gZXhwaXJ5IGRhdGVcclxuICAgKiBAcGFyYW0gZXhwTW9udGgge3N0cmluZ30gZXhwaXJ5IG1vbnRoICgwIC0gMTEpXHJcbiAgICogQHBhcmFtIGV4cFllYXIge3N0cmluZ30gZXhwaXJ5IHllYXJcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgdGhlIGRhdGUgaXMgdmFsaWQsIGFuZCByZWplY3RzIGlmIGl0J3MgaW52YWxpZFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2YWxpZGF0ZUV4cGlyeURhdGUoZXhwTW9udGg6IHN0cmluZywgZXhwWWVhcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGNhcmQgdHlwZSBmcm9tIGNhcmQgbnVtYmVyXHJcbiAgICogQHBhcmFtIGNhcmROdW1iZXIge3N0cmluZ30gQ2FyZCBudW1iZXJcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY3JlZGl0IGNhcmQgdHlwZVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBnZXRDYXJkVHlwZShjYXJkTnVtYmVyOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=