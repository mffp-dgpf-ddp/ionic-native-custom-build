import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AES256 = /** @class */ (function (_super) {
    __extends(AES256, _super);
    function AES256() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AES256.prototype.encrypt = function (secureKey, secureIV, data) { return cordova(this, "encrypt", {}, arguments); };
    AES256.prototype.decrypt = function (secureKey, secureIV, data) { return cordova(this, "decrypt", {}, arguments); };
    AES256.prototype.generateSecureKey = function (password) { return cordova(this, "generateSecureKey", {}, arguments); };
    AES256.prototype.generateSecureIV = function (password) { return cordova(this, "generateSecureIV", {}, arguments); };
    AES256.pluginName = "AES256";
    AES256.plugin = "cordova-plugin-aes256-encryption";
    AES256.pluginRef = "cordova.plugins.AES256";
    AES256.repo = "https://github.com/Ideas2IT/cordova-aes256";
    AES256.platforms = ["Android", "iOS"];
    AES256.install = "ionic cordova plugin add cordova-plugin-aes256-encryption";
    AES256 = __decorate([
        Injectable()
    ], AES256);
    return AES256;
}(IonicNativePlugin));
export { AES256 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Flcy0yNTYvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBd0Q1QywwQkFBaUI7Ozs7SUFTM0Msd0JBQU8sYUFBQyxTQUFpQixFQUFFLFFBQWdCLEVBQUUsSUFBWTtJQVl6RCx3QkFBTyxhQUFDLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBV3pELGtDQUFpQixhQUFDLFFBQWdCO0lBV2xDLGlDQUFnQixhQUFDLFFBQWdCOzs7Ozs7O0lBM0N0QixNQUFNO1FBRGxCLFVBQVUsRUFBRTtPQUNBLE1BQU07aUJBekRuQjtFQXlENEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEFFUzI1NlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBjb3Jkb3ZhIGlvbmljIHBsdWdpbiBhbGxvd3MgeW91IHRvIHBlcmZvcm0gQUVTIDI1NiBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uIG9uIHRoZSBwbGFpbiB0ZXh0LlxyXG4gKiBJdCdzIGEgY3Jvc3MtcGxhdGZvcm0gcGx1Z2luIHdoaWNoIHN1cHBvcnRzIGJvdGggQW5kcm9pZCBhbmQgaU9TLlxyXG4gKiBUaGUgZW5jcnlwdGlvbiBhbmQgZGVjcnlwdGlvbiBhcmUgcGVyZm9ybWVkIG9uIHRoZSBkZXZpY2UgbmF0aXZlIGxheWVyIHNvIHRoYXQgdGhlIHBlcmZvcm1hbmNlIGlzIG11Y2ggZmFzdGVyLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBBRVMyNTYgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Flcy0yNTYvbmd4JztcclxuICpcclxuICogcHJpdmF0ZSBzZWN1cmVLZXk6IHN0cmluZztcclxuICogcHJpdmF0ZSBzZWN1cmVJVjogc3RyaW5nO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFlczI1NjogQUVTMjU2KSB7XHJcbiAqICAgIHRoaXMuZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpOyAvLyBUbyBnZW5lcmF0ZSB0aGUgcmFuZG9tIHNlY3VyZUtleSBhbmQgc2VjdXJlSVZcclxuICogfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogYXN5bmMgZ2VuZXJhdGVTZWN1cmVLZXlBbmRJVigpIHtcclxuICogICAgdGhpcy5zZWN1cmVLZXkgPSBhd2FpdCB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUtleSgncmFuZG9tIHBhc3N3b3JkIDEyMzQ1Jyk7IC8vIFJldHVybnMgYSAzMiBieXRlcyBzdHJpbmdcclxuICogICAgdGhpcy5zZWN1cmVJViA9IGF3YWl0IHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlSVYoJ3JhbmRvbSBwYXNzd29yZCAxMjM0NScpOyAvLyBSZXR1cm5zIGEgMTYgYnl0ZXMgc3RyaW5nXHJcbiAqIH1cclxuICpcclxuICogdGhpcy5hZXMyNTYuZW5jcnlwdCh0aGlzLnNlY3VyZUtleSwgdGhpcy5zZWN1cmVJViwgJ3Rlc3RkYXRhJylcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0VuY3J5cHRlZCBEYXRhOiAnLHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIHRoaXMuYWVzMjU2LmRlY3J5cHQodGhpcy5zZWN1cmVLZXksIHRoaXMuc2VjdXJlSVYsICdlbmNyeXB0ZWREYXRhJylcclxuICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2coJ0RlY3J5cHRlZCBEYXRhIDogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKlxyXG4gKiAqIHRoaXMuYWVzMjU2LmdlbmVyYXRlU2VjdXJlS2V5KCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxyXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIEtleSA6ICcscmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICpcclxuICogKiB0aGlzLmFlczI1Ni5nZW5lcmF0ZVNlY3VyZUlWKCdyYW5kb20gcGFzc3dvcmQgMTIzNDUnKVxyXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnU2VjdXJlIElWIDogJyxyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdBRVMyNTYnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcclxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuQUVTMjU2JyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0lkZWFzMklUL2NvcmRvdmEtYWVzMjU2JyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWFlczI1Ni1lbmNyeXB0aW9uJyxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQUVTMjU2IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBwZXJmb3JtIHRoZSBhZXMyNTYgZW5jcnlwdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVLZXkgQSAzMiBieXRlcyBzdHJpbmcsIHdoaWNoIHdpbGwgdXNlZCBhcyBpbnB1dCBrZXkgZm9yIEFFUzI1NiBlbmNyeXB0aW9uLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWN1cmVJViBBIDE2IGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGluaXRpYWwgdmVjdG9yIGZvciBBRVMyNTYgZW5jcnlwdGlvbi5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBBIHN0cmluZyB3aGljaCB3aWxsIGJlIGVuY3J5cHRlZFxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGVuY3J5cHRpb24gaGFwcGVucy4gVGhlIHN1Y2Nlc3MgcmVzcG9uc2Ugd2lsbCByZXR1cm5zIGVuY3J5cHRlZCBkYXRhLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbmNyeXB0KHNlY3VyZUtleTogc3RyaW5nLCBzZWN1cmVJVjogc3RyaW5nLCBkYXRhOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiB1c2VkIHRvIHBlcmZvcm0gdGhlIGFlczI1NiBkZWNyeXB0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUtleSBBIDMyIGJ5dGVzIHN0cmluZywgd2hpY2ggd2lsbCB1c2VkIGFzIGlucHV0IGtleSBmb3IgQUVTMjU2IGRlY3J5cHRpb24uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlY3VyZUlWIEEgMTYgYnl0ZXMgc3RyaW5nLCB3aGljaCB3aWxsIHVzZWQgYXMgaW5pdGlhbCB2ZWN0b3IgZm9yIEFFUzI1NiBkZWNyeXB0aW9uLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIEFuIEFFUzI1NiBlbmNyeXB0ZWQgZGF0YSB3aGljaCB3aWxsIGJlIGRlY3J5cHRlZC5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBkZWNyeXB0aW9uIGhhcHBlbnMuIFRoZSBzdWNjZXNzIHJlc3BvbnNlIHdpbGwgcmV0dXJucyBkZWNyeXB0ZWQgZGF0YS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVjcnlwdChzZWN1cmVLZXk6IHN0cmluZywgc2VjdXJlSVY6IHN0cmluZywgZGF0YTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBnZW5lcmF0ZSBhIHNlY3VyZSBrZXkgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIGtleSBnZW5lcmF0aW9uIGZvciBlbmNyeXB0aW9uIHRvIHRoZSBwbHVnaW4uXHJcbiAgICogTWFrZSBzdXJlIHRvIHNhdmUgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGZ1bmN0aW9uIHNvbWV3aGVyZSBzbyB5b3VyIGVuY3J5cHRlZCBkYXRhIGNhbiBiZSBkZWNyeXB0ZWQgaW4gdGhlIGZ1dHVyZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgQSByYW5kb20gc3RyaW5nLCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgaW5wdXQgZm9yIGEgUEJLREYyIGZ1bmN0aW9uXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4ga2V5IGlzIGdlbmVyYXRlZC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2VuZXJhdGVTZWN1cmVLZXkocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgYSBzZWN1cmUgSVYgYmFzZWQgb24gYW4gcGFzc3dvcmQuIFBlcmZlY3QgaWYgeW91IHdhbnQgdG8gZGVsZWdhdGUgdGhlIElWIGdlbmVyYXRpb24gZm9yIGVuY3J5cHRpb24gdG8gdGhlIHBsdWdpbi5cclxuICAgKiBNYWtlIHN1cmUgdG8gc2F2ZSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gc29tZXdoZXJlIHNvIHlvdXIgZW5jcnlwdGVkIGRhdGEgY2FuIGJlIGRlY3J5cHRlZCBpbiB0aGUgZnV0dXJlLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBBIHJhbmRvbSBzdHJpbmcsIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBmb3IgYSBQQktERjIgZnVuY3Rpb25cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBJViBpcyBnZW5lcmF0ZWQuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdlbmVyYXRlU2VjdXJlSVYocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==