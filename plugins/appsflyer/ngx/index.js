import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Appsflyer = /** @class */ (function (_super) {
    __extends(Appsflyer, _super);
    function Appsflyer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Appsflyer.prototype.initSdk = function (options) { return cordova(this, "initSdk", {}, arguments); };
    Appsflyer.prototype.trackEvent = function (eventName, eventValues) { return cordova(this, "trackEvent", { "sync": true }, arguments); };
    Appsflyer.prototype.setAppUserId = function (customerUserId) { return cordova(this, "setAppUserId", { "sync": true }, arguments); };
    Appsflyer.prototype.stopTracking = function (isStopTracking) { return cordova(this, "stopTracking", { "sync": true }, arguments); };
    Appsflyer.prototype.registerOnAppOpenAttribution = function () { return cordova(this, "registerOnAppOpenAttribution", {}, arguments); };
    Appsflyer.prototype.enableUninstallTracking = function (token) { return cordova(this, "enableUninstallTracking", {}, arguments); };
    Appsflyer.prototype.updateServerUninstallToken = function (token) { return cordova(this, "updateServerUninstallToken", { "sync": true }, arguments); };
    Appsflyer.prototype.registerUninstall = function (token) { return cordova(this, "registerUninstall", { "sync": true }, arguments); };
    Appsflyer.prototype.getAppsFlyerUID = function () { return cordova(this, "getAppsFlyerUID", {}, arguments); };
    Appsflyer.prototype.deviceTrackingDisabled = function (disable) { return cordova(this, "deviceTrackingDisabled", { "sync": true }, arguments); };
    Appsflyer.prototype.setAppInviteOneLinkID = function (oneLinkId) { return cordova(this, "setAppInviteOneLinkID", { "sync": true }, arguments); };
    Appsflyer.prototype.generateInviteLink = function (options) { return cordova(this, "generateInviteLink", {}, arguments); };
    Appsflyer.prototype.trackCrossPromotionImpression = function (appId, campaign) { return cordova(this, "trackCrossPromotionImpression", { "sync": true }, arguments); };
    Appsflyer.prototype.trackAndOpenStore = function (appId, campaign, options) { return cordova(this, "trackAndOpenStore", { "sync": true }, arguments); };
    Appsflyer.pluginName = "Appsflyer";
    Appsflyer.plugin = "cordova-plugin-appsflyer-sdk";
    Appsflyer.pluginRef = "window.plugins.appsFlyer";
    Appsflyer.repo = "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk";
    Appsflyer.platforms = ["iOS", "Android"];
    Appsflyer.install = "Add to config.xml like stated on github and then start";
    Appsflyer = __decorate([
        Injectable()
    ], Appsflyer);
    return Appsflyer;
}(IonicNativePlugin));
export { Appsflyer };
//# sourceMappingURL=data:application/json;base64,