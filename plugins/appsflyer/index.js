var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AppsflyerOriginal = /** @class */ (function (_super) {
    __extends(AppsflyerOriginal, _super);
    function AppsflyerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppsflyerOriginal.prototype.initSdk = function (options) { return cordova(this, "initSdk", {}, arguments); };
    AppsflyerOriginal.prototype.trackEvent = function (eventName, eventValues) { return cordova(this, "trackEvent", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.setAppUserId = function (customerUserId) { return cordova(this, "setAppUserId", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.stopTracking = function (isStopTracking) { return cordova(this, "stopTracking", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.registerOnAppOpenAttribution = function () { return cordova(this, "registerOnAppOpenAttribution", {}, arguments); };
    AppsflyerOriginal.prototype.enableUninstallTracking = function (token) { return cordova(this, "enableUninstallTracking", {}, arguments); };
    AppsflyerOriginal.prototype.updateServerUninstallToken = function (token) { return cordova(this, "updateServerUninstallToken", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.registerUninstall = function (token) { return cordova(this, "registerUninstall", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.getAppsFlyerUID = function () { return cordova(this, "getAppsFlyerUID", {}, arguments); };
    AppsflyerOriginal.prototype.deviceTrackingDisabled = function (disable) { return cordova(this, "deviceTrackingDisabled", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.setAppInviteOneLinkID = function (oneLinkId) { return cordova(this, "setAppInviteOneLinkID", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.generateInviteLink = function (options) { return cordova(this, "generateInviteLink", {}, arguments); };
    AppsflyerOriginal.prototype.trackCrossPromotionImpression = function (appId, campaign) { return cordova(this, "trackCrossPromotionImpression", { "sync": true }, arguments); };
    AppsflyerOriginal.prototype.trackAndOpenStore = function (appId, campaign, options) { return cordova(this, "trackAndOpenStore", { "sync": true }, arguments); };
    AppsflyerOriginal.pluginName = "Appsflyer";
    AppsflyerOriginal.plugin = "cordova-plugin-appsflyer-sdk";
    AppsflyerOriginal.pluginRef = "window.plugins.appsFlyer";
    AppsflyerOriginal.repo = "https://github.com/AppsFlyerSDK/cordova-plugin-appsflyer-sdk";
    AppsflyerOriginal.platforms = ["iOS", "Android"];
    AppsflyerOriginal.install = "Add to config.xml like stated on github and then start";
    return AppsflyerOriginal;
}(IonicNativePlugin));
var Appsflyer = new AppsflyerOriginal();
export { Appsflyer };
//# sourceMappingURL=data:application/json;base64,