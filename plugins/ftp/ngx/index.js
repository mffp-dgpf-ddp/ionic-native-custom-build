import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FTP = /** @class */ (function (_super) {
    __extends(FTP, _super);
    function FTP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTP.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTP.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTP.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTP.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTP.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTP.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTP.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTP.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTP.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTP.pluginName = "FTP";
    FTP.plugin = "cordova-plugin-ftp";
    FTP.pluginRef = "cordova.plugin.ftp";
    FTP.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTP.platforms = ["Android", "iOS"];
    FTP = __decorate([
        Injectable()
    ], FTP);
    return FTP;
}(IonicNativePlugin));
export { FTP };
//# sourceMappingURL=data:application/json;base64,