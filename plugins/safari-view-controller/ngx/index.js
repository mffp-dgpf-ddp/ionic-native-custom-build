import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var SafariViewController = /** @class */ (function (_super) {
    __extends(SafariViewController, _super);
    function SafariViewController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SafariViewController.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    SafariViewController.prototype.show = function (options) { return cordova(this, "show", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments); };
    SafariViewController.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    SafariViewController.prototype.connectToService = function () { return cordova(this, "connectToService", {}, arguments); };
    SafariViewController.prototype.warmUp = function () { return cordova(this, "warmUp", {}, arguments); };
    SafariViewController.prototype.mayLaunchUrl = function (url) { return cordova(this, "mayLaunchUrl", {}, arguments); };
    SafariViewController.pluginName = "SafariViewController";
    SafariViewController.plugin = "cordova-plugin-safariviewcontroller";
    SafariViewController.pluginRef = "SafariViewController";
    SafariViewController.repo = "https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller";
    SafariViewController.platforms = ["Android", "iOS"];
    SafariViewController = __decorate([
        Injectable()
    ], SafariViewController);
    return SafariViewController;
}(IonicNativePlugin));
export { SafariViewController };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NhZmFyaS12aWV3LWNvbnRyb2xsZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFtRVEsd0NBQWlCOzs7O0lBTXpELDBDQUFXO0lBY1gsbUNBQUksYUFBQyxPQUFxQztJQVExQyxtQ0FBSTtJQVNKLCtDQUFnQjtJQVNoQixxQ0FBTTtJQVVOLDJDQUFZLGFBQUMsR0FBVzs7Ozs7O0lBeERiLG9CQUFvQjtRQURoQyxVQUFVLEVBQUU7T0FDQSxvQkFBb0I7K0JBckVqQztFQXFFMEMsaUJBQWlCO1NBQTlDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2FmYXJpVmlld0NvbnRyb2xsZXJPcHRpb25zIHtcclxuICBhbmltYXRlZD86IGJvb2xlYW47XHJcbiAgYmFyQ29sb3I/OiBzdHJpbmc7XHJcbiAgY29udHJvbFRpbnRDb2xvcj86IHN0cmluZztcclxuICBlbnRlclJlYWRlck1vZGVJZkF2YWlsYWJsZT86IGJvb2xlYW47XHJcbiAgaGlkZGVuPzogYm9vbGVhbjtcclxuICBzaG93RGVmYXVsdFNoYXJlTWVudUl0ZW0/OiBib29sZWFuO1xyXG4gIHRpbnRDb2xvcj86IHN0cmluZztcclxuICB0b29sYmFyQ29sb3I/OiBzdHJpbmc7XHJcbiAgdHJhbnNpdGlvbj86IHN0cmluZztcclxuICB1cmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBTYWZhcmkgVmlldyBDb250cm9sbGVyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGb3IgZGlzcGxheWluZyByZWFkLW9ubHkgd2ViIGNvbnRlbnQuXHJcbiAqXHJcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbU2FmYXJpIFZpZXcgQ29udHJvbGxlciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgU2FmYXJpVmlld0NvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NhZmFyaS12aWV3LWNvbnRyb2xsZXIvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzYWZhcmlWaWV3Q29udHJvbGxlcjogU2FmYXJpVmlld0NvbnRyb2xsZXIpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5zYWZhcmlWaWV3Q29udHJvbGxlci5pc0F2YWlsYWJsZSgpXHJcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4ge1xyXG4gKiAgICAgICBpZiAoYXZhaWxhYmxlKSB7XHJcbiAqXHJcbiAqICAgICAgICAgdGhpcy5zYWZhcmlWaWV3Q29udHJvbGxlci5zaG93KHtcclxuICogICAgICAgICAgIHVybDogJ2h0dHA6Ly9pb25pYy5pbycsXHJcbiAqICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxyXG4gKiAgICAgICAgICAgYW5pbWF0ZWQ6IGZhbHNlLFxyXG4gKiAgICAgICAgICAgdHJhbnNpdGlvbjogJ2N1cmwnLFxyXG4gKiAgICAgICAgICAgZW50ZXJSZWFkZXJNb2RlSWZBdmFpbGFibGU6IHRydWUsXHJcbiAqICAgICAgICAgICB0aW50Q29sb3I6ICcjZmYwMDAwJ1xyXG4gKiAgICAgICAgIH0pXHJcbiAqICAgICAgICAgLnN1YnNjcmliZSgocmVzdWx0OiBhbnkpID0+IHtcclxuICogICAgICAgICAgICAgaWYocmVzdWx0LmV2ZW50ID09PSAnb3BlbmVkJykgY29uc29sZS5sb2coJ09wZW5lZCcpO1xyXG4gKiAgICAgICAgICAgICBlbHNlIGlmKHJlc3VsdC5ldmVudCA9PT0gJ2xvYWRlZCcpIGNvbnNvbGUubG9nKCdMb2FkZWQnKTtcclxuICogICAgICAgICAgICAgZWxzZSBpZihyZXN1bHQuZXZlbnQgPT09ICdjbG9zZWQnKSBjb25zb2xlLmxvZygnQ2xvc2VkJyk7XHJcbiAqICAgICAgICAgICB9LFxyXG4gKiAgICAgICAgICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAqICAgICAgICAgKTtcclxuICpcclxuICogICAgICAgfSBlbHNlIHtcclxuICogICAgICAgICAvLyB1c2UgZmFsbGJhY2sgYnJvd3NlciwgZXhhbXBsZSBJbkFwcEJyb3dzZXJcclxuICogICAgICAgfVxyXG4gKiAgICAgfVxyXG4gKiAgICk7XHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJmYWNlc1xyXG4gKiBTYWZhcmlWaWV3Q29udHJvbGxlck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdTYWZhcmlWaWV3Q29udHJvbGxlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXInLFxyXG4gIHBsdWdpblJlZjogJ1NhZmFyaVZpZXdDb250cm9sbGVyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2FmYXJpVmlld0NvbnRyb2xsZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIFNhZmFyaVZpZXdDb250cm9sbGVyIGlzIGF2YWlsYWJsZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNob3dzIFNhZmFyaSBWaWV3IENvbnRyb2xsZXJcclxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U2FmYXJpVmlld0NvbnRyb2xsZXJPcHRpb25zfSBvcHRpb25hbFxyXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoe1xyXG4gICAgc3VjY2Vzc0luZGV4OiAxLFxyXG4gICAgZXJyb3JJbmRleDogMixcclxuICAgIG9ic2VydmFibGU6IHRydWUsXHJcbiAgfSlcclxuICBzaG93KG9wdGlvbnM/OiBTYWZhcmlWaWV3Q29udHJvbGxlck9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGlkZXMgU2FmYXJpIFZpZXcgQ29udHJvbGxlclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoaWRlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmllcyB0byBjb25uZWN0IHRvIHRoZSAgQ2hyb21lJ3MgY3VzdG9tIHRhYnMgc2VydmljZS4geW91IG11c3QgY2FsbCB0aGlzIG1ldGhvZCBiZWZvcmUgY2FsbGluZyBhbnkgb2YgdGhlIG90aGVyIG1ldGhvZHMgbGlzdGVkIGJlbG93LlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGNvbm5lY3RUb1NlcnZpY2UoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGwgdGhpcyBtZXRob2Qgd2hlbmV2ZXIgdGhlcmUncyBhIGNoYW5jZSB0aGUgdXNlciB3aWxsIG9wZW4gYW4gZXh0ZXJuYWwgdXJsLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHdhcm1VcCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yIGV2ZW4gYmV0dGVyIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgY2FsbCB0aGlzIG1ldGhvZHMgaWYgdGhlcmUncyBtb3JlIHRoYW4gYSA1MCUgY2hhbmNlIHRoZSB1c2VyIHdpbGwgb3BlbiBhIGNlcnRhaW4gVVJMLlxyXG4gICAqIEBwYXJhbSB1cmx7c3RyaW5nfVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIG1heUxhdW5jaFVybCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59XHJcbiJdfQ==