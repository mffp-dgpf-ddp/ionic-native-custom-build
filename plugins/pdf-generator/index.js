var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var PDFGeneratorOriginal = /** @class */ (function (_super) {
    __extends(PDFGeneratorOriginal, _super);
    function PDFGeneratorOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PDFGeneratorOriginal.prototype.fromURL = function (url, options) { return cordova(this, "fromURL", { "otherPromise": true }, arguments); };
    PDFGeneratorOriginal.prototype.fromData = function (data, options) { return cordova(this, "fromData", { "otherPromise": true }, arguments); };
    PDFGeneratorOriginal.pluginName = "PDFGenerator";
    PDFGeneratorOriginal.plugin = "cordova-pdf-generator";
    PDFGeneratorOriginal.pluginRef = "cordova.plugins.pdf";
    PDFGeneratorOriginal.repo = "https://github.com/cesarvr/pdf-generator";
    PDFGeneratorOriginal.platforms = ["Android", "iOS"];
    return PDFGeneratorOriginal;
}(IonicNativePlugin));
var PDFGenerator = new PDFGeneratorOriginal();
export { PDFGenerator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BkZi1nZW5lcmF0b3IvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0R0QyxnQ0FBaUI7Ozs7SUFRakQsOEJBQU8sYUFBQyxHQUFXLEVBQUUsT0FBNkI7SUFXbEQsK0JBQVEsYUFBQyxJQUFZLEVBQUUsT0FBNkI7Ozs7Ozt1QkFuRnREO0VBZ0VrQyxpQkFBaUI7U0FBdEMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBERkdlbmVyYXRvck9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIFRoZSBkb2N1bWVudCBzaXplLCBlLmcuLCBBMiwgQTMsIG9yIEE0LlxyXG4gICAqIE9ubHkgc3VwcG9ydGVkIG9uIGlPUy5cclxuICAgKiBUaGUgZGVmYXVsdCBpcyAnQTQnLlxyXG4gICAqL1xyXG4gIGRvY3VtZW50U2l6ZT86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9uIHRvIGNoYW5nZSB0byBsYW5kc2NhcGUgb3JpZW50YXRpb24uXHJcbiAgICogRGVmYXVsdCBpcyAncG9ydHJhaXQnLlxyXG4gICAqL1xyXG4gIGxhbmRzY2FwZT86ICdsYW5kc2NhcGUnIHwgJ3BvcnRyYWl0JztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHR5cGUgdG8gYmUgcmV0dXJuZWQsIGVpdGhlciAnc2hhcmUnIG9yICdiYXNlNjQnLlxyXG4gICAqIElmICdzaGFyZSBpcyBjaG9zZW4sIHRoZSBQREYgaXMgc2hhcmVkIHdpdGggdGhlIHN5c3RlbSBjYXBhYmlsaXRpZXMuXHJcbiAgICogRGVmYXVsdCBpcyAnYmFzZTY0J1xyXG4gICAqL1xyXG4gIHR5cGU/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZXNpcmVkIGZpbGVuYW1lIHRoZSByZXN1bHRpbmcgUERGIHNob3VsZCBoYXZlLlxyXG4gICAqIERlZmF1bHQgaXMgJ2RlZmF1bHQucGRmJ1xyXG4gICAqL1xyXG4gIGZpbGVOYW1lPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBPcHRpb24gdG8gc2V0IHRoZSBiYXNlIFVSTCBmb3IgcGF0aGluZy5cclxuICAgKiBEZWZhdWx0IGlzICdudWxsJy5cclxuICAgKi9cclxuICBiYXNlVXJsPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgUERGR2VuZXJhdG9yXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTaW1wbGUgcGx1Z2luIHRvIGdlbmVyYXRlIChvZmZsaW5lKSBwZGYuIFRoZSBwbHVnaW4gdHJhbnNmb3JtcyBIVE1MIHRvIFBERiBhbmQgYWxzbyBwcm92aWRlIHRoZSBtZWNoYW5pc20gdG8gc2hhcmUgdGhlIHBkZiB0byBvdGhlciBhcHBzIGxpa2UgTWFpbCwgZXRjLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBQREZHZW5lcmF0b3IgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3BkZi1nZW5lcmF0b3InO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHBkZkdlbmVyYXRvcjogUERGR2VuZXJhdG9yKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqIHRoaXMucGRmR2VuZXJhdG9yLmZyb21VUkwodXJsLCBvcHRpb25zKS50aGVuKGJhc2U2NFN0cmluZyA9PiBjb25zb2xlLmxvZyhiYXNlNjRTdHJpbmcpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnUERGR2VuZXJhdG9yJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBkZi1nZW5lcmF0b3InLFxyXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5wZGYnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2VzYXJ2ci9wZGYtZ2VuZXJhdG9yJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBERkdlbmVyYXRvciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgUERGIHVzaW5nIGEgVVJMLCBpdCBkb3dubG9hZCB0aGUgZG9jdW1lbnQgaW50byBhbiBpbiBtZW1vcnkgV2Via2l0IG9iamVjdCwgYW5kIHJlbmRlcnMgaXQgaW50byBhIFBERi5cclxuICAgKiBAcGFyYW0gdXJsIHtzdHJpbmd9IFVSTCB0byBjcmVhdGUgYSBQREYgZnJvbVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQREZHZW5lcmF0b3JPcHRpb25zfSBvcHRpb25zIGZvciBQREYgZ2VuZXJhdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBmcm9tVVJMKHVybDogc3RyaW5nLCBvcHRpb25zPzogUERGR2VuZXJhdG9yT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgUERGIHVzaW5nIHN0cmluZyB3aXRoIHRoZSBIVE1MIHJlcHJlc2VudGF0aW9uLCBpdCBkb3dubG9hZCB0aGUgZG9jdW1lbnQgaW50byBhbiBpbiBtZW1vcnkgV2Via2l0IG9iamVjdCwgYW5kIHJlbmRlcnMgaXQgaW50byBhIFBERi5cclxuICAgKiBAcGFyYW0gZGF0YSB7c3RyaW5nfSBIVE1MIHN0cmluZyByZXByZXNlbnRhdGlvbiB0byBjcmVhdGUgYSBQREYgZnJvbVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIHtQREZHZW5lcmF0b3JPcHRpb25zfSBvcHRpb25zIGZvciBQREYgZ2VuZXJhdGlvblxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XHJcbiAgICovXHJcbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcclxuICBmcm9tRGF0YShkYXRhOiBzdHJpbmcsIG9wdGlvbnM/OiBQREZHZW5lcmF0b3JPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19