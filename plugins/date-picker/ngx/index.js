import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.ANDROID_THEMES = {
            THEME_TRADITIONAL: 1,
            THEME_HOLO_DARK: 2,
            THEME_HOLO_LIGHT: 3,
            THEME_DEVICE_DEFAULT_DARK: 4,
            THEME_DEVICE_DEFAULT_LIGHT: 5,
        };
        return _this;
    }
    DatePicker.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    DatePicker.pluginName = "DatePicker";
    DatePicker.plugin = "cordova-plugin-datepicker";
    DatePicker.pluginRef = "datePicker";
    DatePicker.repo = "https://github.com/VitaliiBlagodir/cordova-plugin-datepicker";
    DatePicker.platforms = ["Android", "iOS", "Windows"];
    DatePicker = __decorate([
        Injectable()
    ], DatePicker);
    return DatePicker;
}(IonicNativePlugin));
export { DatePicker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RhdGUtcGlja2VyL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBKeEMsOEJBQWlCOzs7UUFDL0M7O1dBRUc7UUFDSCxvQkFBYyxHQUFHO1lBQ2YsaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixlQUFlLEVBQUUsQ0FBQztZQUNsQixnQkFBZ0IsRUFBRSxDQUFDO1lBQ25CLHlCQUF5QixFQUFFLENBQUM7WUFDNUIsMEJBQTBCLEVBQUUsQ0FBQztTQUM5QixDQUFDOzs7SUFRRix5QkFBSSxhQUFDLE9BQTBCOzs7Ozs7SUFsQnBCLFVBQVU7UUFEdEIsVUFBVSxFQUFFO09BQ0EsVUFBVTtxQkEzSnZCO0VBMkpnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERhdGVQaWNrZXJPcHRpb25zIHtcclxuICAvKipcclxuICAgKiBUaGUgbW9kZSBvZiB0aGUgZGF0ZSBwaWNrZXJcclxuICAgKiBWYWx1ZXM6IGRhdGUgfCB0aW1lIHwgZGF0ZXRpbWVcclxuICAgKi9cclxuICBtb2RlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFNlbGVjdGVkIGRhdGVcclxuICAgKi9cclxuICBkYXRlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBNaW5pbXVtIGRhdGVcclxuICAgKiBEZWZhdWx0OiBlbXB0eSBTdHJpbmdcclxuICAgKi9cclxuICBtaW5EYXRlPzogRGF0ZSB8IHN0cmluZyB8IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogTWF4aW11bSBkYXRlXHJcbiAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXHJcbiAgICovXHJcbiAgbWF4RGF0ZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIGZvciB0aGUgZGlhbG9nIHRpdGxlLiBJZiBlbXB0eSwgdXNlcyBhbmRyb2lkIGRlZmF1bHQgKFNldCBkYXRlL1NldCB0aW1lKS5cclxuICAgKiBEZWZhdWx0OiBlbXB0eSBTdHJpbmdcclxuICAgKi9cclxuICB0aXRsZVRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIEJVVFRPTl9QT1NJVElWRSAoZG9uZSBidXR0b24pIG9uIEFuZHJvaWRcclxuICAgKi9cclxuICBva1RleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIEJVVFRPTl9ORUdBVElWRSAoY2FuY2VsIGJ1dHRvbikuIElmIGVtcHR5LCB1c2VzIGFuZHJvaWQuUi5zdHJpbmcuY2FuY2VsLlxyXG4gICAqL1xyXG4gIGNhbmNlbFRleHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIHRvZGF5IGJ1dHRvbi4gSWYgZW1wdHksIGRvZXNuJ3Qgc2hvdyB0aGUgb3B0aW9uIHRvIHNlbGVjdCBjdXJyZW50IGRhdGUuXHJcbiAgICovXHJcbiAgdG9kYXlUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBvZiBub3cgYnV0dG9uLiBJZiBlbXB0eSwgZG9lc24ndCBzaG93IHRoZSBvcHRpb24gdG8gc2VsZWN0IGN1cnJlbnQgdGltZS5cclxuICAgKi9cclxuICBub3dUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBTaG93cyB0aW1lIGRpYWxvZyBpbiAyNCBob3VycyBmb3JtYXQuXHJcbiAgICovXHJcbiAgaXMyNEhvdXI/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBDaG9vc2UgdGhlIEFuZHJvaWQgdGhlbWUgZm9yIHRoZSBwaWNrZXIuIFlvdSBjYW4gdXNlIHRoZSBEYXRlUGlja2VyLkFORFJPSURfVEhFTUVTIHByb3BlcnR5LlxyXG4gICAqIFZhbHVlczogMTogVEhFTUVfVFJBRElUSU9OQUwgfCAyOiBUSEVNRV9IT0xPX0RBUksgfCAzOiBUSEVNRV9IT0xPX0xJR0hUIHwgNDogVEhFTUVfREVWSUNFX0RFRkFVTFRfREFSSyB8IDU6IFRIRU1FX0RFVklDRV9ERUZBVUxUX0xJR0hUXHJcbiAgICovXHJcbiAgYW5kcm9pZFRoZW1lPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBTaG93cyBvciBoaWRlIGRhdGVzIGVhcmxpZXIgdGhlbiBzZWxlY3RlZCBkYXRlLlxyXG4gICAqL1xyXG4gIGFsbG93T2xkRGF0ZXM/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBTaG93cyBvciBoaWRlIGRhdGVzIGFmdGVyIHNlbGVjdGVkIGRhdGUuXHJcbiAgICovXHJcbiAgYWxsb3dGdXR1cmVEYXRlcz86IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIGRvbmUgYnV0dG9uLlxyXG4gICAqL1xyXG4gIGRvbmVCdXR0b25MYWJlbD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSGV4IGNvbG9yIG9mIGRvbmUgYnV0dG9uLlxyXG4gICAqL1xyXG4gIGRvbmVCdXR0b25Db2xvcj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTGFiZWwgb2YgY2FuY2VsIGJ1dHRvbi5cclxuICAgKi9cclxuICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogSGV4IGNvbG9yIG9mIGNhbmNlbCBidXR0b24uXHJcbiAgICovXHJcbiAgY2FuY2VsQnV0dG9uQ29sb3I/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFggcG9zaXRpb24gb2YgZGF0ZSBwaWNrZXIuIFRoZSBwb3NpdGlvbiBpcyBhYnNvbHV0ZSB0byB0aGUgcm9vdCB2aWV3IG9mIHRoZSBhcHBsaWNhdGlvbi5cclxuICAgKi9cclxuICB4PzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBZIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXHJcbiAgICovXHJcbiAgeT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW50ZXJ2YWwgYmV0d2VlbiBvcHRpb25zIGluIHRoZSBtaW51dGUgc2VjdGlvbiBvZiB0aGUgZGF0ZSBwaWNrZXIuXHJcbiAgICovXHJcbiAgbWludXRlSW50ZXJ2YWw/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEZvcmNlIHRoZSBVSVBvcG92ZXJBcnJvd0RpcmVjdGlvbiBlbnVtLiBUaGUgdmFsdWUgYW55IHdpbGwgcmV2ZXJ0IHRvIGRlZmF1bHQgVUlQb3BvdmVyQXJyb3dEaXJlY3Rpb25BbnkgYW5kIGxldCB0aGUgYXBwIGNob29zZSB0aGUgcHJvcGVyIGRpcmVjdGlvbiBpdHNlbGYuXHJcbiAgICovXHJcbiAgcG9wb3ZlckFycm93RGlyZWN0aW9uPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBGb3JjZSBsb2NhbGUgZm9yIGRhdGVQaWNrZXIuXHJcbiAgICovXHJcbiAgbG9jYWxlPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgRGF0ZSBQaWNrZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBEYXRlUGlja2VyIHBsdWdpbiBhbGxvd3MgdGhlIHVzZXIgdG8gZmV0Y2ggZGF0ZSBvciB0aW1lIHVzaW5nIG5hdGl2ZSBkaWFsb2dzLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBEYXRlUGlja2VyIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kYXRlLXBpY2tlci9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGVQaWNrZXI6IERhdGVQaWNrZXIpIHsgfVxyXG4gKlxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5kYXRlUGlja2VyLnNob3coe1xyXG4gKiAgIGRhdGU6IG5ldyBEYXRlKCksXHJcbiAqICAgbW9kZTogJ2RhdGUnLFxyXG4gKiAgIGFuZHJvaWRUaGVtZTogdGhpcy5kYXRlUGlja2VyLkFORFJPSURfVEhFTUVTLlRIRU1FX0hPTE9fREFSS1xyXG4gKiB9KS50aGVuKFxyXG4gKiAgIGRhdGUgPT4gY29uc29sZS5sb2coJ0dvdCBkYXRlOiAnLCBkYXRlKSxcclxuICogICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yIG9jY3VycmVkIHdoaWxlIGdldHRpbmcgZGF0ZTogJywgZXJyKVxyXG4gKiApO1xyXG4gKiBgYGBcclxuICogQGludGVyZmFjZXNcclxuICogRGF0ZVBpY2tlck9wdGlvbnNcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdEYXRlUGlja2VyJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1kYXRlcGlja2VyJyxcclxuICBwbHVnaW5SZWY6ICdkYXRlUGlja2VyJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1ZpdGFsaWlCbGFnb2Rpci9jb3Jkb3ZhLXBsdWdpbi1kYXRlcGlja2VyJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIEBoaWRkZW5cclxuICAgKi9cclxuICBBTkRST0lEX1RIRU1FUyA9IHtcclxuICAgIFRIRU1FX1RSQURJVElPTkFMOiAxLFxyXG4gICAgVEhFTUVfSE9MT19EQVJLOiAyLFxyXG4gICAgVEhFTUVfSE9MT19MSUdIVDogMyxcclxuICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0RBUks6IDQsXHJcbiAgICBUSEVNRV9ERVZJQ0VfREVGQVVMVF9MSUdIVDogNSxcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBTaG93cyB0aGUgZGF0ZSBhbmQvb3IgdGltZSBwaWNrZXIgZGlhbG9nKHMpXHJcbiAgICogQHBhcmFtIHtEYXRlUGlja2VyT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgZGF0ZSBwaWNrZXIuXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8RGF0ZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcGlja2VkIGRhdGUgYW5kL29yIHRpbWUsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2hvdyhvcHRpb25zOiBEYXRlUGlja2VyT3B0aW9ucyk6IFByb21pc2U8RGF0ZT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iXX0=