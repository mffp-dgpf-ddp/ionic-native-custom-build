var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var DatePickerOriginal = /** @class */ (function (_super) {
    __extends(DatePickerOriginal, _super);
    function DatePickerOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.ANDROID_THEMES = {
            THEME_TRADITIONAL: 1,
            THEME_HOLO_DARK: 2,
            THEME_HOLO_LIGHT: 3,
            THEME_DEVICE_DEFAULT_DARK: 4,
            THEME_DEVICE_DEFAULT_LIGHT: 5,
        };
        return _this;
    }
    DatePickerOriginal.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    DatePickerOriginal.pluginName = "DatePicker";
    DatePickerOriginal.plugin = "cordova-plugin-datepicker";
    DatePickerOriginal.pluginRef = "datePicker";
    DatePickerOriginal.repo = "https://github.com/VitaliiBlagodir/cordova-plugin-datepicker";
    DatePickerOriginal.platforms = ["Android", "iOS", "Windows"];
    return DatePickerOriginal;
}(IonicNativePlugin));
var DatePicker = new DatePickerOriginal();
export { DatePicker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RhdGUtcGlja2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTBKeEMsOEJBQWlCOzs7UUFDL0M7O1dBRUc7UUFDSCxvQkFBYyxHQUFHO1lBQ2YsaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixlQUFlLEVBQUUsQ0FBQztZQUNsQixnQkFBZ0IsRUFBRSxDQUFDO1lBQ25CLHlCQUF5QixFQUFFLENBQUM7WUFDNUIsMEJBQTBCLEVBQUUsQ0FBQztTQUM5QixDQUFDOzs7SUFRRix5QkFBSSxhQUFDLE9BQTBCOzs7Ozs7cUJBN0tqQztFQTJKZ0MsaUJBQWlCO1NBQXBDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEYXRlUGlja2VyT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogVGhlIG1vZGUgb2YgdGhlIGRhdGUgcGlja2VyXHJcbiAgICogVmFsdWVzOiBkYXRlIHwgdGltZSB8IGRhdGV0aW1lXHJcbiAgICovXHJcbiAgbW9kZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBTZWxlY3RlZCBkYXRlXHJcbiAgICovXHJcbiAgZGF0ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogTWluaW11bSBkYXRlXHJcbiAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXHJcbiAgICovXHJcbiAgbWluRGF0ZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIE1heGltdW0gZGF0ZVxyXG4gICAqIERlZmF1bHQ6IGVtcHR5IFN0cmluZ1xyXG4gICAqL1xyXG4gIG1heERhdGU/OiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBmb3IgdGhlIGRpYWxvZyB0aXRsZS4gSWYgZW1wdHksIHVzZXMgYW5kcm9pZCBkZWZhdWx0IChTZXQgZGF0ZS9TZXQgdGltZSkuXHJcbiAgICogRGVmYXVsdDogZW1wdHkgU3RyaW5nXHJcbiAgICovXHJcbiAgdGl0bGVUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBvZiBCVVRUT05fUE9TSVRJVkUgKGRvbmUgYnV0dG9uKSBvbiBBbmRyb2lkXHJcbiAgICovXHJcbiAgb2tUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBvZiBCVVRUT05fTkVHQVRJVkUgKGNhbmNlbCBidXR0b24pLiBJZiBlbXB0eSwgdXNlcyBhbmRyb2lkLlIuc3RyaW5nLmNhbmNlbC5cclxuICAgKi9cclxuICBjYW5jZWxUZXh0Pzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBvZiB0b2RheSBidXR0b24uIElmIGVtcHR5LCBkb2Vzbid0IHNob3cgdGhlIG9wdGlvbiB0byBzZWxlY3QgY3VycmVudCBkYXRlLlxyXG4gICAqL1xyXG4gIHRvZGF5VGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogTGFiZWwgb2Ygbm93IGJ1dHRvbi4gSWYgZW1wdHksIGRvZXNuJ3Qgc2hvdyB0aGUgb3B0aW9uIHRvIHNlbGVjdCBjdXJyZW50IHRpbWUuXHJcbiAgICovXHJcbiAgbm93VGV4dD86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGltZSBkaWFsb2cgaW4gMjQgaG91cnMgZm9ybWF0LlxyXG4gICAqL1xyXG4gIGlzMjRIb3VyPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hvb3NlIHRoZSBBbmRyb2lkIHRoZW1lIGZvciB0aGUgcGlja2VyLiBZb3UgY2FuIHVzZSB0aGUgRGF0ZVBpY2tlci5BTkRST0lEX1RIRU1FUyBwcm9wZXJ0eS5cclxuICAgKiBWYWx1ZXM6IDE6IFRIRU1FX1RSQURJVElPTkFMIHwgMjogVEhFTUVfSE9MT19EQVJLIHwgMzogVEhFTUVfSE9MT19MSUdIVCB8IDQ6IFRIRU1FX0RFVklDRV9ERUZBVUxUX0RBUksgfCA1OiBUSEVNRV9ERVZJQ0VfREVGQVVMVF9MSUdIVFxyXG4gICAqL1xyXG4gIGFuZHJvaWRUaGVtZT86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3Mgb3IgaGlkZSBkYXRlcyBlYXJsaWVyIHRoZW4gc2VsZWN0ZWQgZGF0ZS5cclxuICAgKi9cclxuICBhbGxvd09sZERhdGVzPzogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3Mgb3IgaGlkZSBkYXRlcyBhZnRlciBzZWxlY3RlZCBkYXRlLlxyXG4gICAqL1xyXG4gIGFsbG93RnV0dXJlRGF0ZXM/OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBMYWJlbCBvZiBkb25lIGJ1dHRvbi5cclxuICAgKi9cclxuICBkb25lQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEhleCBjb2xvciBvZiBkb25lIGJ1dHRvbi5cclxuICAgKi9cclxuICBkb25lQnV0dG9uQ29sb3I/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIExhYmVsIG9mIGNhbmNlbCBidXR0b24uXHJcbiAgICovXHJcbiAgY2FuY2VsQnV0dG9uTGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEhleCBjb2xvciBvZiBjYW5jZWwgYnV0dG9uLlxyXG4gICAqL1xyXG4gIGNhbmNlbEJ1dHRvbkNvbG9yPzogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBYIHBvc2l0aW9uIG9mIGRhdGUgcGlja2VyLiBUaGUgcG9zaXRpb24gaXMgYWJzb2x1dGUgdG8gdGhlIHJvb3QgdmlldyBvZiB0aGUgYXBwbGljYXRpb24uXHJcbiAgICovXHJcbiAgeD86IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogWSBwb3NpdGlvbiBvZiBkYXRlIHBpY2tlci4gVGhlIHBvc2l0aW9uIGlzIGFic29sdXRlIHRvIHRoZSByb290IHZpZXcgb2YgdGhlIGFwcGxpY2F0aW9uLlxyXG4gICAqL1xyXG4gIHk/OiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVydmFsIGJldHdlZW4gb3B0aW9ucyBpbiB0aGUgbWludXRlIHNlY3Rpb24gb2YgdGhlIGRhdGUgcGlja2VyLlxyXG4gICAqL1xyXG4gIG1pbnV0ZUludGVydmFsPzogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBGb3JjZSB0aGUgVUlQb3BvdmVyQXJyb3dEaXJlY3Rpb24gZW51bS4gVGhlIHZhbHVlIGFueSB3aWxsIHJldmVydCB0byBkZWZhdWx0IFVJUG9wb3ZlckFycm93RGlyZWN0aW9uQW55IGFuZCBsZXQgdGhlIGFwcCBjaG9vc2UgdGhlIHByb3BlciBkaXJlY3Rpb24gaXRzZWxmLlxyXG4gICAqL1xyXG4gIHBvcG92ZXJBcnJvd0RpcmVjdGlvbj86IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogRm9yY2UgbG9jYWxlIGZvciBkYXRlUGlja2VyLlxyXG4gICAqL1xyXG4gIGxvY2FsZT86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuYW1lIERhdGUgUGlja2VyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgRGF0ZVBpY2tlciBwbHVnaW4gYWxsb3dzIHRoZSB1c2VyIHRvIGZldGNoIGRhdGUgb3IgdGltZSB1c2luZyBuYXRpdmUgZGlhbG9ncy5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGF0ZS1waWNrZXIvbmd4JztcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlUGlja2VyOiBEYXRlUGlja2VyKSB7IH1cclxuICpcclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuZGF0ZVBpY2tlci5zaG93KHtcclxuICogICBkYXRlOiBuZXcgRGF0ZSgpLFxyXG4gKiAgIG1vZGU6ICdkYXRlJyxcclxuICogICBhbmRyb2lkVGhlbWU6IHRoaXMuZGF0ZVBpY2tlci5BTkRST0lEX1RIRU1FUy5USEVNRV9IT0xPX0RBUktcclxuICogfSkudGhlbihcclxuICogICBkYXRlID0+IGNvbnNvbGUubG9nKCdHb3QgZGF0ZTogJywgZGF0ZSksXHJcbiAqICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBnZXR0aW5nIGRhdGU6ICcsIGVycilcclxuICogKTtcclxuICogYGBgXHJcbiAqIEBpbnRlcmZhY2VzXHJcbiAqIERhdGVQaWNrZXJPcHRpb25zXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnRGF0ZVBpY2tlcicsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGF0ZXBpY2tlcicsXHJcbiAgcGx1Z2luUmVmOiAnZGF0ZVBpY2tlcicsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9WaXRhbGlpQmxhZ29kaXIvY29yZG92YS1wbHVnaW4tZGF0ZXBpY2tlcicsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBAaGlkZGVuXHJcbiAgICovXHJcbiAgQU5EUk9JRF9USEVNRVMgPSB7XHJcbiAgICBUSEVNRV9UUkFESVRJT05BTDogMSxcclxuICAgIFRIRU1FX0hPTE9fREFSSzogMixcclxuICAgIFRIRU1FX0hPTE9fTElHSFQ6IDMsXHJcbiAgICBUSEVNRV9ERVZJQ0VfREVGQVVMVF9EQVJLOiA0LFxyXG4gICAgVEhFTUVfREVWSUNFX0RFRkFVTFRfTElHSFQ6IDUsXHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIGRhdGUgYW5kL29yIHRpbWUgcGlja2VyIGRpYWxvZyhzKVxyXG4gICAqIEBwYXJhbSB7RGF0ZVBpY2tlck9wdGlvbnN9IG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIGRhdGUgcGlja2VyLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERhdGU+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHBpY2tlZCBkYXRlIGFuZC9vciB0aW1lLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNob3cob3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnMpOiBQcm9taXNlPERhdGU+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuIl19