import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var KeychainTouchId = /** @class */ (function (_super) {
    __extends(KeychainTouchId, _super);
    function KeychainTouchId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeychainTouchId.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    KeychainTouchId.prototype.save = function (key, password, userAuthenticationRequired) { return cordova(this, "save", {}, arguments); };
    KeychainTouchId.prototype.verify = function (key, message) { return cordova(this, "verify", {}, arguments); };
    KeychainTouchId.prototype.has = function (key) { return cordova(this, "has", {}, arguments); };
    KeychainTouchId.prototype.delete = function (key) { return cordova(this, "delete", {}, arguments); };
    KeychainTouchId.prototype.setLocale = function (locale) { return cordova(this, "setLocale", {}, arguments); };
    KeychainTouchId.pluginName = "KeychainTouchId";
    KeychainTouchId.plugin = "cordova-plugin-keychain-touch-id";
    KeychainTouchId.pluginRef = "plugins.touchid";
    KeychainTouchId.repo = "https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id";
    KeychainTouchId.platforms = ["Android", "iOS"];
    KeychainTouchId = __decorate([
        Injectable()
    ], KeychainTouchId);
    return KeychainTouchId;
}(IonicNativePlugin));
export { KeychainTouchId };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tleWNoYWluLXRvdWNoLWlkL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWdDbkMsbUNBQWlCOzs7O0lBTXBELHFDQUFXO0lBWVgsOEJBQUksYUFBQyxHQUFXLEVBQUUsUUFBZ0IsRUFBRSwwQkFBbUM7SUFZdkUsZ0NBQU0sYUFBQyxHQUFXLEVBQUUsT0FBZTtJQVVuQyw2QkFBRyxhQUFDLEdBQVc7SUFVZixnQ0FBTSxhQUFDLEdBQVc7SUFTbEIsbUNBQVMsYUFBQyxNQUFjOzs7Ozs7SUEzRGIsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlOzBCQWpDNUI7RUFpQ3FDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBLZXljaGFpbiBUb3VjaCBJZFxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBjb3Jkb3ZhIHBsdWdpbiBhZGRpbmcgdGhlIGlPUyBUb3VjaElEIC8gQW5kcm9pZCBmaW5nZXJwcmludCB0byB5b3VyXHJcbiAqIGFwcCBhbmQgYWxsb3dpbmcgeW91IHRvIHN0b3JlIGEgcGFzc3dvcmQgc2VjdXJlbHkgaW4gdGhlIGRldmljZSBrZXljaGFpbi5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgS2V5Y2hhaW5Ub3VjaElkIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9rZXljaGFpbi10b3VjaC1pZC9uZ3gnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGtleWNoYWluVG91Y2hJZDogS2V5Y2hhaW5Ub3VjaElkKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMua2V5Y2hhaW5Ub3VjaElkLmlzQXZhaWxhYmxlKClcclxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXHJcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0tleWNoYWluVG91Y2hJZCcsXHJcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4ta2V5Y2hhaW4tdG91Y2gtaWQnLFxyXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMudG91Y2hpZCcsXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zamhvZWtzbWEvY29yZG92YS1wbHVnaW4ta2V5Y2hhaW4tdG91Y2gtaWQnLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxyXG59KVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBLZXljaGFpblRvdWNoSWQgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgVG91Y2ggSUQgLyBGaW5nZXJwcmludCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZXJlIGlzIGhhcmR3YXJlIHN1cHBvcnRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuY3J5cHRzIGFuZCBTYXZlcyBhIHBhc3N3b3JkIHVuZGVyIHRoZSBrZXkgaW4gdGhlIGRldmljZSBrZXljaGFpbiwgd2hpY2ggY2FuIGJlIHJldHJpZXZlZCBhZnRlclxyXG4gICAqIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb24gdXNpbmcgZmluZ2VycHJpbnRcclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9IHRoZSBrZXkgeW91IHdhbnQgdG8gc3RvcmVcclxuICAgKiBAcGFyYW0gcGFzc3dvcmQge3N0cmluZ30gdGhlIHBhc3N3b3JkIHlvdSB3YW50IHRvIGVuY3J5cHQgYW5kIHN0b3JlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlcmUgaXMgYSByZXN1bHRcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2F2ZShrZXk6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgdXNlckF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbnMgdGhlIGZpbmdlcnByaW50IGRpYWxvZywgZm9yIHRoZSBnaXZlbiBrZXksIHNob3dpbmcgYW4gYWRkaXRpb25hbCBtZXNzYWdlLiBQcm9taXNlIHdpbGwgcmVzb2x2ZVxyXG4gICAqIHdpdGggdGhlIHBhc3N3b3JkIHN0b3JlZCBpbiBrZXljaGFpbiBvciB3aWxsIHJlc29sdmUgYW4gZXJyb3IgY29kZSwgd2hlcmUgLTEgaW5kaWNhdGVkIG5vdCBhdmFpbGFibGUuXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIHJldHJpZXZlIGZyb20ga2V5Y2hhaW5cclxuICAgKiBAcGFyYW0gbWVzc2FnZSB7c3RyaW5nfSBhIG1lc3NhZ2UgdG8gdGhlIHVzZXJcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUga2V5IHZhbHVlIGlzIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgb3IgYW4gZXJyb3JcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdmVyaWZ5KGtleTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZXJlIGlzIGEgcGFzc3dvcmQgc3RvcmVkIHdpdGhpbiB0aGUga2V5Y2hhaW4gZm9yIHRoZSBnaXZlbiBrZXkuXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIGNoZWNrIGZyb20ga2V5Y2hhaW5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBzdWNjZXNzIGlmIHRoZSBrZXkgaXMgYXZhaWxhYmxlIG9yIGZhaWx1cmUgaWYga2V5IGlzIG5vdC5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgaGFzKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlbGV0ZXMgdGhlIHBhc3N3b3JkIHN0b3JlZCB1bmRlciBnaXZlbiBrZXkgZnJvbSB0aGUga2V5Y2hhaW4uXHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIGRlbGV0ZSBmcm9tIGtleWNoYWluXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggc3VjY2VzcyBpZiB0aGUga2V5IGlzIGRlbGV0ZWQgb3IgZmFpbHVyZSBpZiBrZXkgaXMgbm90XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZShrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBsYW5ndWFnZSBvZiB0aGUgZmluZ2VycHJpbnQgZGlhbG9nXHJcbiAgICogQHBhcmFtIGxvY2FsZSB7c3RyaW5nfSBsb2NhbGUgc3VidGFnIGZyb20gW3RoaXMgbGlzdF0oaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbGFuZ3VhZ2Utc3VidGFnLXJlZ2lzdHJ5L2xhbmd1YWdlLXN1YnRhZy1yZWdpc3RyeSkuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNldExvY2FsZShsb2NhbGU6IHN0cmluZyk6IHZvaWQge31cclxufVxyXG4iXX0=