var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var KeychainTouchIdOriginal = /** @class */ (function (_super) {
    __extends(KeychainTouchIdOriginal, _super);
    function KeychainTouchIdOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeychainTouchIdOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    KeychainTouchIdOriginal.prototype.save = function (key, password, userAuthenticationRequired) { return cordova(this, "save", {}, arguments); };
    KeychainTouchIdOriginal.prototype.verify = function (key, message) { return cordova(this, "verify", {}, arguments); };
    KeychainTouchIdOriginal.prototype.has = function (key) { return cordova(this, "has", {}, arguments); };
    KeychainTouchIdOriginal.prototype.delete = function (key) { return cordova(this, "delete", {}, arguments); };
    KeychainTouchIdOriginal.prototype.setLocale = function (locale) { return cordova(this, "setLocale", {}, arguments); };
    KeychainTouchIdOriginal.pluginName = "KeychainTouchId";
    KeychainTouchIdOriginal.plugin = "cordova-plugin-keychain-touch-id";
    KeychainTouchIdOriginal.pluginRef = "plugins.touchid";
    KeychainTouchIdOriginal.repo = "https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id";
    KeychainTouchIdOriginal.platforms = ["Android", "iOS"];
    return KeychainTouchIdOriginal;
}(IonicNativePlugin));
var KeychainTouchId = new KeychainTouchIdOriginal();
export { KeychainTouchId };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tleWNoYWluLXRvdWNoLWlkL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWdDbkMsbUNBQWlCOzs7O0lBTXBELHFDQUFXO0lBWVgsOEJBQUksYUFBQyxHQUFXLEVBQUUsUUFBZ0IsRUFBRSwwQkFBbUM7SUFZdkUsZ0NBQU0sYUFBQyxHQUFXLEVBQUUsT0FBZTtJQVVuQyw2QkFBRyxhQUFDLEdBQVc7SUFVZixnQ0FBTSxhQUFDLEdBQVc7SUFTbEIsbUNBQVMsYUFBQyxNQUFjOzs7Ozs7MEJBNUYxQjtFQWlDcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEtleWNoYWluIFRvdWNoIElkXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNvcmRvdmEgcGx1Z2luIGFkZGluZyB0aGUgaU9TIFRvdWNoSUQgLyBBbmRyb2lkIGZpbmdlcnByaW50IHRvIHlvdXJcclxuICogYXBwIGFuZCBhbGxvd2luZyB5b3UgdG8gc3RvcmUgYSBwYXNzd29yZCBzZWN1cmVseSBpbiB0aGUgZGV2aWNlIGtleWNoYWluLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBLZXljaGFpblRvdWNoSWQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2tleWNoYWluLXRvdWNoLWlkL25neCc7XHJcbiAqXHJcbiAqXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUga2V5Y2hhaW5Ub3VjaElkOiBLZXljaGFpblRvdWNoSWQpIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICpcclxuICogdGhpcy5rZXljaGFpblRvdWNoSWQuaXNBdmFpbGFibGUoKVxyXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcclxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcclxuICpcclxuICogYGBgXHJcbiAqL1xyXG5AUGx1Z2luKHtcclxuICBwbHVnaW5OYW1lOiAnS2V5Y2hhaW5Ub3VjaElkJyxcclxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1rZXljaGFpbi10b3VjaC1pZCcsXHJcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy50b3VjaGlkJyxcclxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NqaG9la3NtYS9jb3Jkb3ZhLXBsdWdpbi1rZXljaGFpbi10b3VjaC1pZCcsXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXHJcbn0pXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEtleWNoYWluVG91Y2hJZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVjayBpZiBUb3VjaCBJRCAvIEZpbmdlcnByaW50IGlzIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlcmUgaXMgaGFyZHdhcmUgc3VwcG9ydFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5jcnlwdHMgYW5kIFNhdmVzIGEgcGFzc3dvcmQgdW5kZXIgdGhlIGtleSBpbiB0aGUgZGV2aWNlIGtleWNoYWluLCB3aGljaCBjYW4gYmUgcmV0cmlldmVkIGFmdGVyXHJcbiAgICogc3VjY2Vzc2Z1bCBhdXRoZW50aWNhdGlvbiB1c2luZyBmaW5nZXJwcmludFxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byBzdG9yZVxyXG4gICAqIEBwYXJhbSBwYXNzd29yZCB7c3RyaW5nfSB0aGUgcGFzc3dvcmQgeW91IHdhbnQgdG8gZW5jcnlwdCBhbmQgc3RvcmVcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGVyZSBpcyBhIHJlc3VsdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzYXZlKGtleTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCB1c2VyQXV0aGVudGljYXRpb25SZXF1aXJlZDogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVucyB0aGUgZmluZ2VycHJpbnQgZGlhbG9nLCBmb3IgdGhlIGdpdmVuIGtleSwgc2hvd2luZyBhbiBhZGRpdGlvbmFsIG1lc3NhZ2UuIFByb21pc2Ugd2lsbCByZXNvbHZlXHJcbiAgICogd2l0aCB0aGUgcGFzc3dvcmQgc3RvcmVkIGluIGtleWNoYWluIG9yIHdpbGwgcmVzb2x2ZSBhbiBlcnJvciBjb2RlLCB3aGVyZSAtMSBpbmRpY2F0ZWQgbm90IGF2YWlsYWJsZS5cclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9IHRoZSBrZXkgeW91IHdhbnQgdG8gcmV0cmlldmUgZnJvbSBrZXljaGFpblxyXG4gICAqIEBwYXJhbSBtZXNzYWdlIHtzdHJpbmd9IGEgbWVzc2FnZSB0byB0aGUgdXNlclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBrZXkgdmFsdWUgaXMgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBvciBhbiBlcnJvclxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICB2ZXJpZnkoa2V5OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBwYXNzd29yZCBzdG9yZWQgd2l0aGluIHRoZSBrZXljaGFpbiBmb3IgdGhlIGdpdmVuIGtleS5cclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9IHRoZSBrZXkgeW91IHdhbnQgdG8gY2hlY2sgZnJvbSBrZXljaGFpblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHN1Y2Nlc3MgaWYgdGhlIGtleSBpcyBhdmFpbGFibGUgb3IgZmFpbHVyZSBpZiBrZXkgaXMgbm90LlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBoYXMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVsZXRlcyB0aGUgcGFzc3dvcmQgc3RvcmVkIHVuZGVyIGdpdmVuIGtleSBmcm9tIHRoZSBrZXljaGFpbi5cclxuICAgKiBAcGFyYW0ga2V5IHtzdHJpbmd9IHRoZSBrZXkgeW91IHdhbnQgdG8gZGVsZXRlIGZyb20ga2V5Y2hhaW5cclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBzdWNjZXNzIGlmIHRoZSBrZXkgaXMgZGVsZXRlZCBvciBmYWlsdXJlIGlmIGtleSBpcyBub3RcclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVsZXRlKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGxhbmd1YWdlIG9mIHRoZSBmaW5nZXJwcmludCBkaWFsb2dcclxuICAgKiBAcGFyYW0gbG9jYWxlIHtzdHJpbmd9IGxvY2FsZSBzdWJ0YWcgZnJvbSBbdGhpcyBsaXN0XShodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9sYW5ndWFnZS1zdWJ0YWctcmVnaXN0cnkvbGFuZ3VhZ2Utc3VidGFnLXJlZ2lzdHJ5KS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZCB7fVxyXG59XHJcbiJdfQ==