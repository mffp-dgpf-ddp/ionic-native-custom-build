{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/@ionic-native/core/decorators/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface PluginConfig {\r\n  /**\r\n   * Plugin name, this should match the class name\r\n   */\r\n  pluginName: string;\r\n  /**\r\n   * Plugin NPM package name\r\n   */\r\n  plugin: string;\r\n  /**\r\n   * Plugin object reference\r\n   */\r\n  pluginRef?: string;\r\n  /**\r\n   * Github repository URL\r\n   */\r\n  repo?: string;\r\n  /**\r\n   * Custom install command\r\n   */\r\n  install?: string;\r\n  /**\r\n   * Available installation variables\r\n   */\r\n  installVariables?: string[];\r\n  /**\r\n   * Supported platforms\r\n   */\r\n  platforms?: string[];\r\n\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface CordovaOptions {\r\n  destruct?: boolean;\r\n  /**\r\n   * Set to true if the wrapped method is a sync function\r\n   */\r\n  sync?: boolean;\r\n  /**\r\n   * Callback order. Set to reverse if the success/error callbacks are the first 2 arguments that the wrapped method\r\n   * takes.\r\n   */\r\n  callbackOrder?: 'reverse';\r\n  /**\r\n   * Callback style\r\n   */\r\n  callbackStyle?: 'node' | 'object';\r\n  /**\r\n   * Set a custom index for the success callback function. This doesn't work if callbackOrder or callbackStyle are set.\r\n   */\r\n  successIndex?: number;\r\n  /**\r\n   * Set a custom index for the error callback function. This doesn't work if callbackOrder or callbackStyle are set.\r\n   */\r\n  errorIndex?: number;\r\n  /**\r\n   * Success function property name. This must be set if callbackStyle is set to object.\r\n   */\r\n  successName?: string;\r\n  /**\r\n   * Error function property name. This must be set if callbackStyle is set to object.\r\n   */\r\n  errorName?: string;\r\n  /**\r\n   * Set to true to return an observable\r\n   */\r\n  observable?: boolean;\r\n  /**\r\n   * If observable is set to true, this can be set to a different function name that will cancel the observable.\r\n   */\r\n  clearFunction?: string;\r\n  /**\r\n   * This can be used if clearFunction is set. Set this to true to call the clearFunction with the same arguments used\r\n   * in the initial function.\r\n   */\r\n  clearWithArgs?: boolean;\r\n  /**\r\n   * Creates an observable that wraps a global event. Replaces document.addEventListener\r\n   */\r\n  eventObservable?: boolean;\r\n  /**\r\n   * Event name, this must be set if eventObservable is set to true\r\n   */\r\n  event?: string;\r\n  /**\r\n   * Element to attach the event listener to, this is optional, defaults to `window`\r\n   */\r\n  element?: any;\r\n  /**\r\n   * Set to true if the wrapped method returns a promise\r\n   */\r\n  otherPromise?: boolean;\r\n  /**\r\n   * Supported platforms\r\n   */\r\n  platforms?: string[];\r\n}\r\n\r\nexport declare const Plugin: (config: PluginConfig) => ClassDecorator;\r\nexport declare const Cordova: (config?: CordovaOptions) => MethodDecorator;\r\nexport declare const CordovaProperty: () => PropertyDecorator;\r\nexport declare const CordovaInstance: (config?: CordovaOptions) => MethodDecorator;\r\nexport declare const InstanceProperty: () => PropertyDecorator;\r\nexport declare const CordovaCheck: (config?: CordovaOptions) => MethodDecorator;\r\nexport declare const InstanceCheck: (config?: CordovaOptions) => MethodDecorator;\r\nexport declare const CordovaFunctionOverride: () => MethodDecorator;\r\n"]}